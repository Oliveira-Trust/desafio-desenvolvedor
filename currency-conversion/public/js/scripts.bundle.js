/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 2);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./resources/js/scripts.js":
/*!*********************************!*\
  !*** ./resources/js/scripts.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// Keenthemes' plugins\nwindow.KTUtil = __webpack_require__(/*! ../metronic/js/components/util.js */ \"./resources/metronic/js/components/util.js\");\nwindow.KTApp = __webpack_require__(/*! ../metronic/js/components/app.js */ \"./resources/metronic/js/components/app.js\");\nwindow.KTCard = __webpack_require__(/*! ../metronic/js/components/card.js */ \"./resources/metronic/js/components/card.js\");\nwindow.KTCookie = __webpack_require__(/*! ../metronic/js/components/cookie.js */ \"./resources/metronic/js/components/cookie.js\");\nwindow.KTDialog = __webpack_require__(/*! ../metronic/js/components/dialog.js */ \"./resources/metronic/js/components/dialog.js\");\nwindow.KTHeader = __webpack_require__(/*! ../metronic/js/components/header.js */ \"./resources/metronic/js/components/header.js\");\nwindow.KTImageInput = __webpack_require__(/*! ../metronic/js/components/image-input.js */ \"./resources/metronic/js/components/image-input.js\");\nwindow.KTMenu = __webpack_require__(/*! ../metronic/js/components/menu.js */ \"./resources/metronic/js/components/menu.js\");\nwindow.KTOffcanvas = __webpack_require__(/*! ../metronic/js/components/offcanvas.js */ \"./resources/metronic/js/components/offcanvas.js\");\nwindow.KTScrolltop = __webpack_require__(/*! ../metronic/js/components/scrolltop.js */ \"./resources/metronic/js/components/scrolltop.js\");\nwindow.KTToggle = __webpack_require__(/*! ../metronic/js/components/toggle.js */ \"./resources/metronic/js/components/toggle.js\");\nwindow.KTWizard = __webpack_require__(/*! ../metronic/js/components/wizard.js */ \"./resources/metronic/js/components/wizard.js\");\n\n__webpack_require__(/*! ../metronic/js/components/datatable/core.datatable.js */ \"./resources/metronic/js/components/datatable/core.datatable.js\");\n\n__webpack_require__(/*! ../metronic/js/components/datatable/datatable.checkbox.js */ \"./resources/metronic/js/components/datatable/datatable.checkbox.js\");\n\n__webpack_require__(/*! ../metronic/js/components/datatable/datatable.rtl.js */ \"./resources/metronic/js/components/datatable/datatable.rtl.js\"); // Metronic layout base js\n\n\nwindow.KTLayoutAside = __webpack_require__(/*! ../metronic/js/layout/base/aside.js */ \"./resources/metronic/js/layout/base/aside.js\");\nwindow.KTLayoutAsideMenu = __webpack_require__(/*! ../metronic/js/layout/base/aside-menu.js */ \"./resources/metronic/js/layout/base/aside-menu.js\");\nwindow.KTLayoutAsideToggle = __webpack_require__(/*! ../metronic/js/layout/base/aside-toggle.js */ \"./resources/metronic/js/layout/base/aside-toggle.js\");\nwindow.KTLayoutBrand = __webpack_require__(/*! ../metronic/js/layout/base/brand.js */ \"./resources/metronic/js/layout/base/brand.js\");\nwindow.KTLayoutContent = __webpack_require__(/*! ../metronic/js/layout/base/content.js */ \"./resources/metronic/js/layout/base/content.js\");\nwindow.KTLayoutFooter = __webpack_require__(/*! ../metronic/js/layout/base/footer.js */ \"./resources/metronic/js/layout/base/footer.js\");\nwindow.KTLayoutHeader = __webpack_require__(/*! ../metronic/js/layout/base/header.js */ \"./resources/metronic/js/layout/base/header.js\");\nwindow.KTLayoutHeaderMenu = __webpack_require__(/*! ../metronic/js/layout/base/header-menu.js */ \"./resources/metronic/js/layout/base/header-menu.js\");\nwindow.KTLayoutHeaderTopbar = __webpack_require__(/*! ../metronic/js/layout/base/header-topbar.js */ \"./resources/metronic/js/layout/base/header-topbar.js\");\nwindow.KTLayoutStickyCard = __webpack_require__(/*! ../metronic/js/layout/base/sticky-card.js */ \"./resources/metronic/js/layout/base/sticky-card.js\");\nwindow.KTLayoutStretchedCard = __webpack_require__(/*! ../metronic/js/layout/base/stretched-card.js */ \"./resources/metronic/js/layout/base/stretched-card.js\");\nwindow.KTLayoutSubheader = __webpack_require__(/*! ../metronic/js/layout/base/subheader.js */ \"./resources/metronic/js/layout/base/subheader.js\"); // Metronic layout extended js\n\nwindow.KTLayoutChat = __webpack_require__(/*! ../metronic/js/layout/extended/chat.js */ \"./resources/metronic/js/layout/extended/chat.js\");\nwindow.KTLayoutDemoPanel = __webpack_require__(/*! ../metronic/js/layout/extended/demo-panel.js */ \"./resources/metronic/js/layout/extended/demo-panel.js\");\nwindow.KTLayoutExamples = __webpack_require__(/*! ../metronic/js/layout/extended/examples.js */ \"./resources/metronic/js/layout/extended/examples.js\");\nwindow.KTLayoutQuickActions = __webpack_require__(/*! ../metronic/js/layout/extended/quick-actions.js */ \"./resources/metronic/js/layout/extended/quick-actions.js\");\nwindow.KTLayoutQuickCartPanel = __webpack_require__(/*! ../metronic/js/layout/extended/quick-cart.js */ \"./resources/metronic/js/layout/extended/quick-cart.js\");\nwindow.KTLayoutQuickNotifications = __webpack_require__(/*! ../metronic/js/layout/extended/quick-notifications.js */ \"./resources/metronic/js/layout/extended/quick-notifications.js\");\nwindow.KTLayoutQuickPanel = __webpack_require__(/*! ../metronic/js/layout/extended/quick-panel.js */ \"./resources/metronic/js/layout/extended/quick-panel.js\");\nwindow.KTLayoutQuickSearch = __webpack_require__(/*! ../metronic/js/layout/extended/quick-search.js */ \"./resources/metronic/js/layout/extended/quick-search.js\");\nwindow.KTLayoutQuickUser = __webpack_require__(/*! ../metronic/js/layout/extended/quick-user.js */ \"./resources/metronic/js/layout/extended/quick-user.js\");\nwindow.KTLayoutScrolltop = __webpack_require__(/*! ../metronic/js/layout/extended/scrolltop.js */ \"./resources/metronic/js/layout/extended/scrolltop.js\");\nwindow.KTLayoutSearch = window.KTLayoutSearchOffcanvas = __webpack_require__(/*! ../metronic/js/layout/extended/search.js */ \"./resources/metronic/js/layout/extended/search.js\");\n\n__webpack_require__(/*! ../metronic/js/layout/initialize.js */ \"./resources/metronic/js/layout/initialize.js\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/scripts.js\n");

/***/ }),

/***/ "./resources/metronic/js/components/app.js":
/*!*************************************************!*\
  !*** ./resources/metronic/js/components/app.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" // Component Definition\n\nvar KTApp = function () {\n  /** @type {object} colors State colors **/\n  var settings = {};\n\n  var _initTooltip = function initTooltip(el) {\n    var theme = el.data('theme') ? 'tooltip-' + el.data('theme') : '';\n    var width = el.data('width') == 'auto' ? 'tooltop-auto-width' : '';\n    var trigger = el.data('trigger') ? el.data('trigger') : 'hover';\n    $(el).tooltip({\n      trigger: trigger,\n      template: '<div class=\"tooltip ' + theme + ' ' + width + '\" role=\"tooltip\">\\\r\n                <div class=\"arrow\"></div>\\\r\n                <div class=\"tooltip-inner\"></div>\\\r\n            </div>'\n    });\n  };\n\n  var _initTooltips = function initTooltips() {\n    // init bootstrap tooltips\n    $('[data-toggle=\"tooltip\"]').each(function () {\n      _initTooltip($(this));\n    });\n  };\n\n  var _initPopover = function initPopover(el) {\n    var skin = el.data('skin') ? 'popover-' + el.data('skin') : '';\n    var triggerValue = el.data('trigger') ? el.data('trigger') : 'hover';\n    el.popover({\n      trigger: triggerValue,\n      template: '\\\r\n            <div class=\"popover ' + skin + '\" role=\"tooltip\">\\\r\n                <div class=\"arrow\"></div>\\\r\n                <h3 class=\"popover-header\"></h3>\\\r\n                <div class=\"popover-body\"></div>\\\r\n            </div>'\n    });\n  };\n\n  var _initPopovers = function initPopovers() {\n    // init bootstrap popover\n    $('[data-toggle=\"popover\"]').each(function () {\n      _initPopover($(this));\n    });\n  };\n\n  var initFileInput = function initFileInput() {\n    // init bootstrap popover\n    $('.custom-file-input').on('change', function () {\n      var fileName = $(this).val();\n      $(this).next('.custom-file-label').addClass(\"selected\").html(fileName);\n    });\n  };\n\n  var initScroll = function initScroll() {\n    $('[data-scroll=\"true\"]').each(function () {\n      var el = $(this);\n      KTUtil.scrollInit(this, {\n        mobileNativeScroll: true,\n        handleWindowResize: true,\n        rememberPosition: el.data('remember-position') == 'true' ? true : false\n      });\n    });\n  };\n\n  var initAlerts = function initAlerts() {\n    // init bootstrap popover\n    $('body').on('click', '[data-close=alert]', function () {\n      $(this).closest('.alert').hide();\n    });\n  };\n\n  var _initCard = function initCard(el, options) {\n    // init card tools\n    var el = $(el);\n    var card = new KTCard(el[0], options);\n  };\n\n  var _initCards = function initCards() {\n    // init card tools\n    $('[data-card=\"true\"]').each(function () {\n      var el = $(this);\n      var options = {};\n\n      if (el.data('data-card-initialized') !== true) {\n        _initCard(el, options);\n\n        el.data('data-card-initialized', true);\n      }\n    });\n  };\n\n  var initStickyCard = function initStickyCard() {\n    if (typeof Sticky === 'undefined') {\n      return;\n    }\n\n    var sticky = new Sticky('[data-sticky=\"true\"]');\n  };\n\n  var _initAbsoluteDropdown = function initAbsoluteDropdown(context) {\n    var dropdownMenu;\n\n    if (!context) {\n      return;\n    }\n\n    $('body').on('show.bs.dropdown', context, function (e) {\n      dropdownMenu = $(e.target).find('.dropdown-menu');\n      $('body').append(dropdownMenu.detach());\n      dropdownMenu.css('display', 'block');\n      dropdownMenu.position({\n        'my': 'right top',\n        'at': 'right bottom',\n        'of': $(e.relatedTarget)\n      });\n    }).on('hide.bs.dropdown', context, function (e) {\n      $(e.target).append(dropdownMenu.detach());\n      dropdownMenu.hide();\n    });\n  };\n\n  var initAbsoluteDropdowns = function initAbsoluteDropdowns() {\n    $('body').on('show.bs.dropdown', function (e) {\n      // e.target is always parent (contains toggler and menu)\n      var $toggler = $(e.target).find(\"[data-attach='body']\");\n\n      if ($toggler.length === 0) {\n        return;\n      }\n\n      var $dropdownMenu = $(e.target).find('.dropdown-menu'); // save detached menu\n\n      var $detachedDropdownMenu = $dropdownMenu.detach(); // save reference to detached menu inside data of toggler\n\n      $toggler.data('dropdown-menu', $detachedDropdownMenu);\n      $('body').append($detachedDropdownMenu);\n      $detachedDropdownMenu.css('display', 'block');\n      $detachedDropdownMenu.position({\n        my: 'right top',\n        at: 'right bottom',\n        of: $(e.relatedTarget)\n      });\n    });\n    $('body').on('hide.bs.dropdown', function (e) {\n      var $toggler = $(e.target).find(\"[data-attach='body']\");\n\n      if ($toggler.length === 0) {\n        return;\n      } // access to reference of detached menu from data of toggler\n\n\n      var $detachedDropdownMenu = $toggler.data('dropdown-menu'); // re-append detached menu inside parent\n\n      $(e.target).append($detachedDropdownMenu.detach()); // hide dropdown\n\n      $detachedDropdownMenu.hide();\n    });\n  };\n\n  return {\n    init: function init(settingsArray) {\n      if (settingsArray) {\n        settings = settingsArray;\n      }\n\n      KTApp.initComponents();\n    },\n    initComponents: function initComponents() {\n      initScroll();\n\n      _initTooltips();\n\n      _initPopovers();\n\n      initAlerts();\n      initFileInput();\n\n      _initCards();\n\n      initStickyCard();\n      initAbsoluteDropdowns();\n    },\n    initTooltips: function initTooltips() {\n      _initTooltips();\n    },\n    initTooltip: function initTooltip(el) {\n      _initTooltip(el);\n    },\n    initPopovers: function initPopovers() {\n      _initPopovers();\n    },\n    initPopover: function initPopover(el) {\n      _initPopover(el);\n    },\n    initCard: function initCard(el, options) {\n      _initCard(el, options);\n    },\n    initCards: function initCards() {\n      _initCards();\n    },\n    initSticky: function (_initSticky) {\n      function initSticky() {\n        return _initSticky.apply(this, arguments);\n      }\n\n      initSticky.toString = function () {\n        return _initSticky.toString();\n      };\n\n      return initSticky;\n    }(function () {\n      initSticky();\n    }),\n    initAbsoluteDropdown: function initAbsoluteDropdown(context) {\n      _initAbsoluteDropdown(context);\n    },\n    block: function block(target, options) {\n      var el = $(target);\n      options = $.extend(true, {\n        opacity: 0.05,\n        overlayColor: '#000000',\n        type: '',\n        size: '',\n        state: 'primary',\n        centerX: true,\n        centerY: true,\n        message: '',\n        shadow: true,\n        width: 'auto'\n      }, options);\n      var html;\n      var version = options.type ? 'spinner-' + options.type : '';\n      var state = options.state ? 'spinner-' + options.state : '';\n      var size = options.size ? 'spinner-' + options.size : '';\n      var spinner = '<span class=\"spinner ' + version + ' ' + state + ' ' + size + '\"></span';\n\n      if (options.message && options.message.length > 0) {\n        var classes = 'blockui ' + (options.shadow === false ? 'blockui' : '');\n        html = '<div class=\"' + classes + '\"><span>' + options.message + '</span>' + spinner + '</div>';\n        var el = document.createElement('div');\n        $('body').prepend(el);\n        KTUtil.addClass(el, classes);\n        el.innerHTML = html;\n        options.width = KTUtil.actualWidth(el) + 10;\n        KTUtil.remove(el);\n\n        if (target == 'body') {\n          html = '<div class=\"' + classes + '\" style=\"margin-left:-' + options.width / 2 + 'px;\"><span>' + options.message + '</span><span>' + spinner + '</span></div>';\n        }\n      } else {\n        html = spinner;\n      }\n\n      var params = {\n        message: html,\n        centerY: options.centerY,\n        centerX: options.centerX,\n        css: {\n          top: '30%',\n          left: '50%',\n          border: '0',\n          padding: '0',\n          backgroundColor: 'none',\n          width: options.width\n        },\n        overlayCSS: {\n          backgroundColor: options.overlayColor,\n          opacity: options.opacity,\n          cursor: 'wait',\n          zIndex: target == 'body' ? 1100 : 10\n        },\n        onUnblock: function onUnblock() {\n          if (el && el[0]) {\n            KTUtil.css(el[0], 'position', '');\n            KTUtil.css(el[0], 'zoom', '');\n          }\n        }\n      };\n\n      if (target == 'body') {\n        params.css.top = '50%';\n        $.blockUI(params);\n      } else {\n        var el = $(target);\n        el.block(params);\n      }\n    },\n    unblock: function unblock(target) {\n      if (target && target != 'body') {\n        $(target).unblock();\n      } else {\n        $.unblockUI();\n      }\n    },\n    blockPage: function blockPage(options) {\n      return KTApp.block('body', options);\n    },\n    unblockPage: function unblockPage() {\n      return KTApp.unblock('body');\n    },\n    getSettings: function getSettings() {\n      return settings;\n    }\n  };\n}(); // webpack support\n\n\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTApp;\n} // Initialize KTApp class on document ready\n\n\n$(document).ready(function () {\n  KTApp.init(KTAppSettings);\n}); // CSS3 Transitions only after page load(.page-loading class added to body tag and remove with JS on page load)\n\nwindow.onload = function () {\n  var result = KTUtil.getByTagName('body');\n\n  if (result && result[0]) {\n    KTUtil.removeClass(result[0], 'page-loading');\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/components/app.js\n");

/***/ }),

/***/ "./resources/metronic/js/components/card.js":
/*!**************************************************!*\
  !*** ./resources/metronic/js/components/card.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" // Component Definition\n\nvar KTCard = function KTCard(elementId, options) {\n  // Main object\n  var the = this;\n  var init = false; // Get element object\n\n  var element = KTUtil.getById(elementId);\n  var body = KTUtil.getBody();\n\n  if (!element) {\n    return;\n  } // Default options\n\n\n  var defaultOptions = {\n    toggleSpeed: 400,\n    sticky: {\n      releseOnReverse: false,\n      offset: 300,\n      zIndex: 101\n    }\n  }; ////////////////////////////\n  // ** Private Methods  ** //\n  ////////////////////////////\n\n  var Plugin = {\n    /**\r\n     * Construct\r\n     */\n    construct: function construct(options) {\n      if (KTUtil.data(element).has('card')) {\n        the = KTUtil.data(element).get('card');\n      } else {\n        // reset menu\n        Plugin.init(options); // build menu\n\n        Plugin.build();\n        KTUtil.data(element).set('card', the);\n      }\n\n      return the;\n    },\n\n    /**\r\n     * Init card\r\n     */\n    init: function init(options) {\n      the.element = element;\n      the.events = []; // merge default and user defined options\n\n      the.options = KTUtil.deepExtend({}, defaultOptions, options);\n      the.header = KTUtil.child(element, '.card-header');\n      the.footer = KTUtil.child(element, '.card-footer');\n\n      if (KTUtil.child(element, '.card-body')) {\n        the.body = KTUtil.child(element, '.card-body');\n      } else if (KTUtil.child(element, '.form')) {\n        the.body = KTUtil.child(element, '.form');\n      }\n    },\n\n    /**\r\n     * Build Form Wizard\r\n     */\n    build: function build() {\n      // Remove\n      var remove = KTUtil.find(the.header, '[data-card-tool=remove]');\n\n      if (remove) {\n        KTUtil.addEvent(remove, 'click', function (e) {\n          e.preventDefault();\n          Plugin.remove();\n        });\n      } // Reload\n\n\n      var reload = KTUtil.find(the.header, '[data-card-tool=reload]');\n\n      if (reload) {\n        KTUtil.addEvent(reload, 'click', function (e) {\n          e.preventDefault();\n          Plugin.reload();\n        });\n      } // Toggle\n\n\n      var toggle = KTUtil.find(the.header, '[data-card-tool=toggle]');\n\n      if (toggle) {\n        KTUtil.addEvent(toggle, 'click', function (e) {\n          e.preventDefault();\n          Plugin.toggle();\n        });\n      }\n    },\n\n    /**\r\n     * Enable stickt mode\r\n     */\n    initSticky: function initSticky() {\n      var lastScrollTop = 0;\n      var offset = the.options.sticky.offset;\n\n      if (!the.header) {\n        return;\n      }\n\n      window.addEventListener('scroll', Plugin.onScrollSticky);\n    },\n\n    /**\r\n     * Window scroll handle event for sticky card\r\n     */\n    onScrollSticky: function onScrollSticky(e) {\n      var offset = the.options.sticky.offset;\n      if (isNaN(offset)) return;\n      var st = KTUtil.getScrollTop();\n\n      if (st >= offset && KTUtil.hasClass(body, 'card-sticky-on') === false) {\n        Plugin.eventTrigger('stickyOn');\n        KTUtil.addClass(body, 'card-sticky-on');\n        Plugin.updateSticky();\n      } else if (st * 1.5 <= offset && KTUtil.hasClass(body, 'card-sticky-on')) {\n        // Back scroll mode\n        Plugin.eventTrigger('stickyOff');\n        KTUtil.removeClass(body, 'card-sticky-on');\n        Plugin.resetSticky();\n      }\n    },\n    updateSticky: function updateSticky() {\n      if (!the.header) {\n        return;\n      }\n\n      var top;\n\n      if (KTUtil.hasClass(body, 'card-sticky-on')) {\n        if (the.options.sticky.position.top instanceof Function) {\n          top = parseInt(the.options.sticky.position.top.call(this, the));\n        } else {\n          top = parseInt(the.options.sticky.position.top);\n        }\n\n        var left;\n\n        if (the.options.sticky.position.left instanceof Function) {\n          left = parseInt(the.options.sticky.position.left.call(this, the));\n        } else {\n          left = parseInt(the.options.sticky.position.left);\n        }\n\n        var right;\n\n        if (the.options.sticky.position.right instanceof Function) {\n          right = parseInt(the.options.sticky.position.right.call(this, the));\n        } else {\n          right = parseInt(the.options.sticky.position.right);\n        }\n\n        KTUtil.css(the.header, 'z-index', the.options.sticky.zIndex);\n        KTUtil.css(the.header, 'top', top + 'px');\n        KTUtil.css(the.header, 'left', left + 'px');\n        KTUtil.css(the.header, 'right', right + 'px');\n      }\n    },\n    resetSticky: function resetSticky() {\n      if (!the.header) {\n        return;\n      }\n\n      if (KTUtil.hasClass(body, 'card-sticky-on') === false) {\n        KTUtil.css(the.header, 'z-index', '');\n        KTUtil.css(the.header, 'top', '');\n        KTUtil.css(the.header, 'left', '');\n        KTUtil.css(the.header, 'right', '');\n      }\n    },\n\n    /**\r\n     * Remove card\r\n     */\n    remove: function remove() {\n      if (Plugin.eventTrigger('beforeRemove') === false) {\n        return;\n      } // Remove tooltips\n\n\n      var tooltips;\n\n      if (tooltips = document.querySelectorAll('.tooltip.show')) {\n        $(tooltips).tooltip('dispose');\n      }\n\n      KTUtil.remove(element);\n      Plugin.eventTrigger('afterRemove');\n    },\n\n    /**\r\n     * Set content\r\n     */\n    setContent: function setContent(html) {\n      if (html) {\n        the.body.innerHTML = html;\n      }\n    },\n\n    /**\r\n     * Get body\r\n     */\n    getBody: function getBody() {\n      return the.body;\n    },\n\n    /**\r\n     * Get self\r\n     */\n    getSelf: function getSelf() {\n      return element;\n    },\n\n    /**\r\n     * Reload\r\n     */\n    reload: function reload() {\n      Plugin.eventTrigger('reload');\n    },\n\n    /**\r\n     * Toggle\r\n     */\n    toggle: function toggle() {\n      if (KTUtil.hasClass(element, 'card-collapse') || KTUtil.hasClass(element, 'card-collapsed')) {\n        Plugin.expand();\n      } else {\n        Plugin.collapse();\n      }\n    },\n\n    /**\r\n     * Collapse\r\n     */\n    collapse: function collapse() {\n      if (Plugin.eventTrigger('beforeCollapse') === false) {\n        return;\n      }\n\n      KTUtil.slideUp(the.body, the.options.toggleSpeed, function () {\n        Plugin.eventTrigger('afterCollapse');\n      });\n      KTUtil.addClass(element, 'card-collapse');\n    },\n\n    /**\r\n     * Expand\r\n     */\n    expand: function expand() {\n      if (Plugin.eventTrigger('beforeExpand') === false) {\n        return;\n      }\n\n      KTUtil.slideDown(the.body, the.options.toggleSpeed, function () {\n        Plugin.eventTrigger('afterExpand');\n      });\n      KTUtil.removeClass(element, 'card-collapse');\n      KTUtil.removeClass(element, 'card-collapsed');\n    },\n\n    /**\r\n     * Trigger events\r\n     */\n    eventTrigger: function eventTrigger(name) {\n      //KTUtil.triggerCustomEvent(name);\n      for (var i = 0; i < the.events.length; i++) {\n        var event = the.events[i];\n\n        if (event.name == name) {\n          if (event.one == true) {\n            if (event.fired == false) {\n              the.events[i].fired = true;\n              return event.handler.call(this, the);\n            }\n          } else {\n            return event.handler.call(this, the);\n          }\n        }\n      }\n    },\n    addEvent: function addEvent(name, handler, one) {\n      the.events.push({\n        name: name,\n        handler: handler,\n        one: one,\n        fired: false\n      });\n      return the;\n    }\n  }; //////////////////////////\n  // ** Public Methods ** //\n  //////////////////////////\n\n  /**\r\n   * Set default options\r\n   */\n\n  the.setDefaults = function (options) {\n    defaultOptions = options;\n  };\n  /**\r\n   * Remove card\r\n   */\n\n\n  the.remove = function () {\n    return Plugin.remove(html);\n  };\n  /**\r\n   * Init sticky card\r\n   */\n\n\n  the.initSticky = function () {\n    return Plugin.initSticky();\n  };\n  /**\r\n   * Rerender sticky layout\r\n   */\n\n\n  the.updateSticky = function () {\n    return Plugin.updateSticky();\n  };\n  /**\r\n   * Reset the sticky\r\n   */\n\n\n  the.resetSticky = function () {\n    return Plugin.resetSticky();\n  };\n  /**\r\n   * Destroy sticky card\r\n   */\n\n\n  the.destroySticky = function () {\n    Plugin.resetSticky();\n    window.removeEventListener('scroll', Plugin.onScrollSticky);\n  };\n  /**\r\n   * Reload card\r\n   */\n\n\n  the.reload = function () {\n    return Plugin.reload();\n  };\n  /**\r\n   * Set card content\r\n   */\n\n\n  the.setContent = function (html) {\n    return Plugin.setContent(html);\n  };\n  /**\r\n   * Toggle card\r\n   */\n\n\n  the.toggle = function () {\n    return Plugin.toggle();\n  };\n  /**\r\n   * Collapse card\r\n   */\n\n\n  the.collapse = function () {\n    return Plugin.collapse();\n  };\n  /**\r\n   * Expand card\r\n   */\n\n\n  the.expand = function () {\n    return Plugin.expand();\n  };\n  /**\r\n   * Get cardbody\r\n   * @returns {jQuery}\r\n   */\n\n\n  the.getBody = function () {\n    return Plugin.getBody();\n  };\n  /**\r\n   * Get cardbody\r\n   * @returns {jQuery}\r\n   */\n\n\n  the.getSelf = function () {\n    return Plugin.getSelf();\n  };\n  /**\r\n   * Attach event\r\n   */\n\n\n  the.on = function (name, handler) {\n    return Plugin.addEvent(name, handler);\n  };\n  /**\r\n   * Attach event that will be fired once\r\n   */\n\n\n  the.one = function (name, handler) {\n    return Plugin.addEvent(name, handler, true);\n  }; // Construct plugin\n\n\n  Plugin.construct.apply(the, [options]);\n  return the;\n}; // webpack support\n\n\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTCard;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/components/card.js\n");

/***/ }),

/***/ "./resources/metronic/js/components/cookie.js":
/*!****************************************************!*\
  !*** ./resources/metronic/js/components/cookie.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" // DOCS: https://javascript.info/cookie\n// Component Definition\n\nvar KTCookie = function () {\n  return {\n    // returns the cookie with the given name,\n    // or undefined if not found\n    getCookie: function getCookie(name) {\n      var matches = document.cookie.match(new RegExp(\"(?:^|; )\" + name.replace(/([\\.$?*|{}\\(\\)\\[\\]\\\\\\/\\+^])/g, '\\\\$1') + \"=([^;]*)\"));\n      return matches ? decodeURIComponent(matches[1]) : undefined;\n    },\n    // Please note that a cookie value is encoded,\n    // so getCookie uses a built-in decodeURIComponent function to decode it.\n    setCookie: function setCookie(name, value, options) {\n      if (!options) {\n        options = {};\n      }\n\n      options = Object.assign({}, {\n        path: '/'\n      }, options);\n\n      if (options.expires instanceof Date) {\n        options.expires = options.expires.toUTCString();\n      }\n\n      var updatedCookie = encodeURIComponent(name) + \"=\" + encodeURIComponent(value);\n\n      for (var optionKey in options) {\n        if (!options.hasOwnProperty(optionKey)) {\n          continue;\n        }\n\n        updatedCookie += \"; \" + optionKey;\n        var optionValue = options[optionKey];\n\n        if (optionValue !== true) {\n          updatedCookie += \"=\" + optionValue;\n        }\n      }\n\n      document.cookie = updatedCookie;\n    },\n    // To delete a cookie, we can call it with a negative expiration date:\n    deleteCookie: function deleteCookie(name) {\n      setCookie(name, \"\", {\n        'max-age': -1\n      });\n    }\n  };\n}(); // webpack support\n\n\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTCookie;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvY29tcG9uZW50cy9jb29raWUuanM/MTlhMiJdLCJuYW1lcyI6WyJLVENvb2tpZSIsImdldENvb2tpZSIsIm5hbWUiLCJtYXRjaGVzIiwiZG9jdW1lbnQiLCJjb29raWUiLCJtYXRjaCIsIlJlZ0V4cCIsInJlcGxhY2UiLCJkZWNvZGVVUklDb21wb25lbnQiLCJ1bmRlZmluZWQiLCJzZXRDb29raWUiLCJ2YWx1ZSIsIm9wdGlvbnMiLCJPYmplY3QiLCJhc3NpZ24iLCJwYXRoIiwiZXhwaXJlcyIsIkRhdGUiLCJ0b1VUQ1N0cmluZyIsInVwZGF0ZWRDb29raWUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJvcHRpb25LZXkiLCJoYXNPd25Qcm9wZXJ0eSIsIm9wdGlvblZhbHVlIiwiZGVsZXRlQ29va2llIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkNBQ0E7QUFFQTs7QUFDQSxJQUFJQSxRQUFRLEdBQUcsWUFBVztBQUN4QixTQUFPO0FBQ0w7QUFDQTtBQUNBQyxhQUFTLEVBQUUsbUJBQVNDLElBQVQsRUFBZTtBQUN4QixVQUFJQyxPQUFPLEdBQUdDLFFBQVEsQ0FBQ0MsTUFBVCxDQUFnQkMsS0FBaEIsQ0FBc0IsSUFBSUMsTUFBSixDQUNsQyxhQUFhTCxJQUFJLENBQUNNLE9BQUwsQ0FBYSw4QkFBYixFQUE2QyxNQUE3QyxDQUFiLEdBQW9FLFVBRGxDLENBQXRCLENBQWQ7QUFHQSxhQUFPTCxPQUFPLEdBQUdNLGtCQUFrQixDQUFDTixPQUFPLENBQUMsQ0FBRCxDQUFSLENBQXJCLEdBQW9DTyxTQUFsRDtBQUNELEtBUkk7QUFTTDtBQUNBO0FBQ0FDLGFBQVMsRUFBRSxtQkFBU1QsSUFBVCxFQUFlVSxLQUFmLEVBQXNCQyxPQUF0QixFQUErQjtBQUN4QyxVQUFJLENBQUNBLE9BQUwsRUFBYztBQUNWQSxlQUFPLEdBQUcsRUFBVjtBQUNIOztBQUVEQSxhQUFPLEdBQUdDLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjLEVBQWQsRUFBa0I7QUFBQ0MsWUFBSSxFQUFFO0FBQVAsT0FBbEIsRUFBK0JILE9BQS9CLENBQVY7O0FBRUEsVUFBSUEsT0FBTyxDQUFDSSxPQUFSLFlBQTJCQyxJQUEvQixFQUFxQztBQUNuQ0wsZUFBTyxDQUFDSSxPQUFSLEdBQWtCSixPQUFPLENBQUNJLE9BQVIsQ0FBZ0JFLFdBQWhCLEVBQWxCO0FBQ0Q7O0FBRUQsVUFBSUMsYUFBYSxHQUFHQyxrQkFBa0IsQ0FBQ25CLElBQUQsQ0FBbEIsR0FBMkIsR0FBM0IsR0FBaUNtQixrQkFBa0IsQ0FBQ1QsS0FBRCxDQUF2RTs7QUFFQSxXQUFLLElBQUlVLFNBQVQsSUFBc0JULE9BQXRCLEVBQStCO0FBQzdCLFlBQUksQ0FBQ0EsT0FBTyxDQUFDVSxjQUFSLENBQXVCRCxTQUF2QixDQUFMLEVBQXdDO0FBQ3RDO0FBQ0Q7O0FBQ0RGLHFCQUFhLElBQUksT0FBT0UsU0FBeEI7QUFDQSxZQUFJRSxXQUFXLEdBQUdYLE9BQU8sQ0FBQ1MsU0FBRCxDQUF6Qjs7QUFDQSxZQUFJRSxXQUFXLEtBQUssSUFBcEIsRUFBMEI7QUFDeEJKLHVCQUFhLElBQUksTUFBTUksV0FBdkI7QUFDRDtBQUNGOztBQUVEcEIsY0FBUSxDQUFDQyxNQUFULEdBQWtCZSxhQUFsQjtBQUNELEtBcENJO0FBcUNMO0FBQ0FLLGdCQUFZLEVBQUUsc0JBQVN2QixJQUFULEVBQWU7QUFDM0JTLGVBQVMsQ0FBQ1QsSUFBRCxFQUFPLEVBQVAsRUFBVztBQUNsQixtQkFBVyxDQUFDO0FBRE0sT0FBWCxDQUFUO0FBR0Q7QUExQ0ksR0FBUDtBQTRDRCxDQTdDYyxFQUFmLEMsQ0ErQ0E7OztBQUNBLElBQUksU0FBaUMsT0FBT3dCLE1BQU0sQ0FBQ0MsT0FBZCxLQUEwQixXQUEvRCxFQUE0RTtBQUMxRUQsUUFBTSxDQUFDQyxPQUFQLEdBQWlCM0IsUUFBakI7QUFDRCIsImZpbGUiOiIuL3Jlc291cmNlcy9tZXRyb25pYy9qcy9jb21wb25lbnRzL2Nvb2tpZS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG4vLyBET0NTOiBodHRwczovL2phdmFzY3JpcHQuaW5mby9jb29raWVcclxuXHJcbi8vIENvbXBvbmVudCBEZWZpbml0aW9uXHJcbnZhciBLVENvb2tpZSA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiB7XHJcbiAgICAvLyByZXR1cm5zIHRoZSBjb29raWUgd2l0aCB0aGUgZ2l2ZW4gbmFtZSxcclxuICAgIC8vIG9yIHVuZGVmaW5lZCBpZiBub3QgZm91bmRcclxuICAgIGdldENvb2tpZTogZnVuY3Rpb24obmFtZSkge1xyXG4gICAgICB2YXIgbWF0Y2hlcyA9IGRvY3VtZW50LmNvb2tpZS5tYXRjaChuZXcgUmVnRXhwKFxyXG4gICAgICAgIFwiKD86Xnw7IClcIiArIG5hbWUucmVwbGFjZSgvKFtcXC4kPyp8e31cXChcXClcXFtcXF1cXFxcXFwvXFwrXl0pL2csICdcXFxcJDEnKSArIFwiPShbXjtdKilcIlxyXG4gICAgICApKTtcclxuICAgICAgcmV0dXJuIG1hdGNoZXMgPyBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hlc1sxXSkgOiB1bmRlZmluZWQ7XHJcbiAgICB9LFxyXG4gICAgLy8gUGxlYXNlIG5vdGUgdGhhdCBhIGNvb2tpZSB2YWx1ZSBpcyBlbmNvZGVkLFxyXG4gICAgLy8gc28gZ2V0Q29va2llIHVzZXMgYSBidWlsdC1pbiBkZWNvZGVVUklDb21wb25lbnQgZnVuY3Rpb24gdG8gZGVjb2RlIGl0LlxyXG4gICAgc2V0Q29va2llOiBmdW5jdGlvbihuYW1lLCB2YWx1ZSwgb3B0aW9ucykge1xyXG4gICAgICBpZiAoIW9wdGlvbnMpIHtcclxuICAgICAgICAgIG9wdGlvbnMgPSB7fTtcclxuICAgICAgfVxyXG5cclxuICAgICAgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIHtwYXRoOiAnLyd9LCBvcHRpb25zKTtcclxuXHJcbiAgICAgIGlmIChvcHRpb25zLmV4cGlyZXMgaW5zdGFuY2VvZiBEYXRlKSB7XHJcbiAgICAgICAgb3B0aW9ucy5leHBpcmVzID0gb3B0aW9ucy5leHBpcmVzLnRvVVRDU3RyaW5nKCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciB1cGRhdGVkQ29va2llID0gZW5jb2RlVVJJQ29tcG9uZW50KG5hbWUpICsgXCI9XCIgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpO1xyXG5cclxuICAgICAgZm9yICh2YXIgb3B0aW9uS2V5IGluIG9wdGlvbnMpIHtcclxuICAgICAgICBpZiAoIW9wdGlvbnMuaGFzT3duUHJvcGVydHkob3B0aW9uS2V5KSkge1xyXG4gICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHVwZGF0ZWRDb29raWUgKz0gXCI7IFwiICsgb3B0aW9uS2V5O1xyXG4gICAgICAgIHZhciBvcHRpb25WYWx1ZSA9IG9wdGlvbnNbb3B0aW9uS2V5XTtcclxuICAgICAgICBpZiAob3B0aW9uVmFsdWUgIT09IHRydWUpIHtcclxuICAgICAgICAgIHVwZGF0ZWRDb29raWUgKz0gXCI9XCIgKyBvcHRpb25WYWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGRvY3VtZW50LmNvb2tpZSA9IHVwZGF0ZWRDb29raWU7XHJcbiAgICB9LFxyXG4gICAgLy8gVG8gZGVsZXRlIGEgY29va2llLCB3ZSBjYW4gY2FsbCBpdCB3aXRoIGEgbmVnYXRpdmUgZXhwaXJhdGlvbiBkYXRlOlxyXG4gICAgZGVsZXRlQ29va2llOiBmdW5jdGlvbihuYW1lKSB7XHJcbiAgICAgIHNldENvb2tpZShuYW1lLCBcIlwiLCB7XHJcbiAgICAgICAgJ21heC1hZ2UnOiAtMVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxufSgpO1xyXG5cclxuLy8gd2VicGFjayBzdXBwb3J0XHJcbmlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgbW9kdWxlLmV4cG9ydHMgPSBLVENvb2tpZTtcclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/metronic/js/components/cookie.js\n");

/***/ }),

/***/ "./resources/metronic/js/components/datatable/core.datatable.js":
/*!**********************************************************************!*\
  !*** ./resources/metronic/js/components/datatable/core.datatable.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n(function ($) {\n  var pluginName = 'KTDatatable';\n  var pfx = '';\n  var util = KTUtil;\n  var app = KTApp;\n  if (typeof util === 'undefined') throw new Error('Util class is required and must be included before ' + pluginName); // plugin setup\n\n  $.fn[pluginName] = function (options) {\n    if ($(this).length === 0) {\n      console.warn('No ' + pluginName + ' element exist.');\n      return;\n    } // global variables\n\n\n    var datatable = this; // debug enabled?\n    // 1) state will be cleared on each refresh\n    // 2) enable some logs\n    // 3) etc.\n\n    datatable.debug = false;\n    datatable.API = {\n      record: null,\n      value: null,\n      params: null\n    };\n    var Plugin = {\n      /********************\r\n       ** PRIVATE METHODS\r\n       ********************/\n      isInit: false,\n      cellOffset: 110,\n      iconOffset: 15,\n      stateId: 'meta',\n      ajaxParams: {},\n      pagingObject: {},\n      init: function init(options) {\n        var isHtmlTable = false; // data source option empty is normal table\n\n        if (options.data.source === null) {\n          Plugin.extractTable();\n          isHtmlTable = true;\n        }\n\n        Plugin.setupBaseDOM.call();\n        Plugin.setupDOM(datatable.table); // on event after layout had done setup, show datatable\n\n        $(datatable).on(pfx + 'datatable-on-layout-updated', Plugin.afterRender);\n\n        if (datatable.debug) {\n          Plugin.stateRemove(Plugin.stateId);\n        }\n        /*var es = Plugin.stateGet(Plugin.stateId);\r\n        var eq = {};\r\n        if (es && es.hasOwnProperty('query')) {\r\n        \teq = es.query;\r\n        }\r\n        Plugin.setDataSourceQuery(Object.assign({}, eq, Plugin.getOption('data.source.read.params.query')));*/\n        // set custom query from options\n\n\n        Plugin.setDataSourceQuery(Plugin.getOption('data.source.read.params.query')); // initialize extensions\n\n        $.each(Plugin.getOption('extensions'), function (extName, extOptions) {\n          if (typeof $.fn[pluginName][extName] === 'function') {\n            if (_typeof(extOptions) !== 'object') {\n              extOptions = $.extend({}, extOptions);\n            }\n\n            new $.fn[pluginName][extName](datatable, extOptions);\n          }\n        });\n        Plugin.spinnerCallback(true); // get data\n\n        if (options.data.type === 'remote' || options.data.type === 'local') {\n          if (options.data.saveState === false) {\n            Plugin.stateRemove(Plugin.stateId);\n          } // get data for local datatable and local table\n\n\n          if (options.data.type === 'local' && _typeof(options.data.source) === 'object') {\n            datatable.dataSet = datatable.originalDataSet = Plugin.dataMapCallback(options.data.source);\n          }\n\n          Plugin.dataRender();\n        } // if html table, remove and setup a new header\n\n\n        if (isHtmlTable) {\n          $(datatable.tableHead).find('tr').remove();\n          $(datatable.tableFoot).find('tr').remove();\n        }\n\n        Plugin.setHeadTitle();\n\n        if (Plugin.getOption('layout.footer')) {\n          Plugin.setHeadTitle(datatable.tableFoot);\n        } // hide header\n\n\n        if (typeof options.layout.header !== 'undefined' && options.layout.header === false) {\n          $(datatable.table).find('thead').remove();\n        } // hide footer\n\n\n        if (typeof options.layout.footer !== 'undefined' && options.layout.footer === false) {\n          $(datatable.table).find('tfoot').remove();\n        } // for normal and local data type, run layoutUpdate\n\n\n        if (options.data.type === null || options.data.type === 'local') {\n          Plugin.setupCellField.call();\n          Plugin.setupTemplateCell.call(); // setup nested datatable, if option enabled\n\n          Plugin.setupSubDatatable.call(); // setup extra system column properties\n\n          Plugin.setupSystemColumn.call();\n          Plugin.redraw();\n        }\n\n        var width;\n        var initialWidth = false;\n        $(window).resize(function () {\n          // issue: URL Bar Resizing on mobile, https://developers.google.com/web/updates/2016/12/url-bar-resizing\n          // trigger datatable resize on width change only\n          if ($(this).width() !== width) {\n            width = $(this).width();\n            Plugin.fullRender();\n          } // get initial width\n\n\n          if (!initialWidth) {\n            width = $(this).width();\n            initialWidth = true;\n          }\n        });\n        $(datatable).height('');\n        var prevKeyword = '';\n        $(Plugin.getOption('search.input')).on('keyup', function (e) {\n          if (Plugin.getOption('search.onEnter') && e.which !== 13) return;\n          var keyword = $(this).val(); // prevent multiple search request on every button keyup\n\n          if (prevKeyword !== keyword) {\n            Plugin.search(keyword);\n            prevKeyword = keyword;\n          }\n        });\n        return datatable;\n      },\n\n      /**\r\n       * Extract static HTML table content into datasource\r\n       */\n      extractTable: function extractTable() {\n        var columns = [];\n        var headers = $(datatable).find('tr:first-child th').get().map(function (cell, i) {\n          var field = $(cell).data('field');\n          var title = $(cell).data('title');\n\n          if (typeof field === 'undefined') {\n            field = $(cell).text().trim();\n          }\n\n          if (typeof title === 'undefined') {\n            title = $(cell).text().trim();\n          }\n\n          var column = {\n            field: field,\n            title: title\n          };\n\n          for (var ii in options.columns) {\n            if (options.columns[ii].field === field) {\n              column = $.extend(true, {}, options.columns[ii], column);\n            }\n          }\n\n          columns.push(column);\n          return field;\n        }); // auto create columns config\n\n        options.columns = columns;\n        var rowProp = [];\n        var source = [];\n        $(datatable).find('tr').each(function () {\n          if ($(this).find('td').length) {\n            rowProp.push($(this).prop('attributes'));\n          }\n\n          var td = {};\n          $(this).find('td').each(function (i, cell) {\n            td[headers[i]] = cell.innerHTML.trim();\n          });\n\n          if (!util.isEmpty(td)) {\n            source.push(td);\n          }\n        });\n        options.data.attr.rowProps = rowProp;\n        options.data.source = source;\n      },\n\n      /**\r\n       * One time layout update on init\r\n       */\n      layoutUpdate: function layoutUpdate() {\n        // setup nested datatable, if option enabled\n        Plugin.setupSubDatatable.call(); // setup extra system column properties\n\n        Plugin.setupSystemColumn.call(); // setup cell hover event\n\n        Plugin.setupHover.call();\n\n        if (typeof options.detail === 'undefined' // temporary disable lock column in subtable\n        && Plugin.getDepth() === 1) {\n          // lock columns handler\n          Plugin.lockTable.call();\n        }\n\n        Plugin.resetScroll(); // check if not is a locked column\n\n        if (!Plugin.isLocked()) {\n          Plugin.redraw.call(); // check if its not a subtable and has autoHide option enabled\n\n          if (!Plugin.isSubtable() && Plugin.getOption('rows.autoHide') === true) {\n            Plugin.autoHide();\n          } // reset row\n\n\n          $(datatable.table).find('.' + pfx + 'datatable-row').css('height', '');\n        }\n\n        Plugin.columnHide.call();\n        Plugin.rowEvenOdd.call();\n        Plugin.sorting.call();\n        Plugin.scrollbar.call();\n\n        if (!Plugin.isInit) {\n          // run once dropdown inside datatable\n          Plugin.dropdownFix();\n          $(datatable).trigger(pfx + 'datatable-on-init', {\n            table: $(datatable.wrap).attr('id'),\n            options: options\n          });\n          Plugin.isInit = true;\n        }\n\n        $(datatable).trigger(pfx + 'datatable-on-layout-updated', {\n          table: $(datatable.wrap).attr('id')\n        });\n      },\n      dropdownFix: function dropdownFix() {\n        var dropdownMenu;\n        $('body').on('show.bs.dropdown', '.' + pfx + 'datatable .' + pfx + 'datatable-body', function (e) {\n          dropdownMenu = $(e.target).find('.dropdown-menu');\n          $('body').append(dropdownMenu.detach()); // dropdownMenu.css('display', 'block');\n\n          dropdownMenu.position({\n            'my': 'right top',\n            'at': 'right bottom',\n            'of': $(e.relatedTarget)\n          }); // if datatable is inside modal\n\n          if (datatable.closest('.modal').length) {\n            // increase dropdown z-index\n            dropdownMenu.css('z-index', '2000');\n          }\n        }).on('hide.bs.dropdown', '.' + pfx + 'datatable .' + pfx + 'datatable-body', function (e) {\n          $(e.target).append(dropdownMenu.detach());\n          dropdownMenu.hide();\n        }); // remove dropdown if window resize\n\n        $(window).on('resize', function (e) {\n          if (typeof dropdownMenu !== 'undefined') {\n            dropdownMenu.hide();\n          }\n        });\n      },\n      lockTable: function lockTable() {\n        var lock = {\n          lockEnabled: false,\n          init: function init() {\n            // check if table should be locked columns\n            lock.lockEnabled = Plugin.lockEnabledColumns();\n\n            if (lock.lockEnabled.left.length === 0 && lock.lockEnabled.right.length === 0) {\n              return;\n            }\n\n            lock.enable();\n          },\n          enable: function enable() {\n            var enableLock = function enableLock(tablePart) {\n              // check if already has lock column\n              if ($(tablePart).find('.' + pfx + 'datatable-lock').length > 0) {\n                Plugin.log('Locked container already exist in: ', tablePart);\n                return;\n              } // check if no rows exists\n\n\n              if ($(tablePart).find('.' + pfx + 'datatable-row').length === 0) {\n                Plugin.log('No row exist in: ', tablePart);\n                return;\n              } // locked div container\n\n\n              var lockLeft = $('<div/>').addClass(pfx + 'datatable-lock ' + pfx + 'datatable-lock-left');\n              var lockScroll = $('<div/>').addClass(pfx + 'datatable-lock ' + pfx + 'datatable-lock-scroll');\n              var lockRight = $('<div/>').addClass(pfx + 'datatable-lock ' + pfx + 'datatable-lock-right');\n              $(tablePart).find('.' + pfx + 'datatable-row').each(function () {\n                // create new row for lock columns and pass the data\n                var rowLeft = $('<tr/>').addClass(pfx + 'datatable-row').data('obj', $(this).data('obj')).appendTo(lockLeft);\n                var rowScroll = $('<tr/>').addClass(pfx + 'datatable-row').data('obj', $(this).data('obj')).appendTo(lockScroll);\n                var rowRight = $('<tr/>').addClass(pfx + 'datatable-row').data('obj', $(this).data('obj')).appendTo(lockRight);\n                $(this).find('.' + pfx + 'datatable-cell').each(function () {\n                  var locked = $(this).data('locked');\n\n                  if (typeof locked !== 'undefined') {\n                    if (typeof locked.left !== 'undefined' || locked === true) {\n                      // default locked to left\n                      $(this).appendTo(rowLeft);\n                    }\n\n                    if (typeof locked.right !== 'undefined') {\n                      $(this).appendTo(rowRight);\n                    }\n                  } else {\n                    $(this).appendTo(rowScroll);\n                  }\n                }); // remove old row\n\n                $(this).remove();\n              });\n\n              if (lock.lockEnabled.left.length > 0) {\n                $(datatable.wrap).addClass(pfx + 'datatable-lock');\n                $(lockLeft).appendTo(tablePart);\n              }\n\n              if (lock.lockEnabled.left.length > 0 || lock.lockEnabled.right.length > 0) {\n                $(lockScroll).appendTo(tablePart);\n              }\n\n              if (lock.lockEnabled.right.length > 0) {\n                $(datatable.wrap).addClass(pfx + 'datatable-lock');\n                $(lockRight).appendTo(tablePart);\n              }\n            };\n\n            $(datatable.table).find('thead,tbody,tfoot').each(function () {\n              var tablePart = this;\n\n              if ($(this).find('.' + pfx + 'datatable-lock').length === 0) {\n                $(this).ready(function () {\n                  enableLock(tablePart);\n                });\n              }\n            });\n          }\n        };\n        lock.init();\n        return lock;\n      },\n\n      /**\r\n       * Render everything for resize\r\n       */\n      fullRender: function fullRender() {\n        $(datatable.tableHead).empty();\n        Plugin.setHeadTitle();\n\n        if (Plugin.getOption('layout.footer')) {\n          $(datatable.tableFoot).empty();\n          Plugin.setHeadTitle(datatable.tableFoot);\n        }\n\n        Plugin.spinnerCallback(true);\n        $(datatable.wrap).removeClass(pfx + 'datatable-loaded');\n        Plugin.insertData();\n      },\n      lockEnabledColumns: function lockEnabledColumns() {\n        var screen = $(window).width();\n        var columns = options.columns;\n        var enabled = {\n          left: [],\n          right: []\n        };\n        $.each(columns, function (i, column) {\n          if (typeof column.locked !== 'undefined') {\n            if (typeof column.locked.left !== 'undefined') {\n              if (util.getBreakpoint(column.locked.left) <= screen) {\n                enabled['left'].push(column.locked.left);\n              }\n            }\n\n            if (typeof column.locked.right !== 'undefined') {\n              if (util.getBreakpoint(column.locked.right) <= screen) {\n                enabled['right'].push(column.locked.right);\n              }\n            }\n          }\n        });\n        return enabled;\n      },\n\n      /**\r\n       * After render event, called by \"datatable-on-layout-updated\"\r\n       * @param e\r\n       * @param args\r\n       */\n      afterRender: function afterRender(e, args) {\n        $(datatable).ready(function () {\n          // redraw locked columns table\n          if (Plugin.isLocked()) {\n            Plugin.redraw();\n          }\n\n          $(datatable.tableBody).css('visibility', '');\n          $(datatable.wrap).addClass(pfx + 'datatable-loaded');\n          Plugin.spinnerCallback(false);\n        });\n      },\n      hoverTimer: 0,\n      isScrolling: false,\n      setupHover: function setupHover() {\n        $(window).scroll(function (e) {\n          // stop hover when scrolling\n          clearTimeout(Plugin.hoverTimer);\n          Plugin.isScrolling = true;\n        });\n        $(datatable.tableBody).find('.' + pfx + 'datatable-cell').off('mouseenter', 'mouseleave').on('mouseenter', function () {\n          // reset scroll timer to hover class\n          Plugin.hoverTimer = setTimeout(function () {\n            Plugin.isScrolling = false;\n          }, 200);\n          if (Plugin.isScrolling) return; // normal table\n\n          var row = $(this).closest('.' + pfx + 'datatable-row').addClass(pfx + 'datatable-row-hover');\n          var index = $(row).index() + 1; // lock table\n\n          $(row).closest('.' + pfx + 'datatable-lock').parent().find('.' + pfx + 'datatable-row:nth-child(' + index + ')').addClass(pfx + 'datatable-row-hover');\n        }).on('mouseleave', function () {\n          // normal table\n          var row = $(this).closest('.' + pfx + 'datatable-row').removeClass(pfx + 'datatable-row-hover');\n          var index = $(row).index() + 1; // look table\n\n          $(row).closest('.' + pfx + 'datatable-lock').parent().find('.' + pfx + 'datatable-row:nth-child(' + index + ')').removeClass(pfx + 'datatable-row-hover');\n        });\n      },\n\n      /**\r\n       * Adjust width of locked table containers by resize handler\r\n       * @returns {number}\r\n       */\n      adjustLockContainer: function adjustLockContainer() {\n        if (!Plugin.isLocked()) return 0; // refer to head dimension\n\n        var containerWidth = $(datatable.tableHead).width();\n        var lockLeft = $(datatable.tableHead).find('.' + pfx + 'datatable-lock-left').width();\n        var lockRight = $(datatable.tableHead).find('.' + pfx + 'datatable-lock-right').width();\n        if (typeof lockLeft === 'undefined') lockLeft = 0;\n        if (typeof lockRight === 'undefined') lockRight = 0;\n        var lockScroll = Math.floor(containerWidth - lockLeft - lockRight);\n        $(datatable.table).find('.' + pfx + 'datatable-lock-scroll').css('width', lockScroll);\n        return lockScroll;\n      },\n\n      /**\r\n       * todo; not in use\r\n       */\n      dragResize: function dragResize() {\n        var pressed = false;\n        var start = undefined;\n        var startX, startWidth;\n        $(datatable.tableHead).find('.' + pfx + 'datatable-cell').mousedown(function (e) {\n          start = $(this);\n          pressed = true;\n          startX = e.pageX;\n          startWidth = $(this).width();\n          $(start).addClass(pfx + 'datatable-cell-resizing');\n        }).mousemove(function (e) {\n          if (pressed) {\n            var i = $(start).index();\n            var tableBody = $(datatable.tableBody);\n            var ifLocked = $(start).closest('.' + pfx + 'datatable-lock');\n\n            if (ifLocked) {\n              var lockedIndex = $(ifLocked).index();\n              tableBody = $(datatable.tableBody).find('.' + pfx + 'datatable-lock').eq(lockedIndex);\n            }\n\n            $(tableBody).find('.' + pfx + 'datatable-row').each(function (tri, tr) {\n              $(tr).find('.' + pfx + 'datatable-cell').eq(i).width(startWidth + (e.pageX - startX)).children().width(startWidth + (e.pageX - startX));\n            });\n            $(start).children().css('width', startWidth + (e.pageX - startX));\n          }\n        }).mouseup(function () {\n          $(start).removeClass(pfx + 'datatable-cell-resizing');\n          pressed = false;\n        });\n        $(document).mouseup(function () {\n          $(start).removeClass(pfx + 'datatable-cell-resizing');\n          pressed = false;\n        });\n      },\n\n      /**\r\n       * To prepare placeholder for table before content is loading\r\n       */\n      initHeight: function initHeight() {\n        if (options.layout.height && options.layout.scroll) {\n          var theadHeight = $(datatable.tableHead).find('.' + pfx + 'datatable-row').outerHeight();\n          var tfootHeight = $(datatable.tableFoot).find('.' + pfx + 'datatable-row').outerHeight();\n          var bodyHeight = options.layout.height;\n\n          if (theadHeight > 0) {\n            bodyHeight -= theadHeight;\n          }\n\n          if (tfootHeight > 0) {\n            bodyHeight -= tfootHeight;\n          } // scrollbar offset\n\n\n          bodyHeight -= 2;\n          $(datatable.tableBody).css('max-height', Math.floor(parseFloat(bodyHeight))); // set scrollable area fixed height\n          // $(datatable.tableBody).find('.' + pfx + 'datatable-lock-scroll').css('height', Math.floor(parseFloat(bodyHeight)));\n        }\n      },\n\n      /**\r\n       * Setup base DOM (table, thead, tbody, tfoot) and create if not\r\n       * exist.\r\n       */\n      setupBaseDOM: function setupBaseDOM() {\n        // keep original state before datatable initialize\n        datatable.initialDatatable = $(datatable).clone(); // main element\n\n        if ($(datatable).prop('tagName') === 'TABLE') {\n          // if main init element is <table>, wrap with div\n          datatable.table = $(datatable).removeClass(pfx + 'datatable').addClass(pfx + 'datatable-table');\n\n          if ($(datatable.table).parents('.' + pfx + 'datatable').length === 0) {\n            datatable.table.wrap($('<div/>').addClass(pfx + 'datatable').addClass(pfx + 'datatable-' + options.layout.theme));\n            datatable.wrap = $(datatable.table).parent();\n          }\n        } else {\n          // create table\n          datatable.wrap = $(datatable).addClass(pfx + 'datatable').addClass(pfx + 'datatable-' + options.layout.theme);\n          datatable.table = $('<table/>').addClass(pfx + 'datatable-table').appendTo(datatable);\n        }\n\n        if (typeof options.layout[\"class\"] !== 'undefined') {\n          $(datatable.wrap).addClass(options.layout[\"class\"]);\n        }\n\n        $(datatable.table).removeClass(pfx + 'datatable-destroyed').css('display', 'block'); // force disable save state\n\n        if (typeof $(datatable).attr('id') === 'undefined') {\n          Plugin.setOption('data.saveState', false);\n          $(datatable.table).attr('id', util.getUniqueID(pfx + 'datatable-'));\n        } // predefine table height\n\n\n        if (Plugin.getOption('layout.minHeight')) $(datatable.table).css('min-height', Plugin.getOption('layout.minHeight'));\n        if (Plugin.getOption('layout.height')) $(datatable.table).css('max-height', Plugin.getOption('layout.height')); // for normal table load\n\n        if (options.data.type === null) {\n          $(datatable.table).css('width', '').css('display', '');\n        } // create table head element\n\n\n        datatable.tableHead = $(datatable.table).find('thead');\n\n        if ($(datatable.tableHead).length === 0) {\n          datatable.tableHead = $('<thead/>').prependTo(datatable.table);\n        } // create table head element\n\n\n        datatable.tableBody = $(datatable.table).find('tbody');\n\n        if ($(datatable.tableBody).length === 0) {\n          datatable.tableBody = $('<tbody/>').appendTo(datatable.table);\n        }\n\n        if (typeof options.layout.footer !== 'undefined' && options.layout.footer) {\n          // create table foot element\n          datatable.tableFoot = $(datatable.table).find('tfoot');\n\n          if ($(datatable.tableFoot).length === 0) {\n            datatable.tableFoot = $('<tfoot/>').appendTo(datatable.table);\n          }\n        }\n      },\n\n      /**\r\n       * Set column data before table manipulation.\r\n       */\n      setupCellField: function setupCellField(tableParts) {\n        if (typeof tableParts === 'undefined') tableParts = $(datatable.table).children();\n        var columns = options.columns;\n        $.each(tableParts, function (part, tablePart) {\n          $(tablePart).find('.' + pfx + 'datatable-row').each(function (tri, tr) {\n            // prepare data\n            $(tr).find('.' + pfx + 'datatable-cell').each(function (tdi, td) {\n              if (typeof columns[tdi] !== 'undefined') {\n                $(td).data(columns[tdi]);\n              }\n            });\n          });\n        });\n      },\n\n      /**\r\n       * Set column template callback\r\n       * @param tablePart\r\n       */\n      setupTemplateCell: function setupTemplateCell(tablePart) {\n        if (typeof tablePart === 'undefined') tablePart = datatable.tableBody;\n        var columns = options.columns;\n        $(tablePart).find('.' + pfx + 'datatable-row').each(function (tri, tr) {\n          // row data object, if any\n          var obj = $(tr).data('obj');\n\n          if (typeof obj === 'undefined') {\n            return;\n          } // @deprecated in v5.0.6\n          // obj['getIndex'] = function() {\n          // \treturn tri;\n          // };\n          // @deprecated in v5.0.6\n          // obj['getDatatable'] = function() {\n          // \treturn datatable;\n          // };\n          // @deprecated in v5.0.6\n\n\n          var rowCallback = Plugin.getOption('rows.callback');\n\n          if (typeof rowCallback === 'function') {\n            rowCallback($(tr), obj, tri);\n          } // before template row callback\n\n\n          var beforeTemplate = Plugin.getOption('rows.beforeTemplate');\n\n          if (typeof beforeTemplate === 'function') {\n            beforeTemplate($(tr), obj, tri);\n          } // if data object is undefined, collect from table\n\n\n          if (typeof obj === 'undefined') {\n            obj = {};\n            $(tr).find('.' + pfx + 'datatable-cell').each(function (tdi, td) {\n              // get column settings by field\n              var column = $.grep(columns, function (n, i) {\n                return $(td).data('field') === n.field;\n              })[0];\n\n              if (typeof column !== 'undefined') {\n                obj[column['field']] = $(td).text();\n              }\n            });\n          }\n\n          $(tr).find('.' + pfx + 'datatable-cell').each(function (tdi, td) {\n            // get column settings by field\n            var column = $.grep(columns, function (n, i) {\n              return $(td).data('field') === n.field;\n            })[0];\n\n            if (typeof column !== 'undefined') {\n              // column template\n              if (typeof column.template !== 'undefined') {\n                var finalValue = ''; // template string\n\n                if (typeof column.template === 'string') {\n                  finalValue = Plugin.dataPlaceholder(column.template, obj);\n                } // template callback function\n\n\n                if (typeof column.template === 'function') {\n                  finalValue = column.template(obj, tri, datatable);\n                } // sanitize using DOMPurify if installed\n\n\n                if (typeof DOMPurify !== 'undefined') {\n                  finalValue = DOMPurify.sanitize(finalValue);\n                }\n\n                var span = document.createElement('span');\n                span.innerHTML = finalValue; // insert to cell, wrap with span\n\n                $(td).html(span); // set span overflow\n\n                if (typeof column.overflow !== 'undefined') {\n                  $(span).css('overflow', column.overflow);\n                  $(span).css('position', 'relative');\n                }\n              }\n            }\n          }); // after template row callback\n\n          var afterTemplate = Plugin.getOption('rows.afterTemplate');\n\n          if (typeof afterTemplate === 'function') {\n            afterTemplate($(tr), obj, tri);\n          }\n        });\n      },\n\n      /**\r\n       * Setup extra system column properties\r\n       * Note: selector checkbox, subtable toggle\r\n       */\n      setupSystemColumn: function setupSystemColumn() {\n        datatable.dataSet = datatable.dataSet || []; // no records available\n\n        if (datatable.dataSet.length === 0) return;\n        var columns = options.columns;\n        $(datatable.tableBody).find('.' + pfx + 'datatable-row').each(function (tri, tr) {\n          $(tr).find('.' + pfx + 'datatable-cell').each(function (tdi, td) {\n            // get column settings by field\n            var column = $.grep(columns, function (n, i) {\n              return $(td).data('field') === n.field;\n            })[0];\n\n            if (typeof column !== 'undefined') {\n              var value = $(td).text(); // enable column selector\n\n              if (typeof column.selector !== 'undefined' && column.selector !== false) {\n                // check if checkbox exist\n                if ($(td).find('.' + pfx + 'checkbox [type=\"checkbox\"]').length > 0) return;\n                $(td).addClass(pfx + 'datatable-cell-check'); // append checkbox\n\n                var chk = $('<label/>').addClass(pfx + 'checkbox ' + pfx + 'checkbox-single').append($('<input/>').attr('type', 'checkbox').attr('value', value).on('click', function () {\n                  if ($(this).is(':checked')) {\n                    // add checkbox active row class\n                    Plugin.setActive(this);\n                  } else {\n                    // add checkbox active row class\n                    Plugin.setInactive(this);\n                  }\n                })).append('&nbsp;<span></span>'); // checkbox selector has outline style\n\n                if (typeof column.selector[\"class\"] !== 'undefined') {\n                  $(chk).addClass(column.selector[\"class\"]);\n                }\n\n                $(td).children().html(chk);\n              } // enable column subtable toggle\n\n\n              if (typeof column.subtable !== 'undefined' && column.subtable) {\n                // check if subtable toggle exist\n                if ($(td).find('.' + pfx + 'datatable-toggle-subtable').length > 0) return; // append subtable toggle\n\n                $(td).children().html($('<a/>').addClass(pfx + 'datatable-toggle-subtable').attr('href', '#').attr('data-value', value).append($('<i/>').addClass(Plugin.getOption('layout.icons.rowDetail.collapse'))));\n              }\n            }\n          });\n        }); // init checkbox for header/footer\n\n        var initCheckbox = function initCheckbox(tr) {\n          // get column settings by field\n          var column = $.grep(columns, function (n, i) {\n            return typeof n.selector !== 'undefined' && n.selector !== false;\n          })[0];\n\n          if (typeof column !== 'undefined') {\n            // enable column selector\n            if (typeof column.selector !== 'undefined' && column.selector !== false) {\n              var td = $(tr).find('[data-field=\"' + column.field + '\"]'); // check if checkbox exist\n\n              if ($(td).find('.' + pfx + 'checkbox [type=\"checkbox\"]').length > 0) return;\n              $(td).addClass(pfx + 'datatable-cell-check'); // append checkbox\n\n              var chk = $('<label/>').addClass(pfx + 'checkbox ' + pfx + 'checkbox-single ' + pfx + 'checkbox-all').append($('<input/>').attr('type', 'checkbox').on('click', function () {\n                if ($(this).is(':checked')) {\n                  Plugin.setActiveAll(true);\n                } else {\n                  Plugin.setActiveAll(false);\n                }\n              })).append('&nbsp;<span></span>'); // checkbox selector has outline style\n\n              if (typeof column.selector[\"class\"] !== 'undefined') {\n                $(chk).addClass(column.selector[\"class\"]);\n              }\n\n              $(td).children().html(chk);\n            }\n          }\n        };\n\n        if (options.layout.header) {\n          initCheckbox($(datatable.tableHead).find('.' + pfx + 'datatable-row').first());\n        }\n\n        if (options.layout.footer) {\n          initCheckbox($(datatable.tableFoot).find('.' + pfx + 'datatable-row').first());\n        }\n      },\n      maxWidthList: {},\n\n      /**\r\n       * Adjust width to match container size\r\n       */\n      adjustCellsWidth: function adjustCellsWidth() {\n        // get table width\n        var containerWidth = $(datatable.tableBody).innerWidth() - Plugin.iconOffset; // get total number of columns\n\n        var columns = $(datatable.tableHead).find('.' + pfx + 'datatable-row:first-child').find('.' + pfx + 'datatable-cell'). // exclude expand icon\n        not('.' + pfx + 'datatable-toggle-detail').not(':hidden').length;\n\n        if (columns > 0) {\n          //  remove reserved sort icon width\n          containerWidth = containerWidth - Plugin.iconOffset * columns;\n          var minWidth = Math.floor(containerWidth / columns); // minimum width\n\n          if (minWidth <= Plugin.cellOffset) {\n            minWidth = Plugin.cellOffset;\n          }\n\n          $(datatable.table).find('.' + pfx + 'datatable-row').find('.' + pfx + 'datatable-cell'). // exclude expand icon\n          not('.' + pfx + 'datatable-toggle-detail').not(':hidden').each(function (tdi, td) {\n            var width = minWidth;\n            var dataWidth = $(td).data('width');\n\n            if (typeof dataWidth !== 'undefined') {\n              if (dataWidth === 'auto') {\n                var field = $(td).data('field');\n\n                if (Plugin.maxWidthList[field]) {\n                  width = Plugin.maxWidthList[field];\n                } else {\n                  var cells = $(datatable.table).find('.' + pfx + 'datatable-cell[data-field=\"' + field + '\"]');\n                  width = Plugin.maxWidthList[field] = Math.max.apply(null, $(cells).map(function () {\n                    return $(this).outerWidth();\n                  }).get());\n                }\n              } else {\n                width = dataWidth;\n              }\n            }\n\n            $(td).children().css('width', Math.ceil(width));\n          });\n        }\n\n        return datatable;\n      },\n\n      /**\r\n       * Adjust height to match container size\r\n       */\n      adjustCellsHeight: function adjustCellsHeight() {\n        $.each($(datatable.table).children(), function (part, tablePart) {\n          var totalRows = $(tablePart).find('.' + pfx + 'datatable-row').first().parent().find('.' + pfx + 'datatable-row').length;\n\n          for (var i = 1; i <= totalRows; i++) {\n            var rows = $(tablePart).find('.' + pfx + 'datatable-row:nth-child(' + i + ')');\n\n            if ($(rows).length > 0) {\n              var maxHeight = Math.max.apply(null, $(rows).map(function () {\n                return $(this).outerHeight();\n              }).get());\n              $(rows).css('height', Math.ceil(maxHeight));\n            }\n          }\n        });\n      },\n\n      /**\r\n       * Setup table DOM and classes\r\n       */\n      setupDOM: function setupDOM(table) {\n        // set table classes\n        $(table).find('> thead').addClass(pfx + 'datatable-head');\n        $(table).find('> tbody').addClass(pfx + 'datatable-body');\n        $(table).find('> tfoot').addClass(pfx + 'datatable-foot');\n        $(table).find('tr').addClass(pfx + 'datatable-row');\n        $(table).find('tr > th, tr > td').addClass(pfx + 'datatable-cell');\n        $(table).find('tr > th, tr > td').each(function (i, td) {\n          if ($(td).find('span').length === 0) {\n            $(td).wrapInner($('<span/>').css('width', Plugin.cellOffset));\n          }\n        });\n      },\n\n      /**\r\n       * Default scrollbar\r\n       * @returns {{tableLocked: null, init: init, onScrolling:\r\n       *     onScrolling}}\r\n       */\n      scrollbar: function scrollbar() {\n        var scroll = {\n          scrollable: null,\n          tableLocked: null,\n          initPosition: null,\n          init: function init() {\n            var screen = util.getViewPort().width; // setup scrollable datatable\n\n            if (options.layout.scroll) {\n              // add scrollable datatable class\n              $(datatable.wrap).addClass(pfx + 'datatable-scroll');\n              var scrollable = $(datatable.tableBody).find('.' + pfx + 'datatable-lock-scroll'); // check if scrollable area have rows\n\n              if ($(scrollable).find('.' + pfx + 'datatable-row').length > 0 && $(scrollable).length > 0) {\n                scroll.scrollHead = $(datatable.tableHead).find('> .' + pfx + 'datatable-lock-scroll > .' + pfx + 'datatable-row');\n                scroll.scrollFoot = $(datatable.tableFoot).find('> .' + pfx + 'datatable-lock-scroll > .' + pfx + 'datatable-row');\n                scroll.tableLocked = $(datatable.tableBody).find('.' + pfx + 'datatable-lock:not(.' + pfx + 'datatable-lock-scroll)');\n\n                if (Plugin.getOption('layout.customScrollbar') && util.detectIE() != 10 && screen > util.getBreakpoint('lg')) {\n                  scroll.initCustomScrollbar(scrollable[0]);\n                } else {\n                  scroll.initDefaultScrollbar(scrollable);\n                }\n              } else if ($(datatable.tableBody).find('.' + pfx + 'datatable-row').length > 0) {\n                scroll.scrollHead = $(datatable.tableHead).find('> .' + pfx + 'datatable-row');\n                scroll.scrollFoot = $(datatable.tableFoot).find('> .' + pfx + 'datatable-row');\n\n                if (Plugin.getOption('layout.customScrollbar') && util.detectIE() != 10 && screen > util.getBreakpoint('lg')) {\n                  scroll.initCustomScrollbar(datatable.tableBody);\n                } else {\n                  scroll.initDefaultScrollbar(datatable.tableBody);\n                }\n              }\n            }\n          },\n          initDefaultScrollbar: function initDefaultScrollbar(scrollable) {\n            // get initial scroll position\n            scroll.initPosition = $(scrollable).scrollLeft();\n            $(scrollable).css('overflow-y', 'auto').off().on('scroll', scroll.onScrolling);\n            $(scrollable).css('overflow-x', 'auto');\n          },\n          onScrolling: function onScrolling(e) {\n            var left = $(this).scrollLeft();\n            var top = $(this).scrollTop();\n\n            if (util.isRTL()) {\n              // deduct initial position for RTL\n              left = left - scroll.initPosition;\n            }\n\n            $(scroll.scrollHead).css('left', -left);\n            $(scroll.scrollFoot).css('left', -left);\n            $(scroll.tableLocked).each(function (i, table) {\n              if (Plugin.isLocked()) {\n                // scrollbar offset\n                top -= 1;\n              }\n\n              $(table).css('top', -top);\n            });\n          },\n          initCustomScrollbar: function initCustomScrollbar(scrollable) {\n            scroll.scrollable = scrollable; // create a new instance for table body with scrollbar\n\n            Plugin.initScrollbar(scrollable); // get initial scroll position\n\n            scroll.initPosition = $(scrollable).scrollLeft();\n            $(scrollable).off().on('scroll', scroll.onScrolling);\n          }\n        };\n        scroll.init();\n        return scroll;\n      },\n\n      /**\r\n       * Init custom scrollbar and reset position\r\n       * @param element\r\n       * @param options\r\n       */\n      initScrollbar: function initScrollbar(element, options) {\n        if (!element || !element.nodeName) {\n          return;\n        }\n\n        $(datatable.tableBody).css('overflow', '');\n        var ps = $(element).data('ps');\n\n        if (util.hasClass(element, 'ps') && typeof ps !== 'undefined') {\n          ps.update();\n        } else {\n          ps = new PerfectScrollbar(element, Object.assign({}, {\n            wheelSpeed: 0.5,\n            swipeEasing: true,\n            // wheelPropagation: false,\n            minScrollbarLength: 40,\n            maxScrollbarLength: 300,\n            suppressScrollX: Plugin.getOption('rows.autoHide') && !Plugin.isLocked()\n          }, options));\n          $(element).data('ps', ps);\n        } // reset perfect scrollbar on resize\n\n\n        $(window).resize(function () {\n          ps.update();\n        });\n      },\n\n      /**\r\n       * Set column title from options.columns settings\r\n       */\n      setHeadTitle: function setHeadTitle(tablePart) {\n        if (typeof tablePart === 'undefined') tablePart = datatable.tableHead;\n        tablePart = $(tablePart)[0];\n        var columns = options.columns;\n        var row = tablePart.getElementsByTagName('tr')[0];\n        var ths = tablePart.getElementsByTagName('td');\n\n        if (typeof row === 'undefined') {\n          row = document.createElement('tr');\n          tablePart.appendChild(row);\n        }\n\n        $.each(columns, function (i, column) {\n          var th = ths[i];\n\n          if (typeof th === 'undefined') {\n            th = document.createElement('th');\n            row.appendChild(th);\n          } // set column title\n\n\n          if (typeof column['title'] !== 'undefined') {\n            th.innerHTML = column.title;\n            th.setAttribute('data-field', column.field);\n            util.addClass(th, column[\"class\"]); // set disable autoHide or force enable\n\n            if (typeof column.autoHide !== 'undefined') {\n              if (column.autoHide !== true) {\n                th.setAttribute('data-autohide-disabled', column.autoHide);\n              } else {\n                th.setAttribute('data-autohide-enabled', column.autoHide);\n              }\n            }\n\n            $(th).data(column);\n          } // set header attr option\n\n\n          if (typeof column.attr !== 'undefined') {\n            $.each(column.attr, function (key, val) {\n              th.setAttribute(key, val);\n            });\n          } // apply text align to thead/tfoot\n\n\n          if (typeof column.textAlign !== 'undefined') {\n            var align = typeof datatable.textAlign[column.textAlign] !== 'undefined' ? datatable.textAlign[column.textAlign] : '';\n            util.addClass(th, align);\n          }\n        });\n        Plugin.setupDOM(tablePart);\n      },\n\n      /**\r\n       * Initiate to get remote or local data via ajax\r\n       */\n      dataRender: function dataRender(action) {\n        $(datatable.table).siblings('.' + pfx + 'datatable-pager').removeClass(pfx + 'datatable-paging-loaded');\n\n        var buildMeta = function buildMeta() {\n          datatable.dataSet = datatable.dataSet || [];\n          Plugin.localDataUpdate(); // local pagination meta\n\n          var meta = Plugin.getDataSourceParam('pagination');\n\n          if (meta.perpage === 0) {\n            meta.perpage = options.data.pageSize || 10;\n          }\n\n          meta.total = datatable.dataSet.length;\n          var start = Math.max(meta.perpage * (meta.page - 1), 0);\n          var end = Math.min(start + meta.perpage, meta.total);\n          datatable.dataSet = $(datatable.dataSet).slice(start, end);\n          return meta;\n        };\n\n        var afterGetData = function afterGetData(result) {\n          var localPagingCallback = function localPagingCallback(ctx, meta) {\n            if (!$(ctx.pager).hasClass(pfx + 'datatable-paging-loaded')) {\n              $(ctx.pager).remove();\n              ctx.init(meta);\n            }\n\n            $(ctx.pager).off().on(pfx + 'datatable-on-goto-page', function (e) {\n              $(ctx.pager).remove();\n              ctx.init(meta);\n            });\n            var start = Math.max(meta.perpage * (meta.page - 1), 0);\n            var end = Math.min(start + meta.perpage, meta.total);\n            Plugin.localDataUpdate();\n            datatable.dataSet = $(datatable.dataSet).slice(start, end); // insert data into table content\n\n            Plugin.insertData();\n          };\n\n          $(datatable.wrap).removeClass(pfx + 'datatable-error'); // pagination enabled\n\n          if (options.pagination) {\n            if (options.data.serverPaging && options.data.type !== 'local') {\n              // server pagination\n              var serverMeta = Plugin.getObject('meta', result || null);\n\n              if (serverMeta !== null) {\n                Plugin.pagingObject = Plugin.paging(serverMeta);\n              } else {\n                // no meta object from server response, fallback to local pagination\n                Plugin.pagingObject = Plugin.paging(buildMeta(), localPagingCallback);\n              }\n            } else {\n              // local pagination can be used by remote data also\n              Plugin.pagingObject = Plugin.paging(buildMeta(), localPagingCallback);\n            }\n          } else {\n            // pagination is disabled\n            Plugin.localDataUpdate();\n          } // insert data into table content\n\n\n          Plugin.insertData();\n        }; // get local datasource\n\n\n        if (options.data.type === 'local' // for remote json datasource\n        // || typeof options.data.source.read === 'undefined' && datatable.dataSet !== null\n        // for remote datasource, server sorting is disabled and data already received from remote\n        || options.data.serverSorting === false && action === 'sort' || options.data.serverFiltering === false && action === 'search') {\n          setTimeout(function () {\n            Plugin.setAutoColumns();\n            afterGetData();\n          });\n          return;\n        } // getting data from remote only\n\n\n        Plugin.getData().done(afterGetData);\n      },\n\n      /**\r\n       * Process ajax data\r\n       */\n      insertData: function insertData() {\n        datatable.dataSet = datatable.dataSet || [];\n        var params = Plugin.getDataSourceParam(); // get row attributes\n\n        var pagination = params.pagination;\n        var start = (Math.max(pagination.page, 1) - 1) * pagination.perpage;\n        var end = Math.min(pagination.page, pagination.pages) * pagination.perpage;\n        var rowProps = {};\n\n        if (typeof options.data.attr.rowProps !== 'undefined' && options.data.attr.rowProps.length) {\n          rowProps = options.data.attr.rowProps.slice(start, end);\n        }\n\n        var tableBody = document.createElement('tbody');\n        tableBody.style.visibility = 'hidden';\n        var colLength = options.columns.length;\n        $.each(datatable.dataSet, function (rowIndex, row) {\n          var tr = document.createElement('tr');\n          tr.setAttribute('data-row', rowIndex); // keep data object to row\n\n          $(tr).data('obj', row);\n\n          if (typeof rowProps[rowIndex] !== 'undefined') {\n            $.each(rowProps[rowIndex], function () {\n              tr.setAttribute(this.name, this.value);\n            });\n          }\n\n          var cellIndex = 0;\n          var tds = [];\n\n          for (var a = 0; a < colLength; a += 1) {\n            var column = options.columns[a];\n            var classes = []; // add sorted class to cells\n\n            if (Plugin.getObject('sort.field', params) === column.field) {\n              classes.push(pfx + 'datatable-cell-sorted');\n            } // apply text align\n\n\n            if (typeof column.textAlign !== 'undefined') {\n              var align = typeof datatable.textAlign[column.textAlign] !== 'undefined' ? datatable.textAlign[column.textAlign] : '';\n              classes.push(align);\n            } // var classAttr = '';\n\n\n            if (typeof column[\"class\"] !== 'undefined') {\n              classes.push(column[\"class\"]);\n            }\n\n            var td = document.createElement('td');\n            util.addClass(td, classes.join(' '));\n            td.setAttribute('data-field', column.field); // set disable autoHide or force enable\n\n            if (typeof column.autoHide !== 'undefined') {\n              if (column.autoHide !== true) {\n                td.setAttribute('data-autohide-disabled', column.autoHide);\n              } else {\n                td.setAttribute('data-autohide-enabled', column.autoHide);\n              }\n            }\n\n            td.innerHTML = Plugin.getObject(column.field, row);\n            td.setAttribute('aria-label', Plugin.getObject(column.field, row));\n            tr.appendChild(td);\n          }\n\n          tableBody.appendChild(tr);\n        }); // display no records message\n\n        if (datatable.dataSet.length === 0) {\n          var errorSpan = document.createElement('span');\n          util.addClass(errorSpan, pfx + 'datatable-error');\n          errorSpan.innerHTML = Plugin.getOption('translate.records.noRecords');\n          tableBody.appendChild(errorSpan);\n          $(datatable.wrap).addClass(pfx + 'datatable-error ' + pfx + 'datatable-loaded');\n          Plugin.spinnerCallback(false);\n        } // replace existing table body\n\n\n        $(datatable.tableBody).replaceWith(tableBody);\n        datatable.tableBody = tableBody; // layout update\n\n        Plugin.setupDOM(datatable.table);\n        Plugin.setupCellField([datatable.tableBody]);\n        Plugin.setupTemplateCell(datatable.tableBody);\n        Plugin.layoutUpdate();\n      },\n      updateTableComponents: function updateTableComponents() {\n        datatable.tableHead = $(datatable.table).children('thead').get(0);\n        datatable.tableBody = $(datatable.table).children('tbody').get(0);\n        datatable.tableFoot = $(datatable.table).children('tfoot').get(0);\n      },\n\n      /**\r\n       * Call ajax for raw JSON data\r\n       */\n      getData: function getData() {\n        // Plugin.spinnerCallback(true);\n        var ajaxParams = {\n          dataType: 'json',\n          method: 'POST',\n          data: {},\n          timeout: Plugin.getOption('data.source.read.timeout') || 30000\n        };\n\n        if (options.data.type === 'local') {\n          ajaxParams.url = options.data.source;\n        }\n\n        if (options.data.type === 'remote') {\n          var data = Plugin.getDataSourceParam(); // remove if server params is not enabled\n\n          if (!Plugin.getOption('data.serverPaging')) {\n            delete data['pagination'];\n          }\n\n          if (!Plugin.getOption('data.serverSorting')) {\n            delete data['sort'];\n          }\n\n          ajaxParams.data = $.extend({}, ajaxParams.data, Plugin.getOption('data.source.read.params'), data);\n          ajaxParams = $.extend({}, ajaxParams, Plugin.getOption('data.source.read'));\n          if (typeof ajaxParams.url !== 'string') ajaxParams.url = Plugin.getOption('data.source.read');\n          if (typeof ajaxParams.url !== 'string') ajaxParams.url = Plugin.getOption('data.source'); // ajaxParams.data = $.extend(ajaxParams.data, data.pagination);\n        }\n\n        return $.ajax(ajaxParams).done(function (response, textStatus, jqXHR) {\n          datatable.lastResponse = response; // extendible data map callback for custom datasource\n\n          datatable.dataSet = datatable.originalDataSet = Plugin.dataMapCallback(response);\n          Plugin.setAutoColumns();\n          $(datatable).trigger(pfx + 'datatable-on-ajax-done', [datatable.dataSet]);\n        }).fail(function (jqXHR, textStatus, errorThrown) {\n          $(datatable).trigger(pfx + 'datatable-on-ajax-fail', [jqXHR]);\n          $(datatable.tableBody).html($('<span/>').addClass(pfx + 'datatable-error').html(Plugin.getOption('translate.records.noRecords')));\n          $(datatable.wrap).addClass(pfx + 'datatable-error ' + pfx + 'datatable-loaded');\n          Plugin.spinnerCallback(false);\n        }).always(function () {});\n      },\n\n      /**\r\n       * Pagination object\r\n       * @param meta if null, local pagination, otherwise remote\r\n       *     pagination\r\n       * @param callback for update data when navigating page\r\n       */\n      paging: function paging(meta, callback) {\n        var pg = {\n          meta: null,\n          pager: null,\n          paginateEvent: null,\n          pagerLayout: {\n            pagination: null,\n            info: null\n          },\n          callback: null,\n          init: function init(meta) {\n            pg.meta = meta; // parse pagination meta to integer\n\n            pg.meta.page = parseInt(pg.meta.page);\n            pg.meta.pages = parseInt(pg.meta.pages);\n            pg.meta.perpage = parseInt(pg.meta.perpage);\n            pg.meta.total = parseInt(pg.meta.total); // always recount total pages\n\n            pg.meta.pages = Math.max(Math.ceil(pg.meta.total / pg.meta.perpage), 1); // current page must be not over than total pages\n\n            if (pg.meta.page > pg.meta.pages) pg.meta.page = pg.meta.pages; // set unique event name between tables\n\n            pg.paginateEvent = Plugin.getTablePrefix('paging');\n            pg.pager = $(datatable.table).siblings('.' + pfx + 'datatable-pager');\n            if ($(pg.pager).hasClass(pfx + 'datatable-paging-loaded')) return; // if class .'+pfx+'datatable-paging-loaded not exist, recreate pagination\n\n            $(pg.pager).remove(); // if no pages available\n\n            if (pg.meta.pages === 0) return; // update datasource params\n\n            Plugin.setDataSourceParam('pagination', {\n              page: pg.meta.page,\n              pages: pg.meta.pages,\n              perpage: pg.meta.perpage,\n              total: pg.meta.total\n            }); // default callback function, contains remote pagination handler\n\n            pg.callback = pg.serverCallback; // custom callback function\n\n            if (typeof callback === 'function') pg.callback = callback;\n            pg.addPaginateEvent();\n            pg.populate();\n            pg.meta.page = Math.max(pg.meta.page || 1, pg.meta.page);\n            $(datatable).trigger(pg.paginateEvent, pg.meta);\n            pg.pagingBreakpoint.call();\n            $(window).resize(pg.pagingBreakpoint);\n          },\n          serverCallback: function serverCallback(ctx, meta) {\n            Plugin.dataRender();\n          },\n          populate: function populate() {\n            datatable.dataSet = datatable.dataSet || []; // no records available\n\n            if (datatable.dataSet.length === 0) return;\n            var icons = Plugin.getOption('layout.icons.pagination');\n            var title = Plugin.getOption('translate.toolbar.pagination.items.default'); // pager root element\n\n            pg.pager = $('<div/>').addClass(pfx + 'datatable-pager ' + pfx + 'datatable-paging-loaded'); // numbering links\n\n            var pagerNumber = $('<ul/>').addClass(pfx + 'datatable-pager-nav my-2 mb-sm-0');\n            pg.pagerLayout['pagination'] = pagerNumber; // pager first/previous button\n\n            $('<li/>').append($('<a/>').attr('title', title.first).addClass(pfx + 'datatable-pager-link ' + pfx + 'datatable-pager-link-first').append($('<i/>').addClass(icons.first)).on('click', pg.gotoMorePage).attr('data-page', 1)).appendTo(pagerNumber);\n            $('<li/>').append($('<a/>').attr('title', title.prev).addClass(pfx + 'datatable-pager-link ' + pfx + 'datatable-pager-link-prev').append($('<i/>').addClass(icons.prev)).on('click', pg.gotoMorePage)).appendTo(pagerNumber);\n            $('<li/>').append($('<input/>').attr('type', 'text').addClass(pfx + 'datatable-pager-input form-control').attr('title', title.input).on('keyup', function () {\n              // on keyup update [data-page]\n              $(this).attr('data-page', Math.abs($(this).val()));\n            }).on('keypress', function (e) {\n              // on keypressed enter button\n              if (e.which === 13) pg.gotoMorePage(e);\n            })).appendTo(pagerNumber);\n            var pagesNumber = Plugin.getOption('toolbar.items.pagination.pages.desktop.pagesNumber');\n            var end = Math.ceil(pg.meta.page / pagesNumber) * pagesNumber;\n            var start = end - pagesNumber;\n\n            if (end > pg.meta.pages) {\n              end = pg.meta.pages;\n            } // keep pagination 1 if there is no records\n\n\n            if (start < 0) {\n              start = 0;\n            }\n\n            for (var x = start; x < (end || 1); x++) {\n              var pageNumber = x + 1;\n              $('<li/>').append($('<a/>').addClass(pfx + 'datatable-pager-link ' + pfx + 'datatable-pager-link-number').text(pageNumber).attr('data-page', pageNumber).attr('title', pageNumber).on('click', pg.gotoPage)).appendTo(pagerNumber);\n            } // pager next/last button\n\n\n            $('<li/>').append($('<a/>').attr('title', title.next).addClass(pfx + 'datatable-pager-link ' + pfx + 'datatable-pager-link-next').append($('<i/>').addClass(icons.next)).on('click', pg.gotoMorePage)).appendTo(pagerNumber);\n            $('<li/>').append($('<a/>').attr('title', title.last).addClass(pfx + 'datatable-pager-link ' + pfx + 'datatable-pager-link-last').append($('<i/>').addClass(icons.last)).on('click', pg.gotoMorePage).attr('data-page', pg.meta.pages)).appendTo(pagerNumber); // page info\n\n            if (Plugin.getOption('toolbar.items.info')) {\n              pg.pagerLayout['info'] = $('<div/>').addClass(pfx + 'datatable-pager-info my-2 mb-sm-0').append($('<span/>').addClass(pfx + 'datatable-pager-detail'));\n            }\n\n            $.each(Plugin.getOption('toolbar.layout'), function (i, layout) {\n              $(pg.pagerLayout[layout]).appendTo(pg.pager);\n            }); // page size select\n\n            var pageSizeSelect = $('<select/>').addClass('selectpicker ' + pfx + 'datatable-pager-size').attr('title', Plugin.getOption('translate.toolbar.pagination.items.default.select')).attr('data-width', '60px').attr('data-container', 'body').val(pg.meta.perpage).on('change', pg.updatePerpage).prependTo(pg.pagerLayout['info']);\n            var pageSizes = Plugin.getOption('toolbar.items.pagination.pageSizeSelect'); // default value here, to fix override option by user\n\n            if (pageSizes.length == 0) pageSizes = [5, 10, 20, 30, 50, 100];\n            $.each(pageSizes, function (i, size) {\n              var display = size;\n              if (size === -1) display = Plugin.getOption('translate.toolbar.pagination.items.default.all');\n              $('<option/>').attr('value', size).html(display).appendTo(pageSizeSelect);\n            }); // init selectpicker to dropdown\n\n            $(datatable).ready(function () {\n              $('.selectpicker').selectpicker().on('hide.bs.select', function () {\n                // fix dropup arrow icon on hide\n                $(this).closest('.bootstrap-select').removeClass('dropup');\n              }).siblings('.dropdown-toggle').attr('title', Plugin.getOption('translate.toolbar.pagination.items.default.select'));\n            });\n            pg.paste();\n          },\n          paste: function paste() {\n            // insert pagination based on placement position, top|bottom\n            $.each($.unique(Plugin.getOption('toolbar.placement')), function (i, position) {\n              if (position === 'bottom') {\n                $(pg.pager).clone(true).insertAfter(datatable.table);\n              }\n\n              if (position === 'top') {\n                // pager top need some extra space\n                $(pg.pager).clone(true).addClass(pfx + 'datatable-pager-top').insertBefore(datatable.table);\n              }\n            });\n          },\n          gotoMorePage: function gotoMorePage(e) {\n            e.preventDefault(); // $(this) is a link of .'+pfx+'datatable-pager-link\n\n            if ($(this).attr('disabled') === 'disabled') return false;\n            var page = $(this).attr('data-page'); // event from text input\n\n            if (typeof page === 'undefined') {\n              page = $(e.target).attr('data-page');\n            }\n\n            pg.openPage(parseInt(page));\n            return false;\n          },\n          gotoPage: function gotoPage(e) {\n            e.preventDefault(); // prevent from click same page number\n\n            if ($(this).hasClass(pfx + 'datatable-pager-link-active')) return;\n            pg.openPage(parseInt($(this).data('page')));\n          },\n          openPage: function openPage(page) {\n            // currentPage is 1-based index\n            pg.meta.page = parseInt(page);\n            $(datatable).trigger(pg.paginateEvent, pg.meta);\n            pg.callback(pg, pg.meta); // update page callback function\n\n            $(pg.pager).trigger(pfx + 'datatable-on-goto-page', pg.meta);\n          },\n          updatePerpage: function updatePerpage(e) {\n            e.preventDefault(); // if (Plugin.getOption('layout.height') === null) {\n            // fix white space, when perpage is set from many records to less records\n            // $('html, body').animate({scrollTop: $(datatable).position().top});\n            // }\n            // hide dropdown after select\n\n            $(this).selectpicker('toggle');\n            pg.pager = $(datatable.table).siblings('.' + pfx + 'datatable-pager').removeClass(pfx + 'datatable-paging-loaded'); // on change select page size\n\n            if (e.originalEvent) {\n              pg.meta.perpage = parseInt($(this).val());\n            }\n\n            $(pg.pager).find('select.' + pfx + 'datatable-pager-size').val(pg.meta.perpage).attr('data-selected', pg.meta.perpage); // update datasource params\n\n            Plugin.setDataSourceParam('pagination', {\n              page: pg.meta.page,\n              pages: pg.meta.pages,\n              perpage: pg.meta.perpage,\n              total: pg.meta.total\n            }); // update page callback function\n\n            $(pg.pager).trigger(pfx + 'datatable-on-update-perpage', pg.meta);\n            $(datatable).trigger(pg.paginateEvent, pg.meta);\n            pg.callback(pg, pg.meta); // update pagination info\n\n            pg.updateInfo.call();\n          },\n          addPaginateEvent: function addPaginateEvent(e) {\n            // pagination event\n            $(datatable).off(pg.paginateEvent).on(pg.paginateEvent, function (e, meta) {\n              Plugin.spinnerCallback(true);\n              pg.pager = $(datatable.table).siblings('.' + pfx + 'datatable-pager');\n              var pagerNumber = $(pg.pager).find('.' + pfx + 'datatable-pager-nav'); // set sync active page class\n\n              $(pagerNumber).find('.' + pfx + 'datatable-pager-link-active').removeClass(pfx + 'datatable-pager-link-active');\n              $(pagerNumber).find('.' + pfx + 'datatable-pager-link-number[data-page=\"' + meta.page + '\"]').addClass(pfx + 'datatable-pager-link-active'); // set next and previous link page number\n\n              $(pagerNumber).find('.' + pfx + 'datatable-pager-link-prev').attr('data-page', Math.max(meta.page - 1, 1));\n              $(pagerNumber).find('.' + pfx + 'datatable-pager-link-next').attr('data-page', Math.min(meta.page + 1, meta.pages)); // current page input value sync\n\n              $(pg.pager).each(function () {\n                $(this).find('.' + pfx + 'datatable-pager-input[type=\"text\"]').prop('value', meta.page);\n              }); // if only 1 page, should hide page?\n              // $(pg.pager).find('.' + pfx + 'datatable-pager-nav').show();\n              // if (meta.pages <= 1) {\n              // \t// hide pager if has 1 page\n              // \t$(pg.pager).find('.' + pfx + 'datatable-pager-nav').hide();\n              // }\n              // update datasource params\n\n              Plugin.setDataSourceParam('pagination', {\n                page: pg.meta.page,\n                pages: pg.meta.pages,\n                perpage: pg.meta.perpage,\n                total: pg.meta.total\n              });\n              $(pg.pager).find('select.' + pfx + 'datatable-pager-size').val(meta.perpage).attr('data-selected', meta.perpage); // clear active rows\n\n              $(datatable.table).find('.' + pfx + 'checkbox > [type=\"checkbox\"]').prop('checked', false);\n              $(datatable.table).find('.' + pfx + 'datatable-row-active').removeClass(pfx + 'datatable-row-active');\n              pg.updateInfo.call();\n              pg.pagingBreakpoint.call(); // Plugin.resetScroll();\n            });\n          },\n          updateInfo: function updateInfo() {\n            var start = Math.max(pg.meta.perpage * (pg.meta.page - 1) + 1, 1);\n            var end = Math.min(start + pg.meta.perpage - 1, pg.meta.total); // page info update\n\n            $(pg.pager).find('.' + pfx + 'datatable-pager-info').find('.' + pfx + 'datatable-pager-detail').html(Plugin.dataPlaceholder(Plugin.getOption('translate.toolbar.pagination.items.info'), {\n              // set start page 0 if the is no records. eg. Showing 0 - 0 of 0\n              start: pg.meta.total === 0 ? 0 : start,\n              end: pg.meta.perpage === -1 ? pg.meta.total : end,\n              pageSize: pg.meta.perpage === -1 || pg.meta.perpage >= pg.meta.total ? pg.meta.total : pg.meta.perpage,\n              total: pg.meta.total\n            }));\n          },\n\n          /**\r\n           * Update pagination layout breakpoint\r\n           */\n          pagingBreakpoint: function pagingBreakpoint() {\n            // keep page links reference\n            var pagerNumber = $(datatable.table).siblings('.' + pfx + 'datatable-pager').find('.' + pfx + 'datatable-pager-nav');\n            if ($(pagerNumber).length === 0) return;\n            var currentPage = Plugin.getCurrentPage();\n            var pagerInput = $(pagerNumber).find('.' + pfx + 'datatable-pager-input').closest('li'); // reset\n\n            $(pagerNumber).find('li').show(); // pagination update\n\n            $.each(Plugin.getOption('toolbar.items.pagination.pages'), function (mode, option) {\n              if (util.isInResponsiveRange(mode)) {\n                switch (mode) {\n                  case 'desktop':\n                  case 'tablet':\n                    var end = Math.ceil(currentPage / option.pagesNumber) * option.pagesNumber;\n                    var start = end - option.pagesNumber;\n                    $(pagerInput).hide();\n                    pg.meta = Plugin.getDataSourceParam('pagination');\n                    pg.paginationUpdate();\n                    break;\n\n                  case 'mobile':\n                    $(pagerInput).show();\n                    $(pagerNumber).find('.' + pfx + 'datatable-pager-link-more-prev').closest('li').hide();\n                    $(pagerNumber).find('.' + pfx + 'datatable-pager-link-more-next').closest('li').hide();\n                    $(pagerNumber).find('.' + pfx + 'datatable-pager-link-number').closest('li').hide();\n                    break;\n                }\n\n                return false;\n              }\n            });\n          },\n\n          /**\r\n           * Update pagination number and button display\r\n           */\n          paginationUpdate: function paginationUpdate() {\n            var pager = $(datatable.table).siblings('.' + pfx + 'datatable-pager').find('.' + pfx + 'datatable-pager-nav'),\n                pagerMorePrev = $(pager).find('.' + pfx + 'datatable-pager-link-more-prev'),\n                pagerMoreNext = $(pager).find('.' + pfx + 'datatable-pager-link-more-next'),\n                pagerFirst = $(pager).find('.' + pfx + 'datatable-pager-link-first'),\n                pagerPrev = $(pager).find('.' + pfx + 'datatable-pager-link-prev'),\n                pagerNext = $(pager).find('.' + pfx + 'datatable-pager-link-next'),\n                pagerLast = $(pager).find('.' + pfx + 'datatable-pager-link-last'); // get visible page\n\n            var pagerNumber = $(pager).find('.' + pfx + 'datatable-pager-link-number'); // get page before of first visible\n\n            var morePrevPage = Math.max($(pagerNumber).first().data('page') - 1, 1);\n            $(pagerMorePrev).each(function (i, prev) {\n              $(prev).attr('data-page', morePrevPage);\n            }); // show/hide <li>\n\n            if (morePrevPage === 1) {\n              $(pagerMorePrev).parent().hide();\n            } else {\n              $(pagerMorePrev).parent().show();\n            } // get page after of last visible\n\n\n            var moreNextPage = Math.min($(pagerNumber).last().data('page') + 1, pg.meta.pages);\n            $(pagerMoreNext).each(function (i, prev) {\n              $(pagerMoreNext).attr('data-page', moreNextPage).show();\n            }); // show/hide <li>\n\n            if (moreNextPage === pg.meta.pages // missing dot fix when last hidden page is one left\n            && moreNextPage === $(pagerNumber).last().data('page')) {\n              $(pagerMoreNext).parent().hide();\n            } else {\n              $(pagerMoreNext).parent().show();\n            } // begin/end of pages\n\n\n            if (pg.meta.page === 1) {\n              $(pagerFirst).attr('disabled', true).addClass(pfx + 'datatable-pager-link-disabled');\n              $(pagerPrev).attr('disabled', true).addClass(pfx + 'datatable-pager-link-disabled');\n            } else {\n              $(pagerFirst).removeAttr('disabled').removeClass(pfx + 'datatable-pager-link-disabled');\n              $(pagerPrev).removeAttr('disabled').removeClass(pfx + 'datatable-pager-link-disabled');\n            }\n\n            if (pg.meta.page === pg.meta.pages) {\n              $(pagerNext).attr('disabled', true).addClass(pfx + 'datatable-pager-link-disabled');\n              $(pagerLast).attr('disabled', true).addClass(pfx + 'datatable-pager-link-disabled');\n            } else {\n              $(pagerNext).removeAttr('disabled').removeClass(pfx + 'datatable-pager-link-disabled');\n              $(pagerLast).removeAttr('disabled').removeClass(pfx + 'datatable-pager-link-disabled');\n            } // display more buttons\n\n\n            var nav = Plugin.getOption('toolbar.items.pagination.navigation');\n            if (!nav.first) $(pagerFirst).remove();\n            if (!nav.prev) $(pagerPrev).remove();\n            if (!nav.next) $(pagerNext).remove();\n            if (!nav.last) $(pagerLast).remove();\n\n            if (!nav.more) {\n              $(pagerMorePrev).remove();\n              $(pagerMoreNext).remove();\n            }\n          }\n        };\n        pg.init(meta);\n        return pg;\n      },\n\n      /**\r\n       * Hide/show table cell defined by\r\n       * options[columns][i][responsive][visible/hidden]\r\n       */\n      columnHide: function columnHide() {\n        var screen = util.getViewPort().width; // foreach columns setting\n\n        $.each(options.columns, function (i, column) {\n          if (typeof column.responsive !== 'undefined' || typeof column.visible !== 'undefined') {\n            var field = column.field;\n            var tds = $.grep($(datatable.table).find('.' + pfx + 'datatable-cell'), function (n, i) {\n              return field === $(n).data('field');\n            });\n            setTimeout(function () {\n              // hide by force\n              if (Plugin.getObject('visible', column) === false) {\n                $(tds).hide();\n              } else {\n                // show/hide by responsive breakpoint\n                if (util.getBreakpoint(Plugin.getObject('responsive.hidden', column)) >= screen) {\n                  $(tds).hide();\n                } else {\n                  $(tds).show();\n                }\n\n                if (util.getBreakpoint(Plugin.getObject('responsive.visible', column)) <= screen) {\n                  $(tds).show();\n                } else {\n                  $(tds).hide();\n                }\n              }\n            });\n          }\n        });\n      },\n\n      /**\r\n       * Setup sub datatable\r\n       */\n      setupSubDatatable: function setupSubDatatable() {\n        var subTableCallback = Plugin.getOption('detail.content');\n        if (typeof subTableCallback !== 'function') return; // subtable already exist\n\n        if ($(datatable.table).find('.' + pfx + 'datatable-subtable').length > 0) return;\n        $(datatable.wrap).addClass(pfx + 'datatable-subtable');\n        options.columns[0]['subtable'] = true; // toggle on open sub table\n\n        var toggleSubTable = function toggleSubTable(e) {\n          e.preventDefault(); // get parent row of this subtable\n\n          var parentRow = $(this).closest('.' + pfx + 'datatable-row'); // get subtable row for sub table\n\n          var subTableRow = $(parentRow).next('.' + pfx + 'datatable-row-subtable');\n\n          if ($(subTableRow).length === 0) {\n            // prepare DOM for sub table, each <tr> as parent and add <tr> as child table\n            subTableRow = $('<tr/>').addClass(pfx + 'datatable-row-subtable ' + pfx + 'datatable-row-loading').hide().append($('<td/>').addClass(pfx + 'datatable-subtable').attr('colspan', Plugin.getTotalColumns()));\n            $(parentRow).after(subTableRow); // add class to even row\n\n            if ($(parentRow).hasClass(pfx + 'datatable-row-even')) {\n              $(subTableRow).addClass(pfx + 'datatable-row-subtable-even');\n            }\n          }\n\n          $(subTableRow).toggle();\n          var subTable = $(subTableRow).find('.' + pfx + 'datatable-subtable'); // get id from first column of parent row\n\n          var primaryKey = $(this).closest('[data-field]:first-child').find('.' + pfx + 'datatable-toggle-subtable').data('value');\n          var icon = $(this).find('i').removeAttr('class'); // prevent duplicate datatable init\n\n          if ($(parentRow).hasClass(pfx + 'datatable-row-subtable-expanded')) {\n            $(icon).addClass(Plugin.getOption('layout.icons.rowDetail.collapse')); // remove expand class from parent row\n\n            $(parentRow).removeClass(pfx + 'datatable-row-subtable-expanded'); // trigger event on collapse\n\n            $(datatable).trigger(pfx + 'datatable-on-collapse-subtable', [parentRow]);\n          } else {\n            // expand and run callback function\n            $(icon).addClass(Plugin.getOption('layout.icons.rowDetail.expand')); // add expand class to parent row\n\n            $(parentRow).addClass(pfx + 'datatable-row-subtable-expanded'); // trigger event on expand\n\n            $(datatable).trigger(pfx + 'datatable-on-expand-subtable', [parentRow]);\n          } // prevent duplicate datatable init\n\n\n          if ($(subTable).find('.' + pfx + 'datatable').length === 0) {\n            // get data by primary id\n            $.map(datatable.dataSet, function (n, i) {\n              // primary id must be at the first column, otherwise e.data will be undefined\n              if (primaryKey === n[options.columns[0].field]) {\n                e.data = n;\n                return true;\n              }\n\n              return false;\n            }); // deprecated in v5.0.6\n\n            e.detailCell = subTable;\n            e.parentRow = parentRow;\n            e.subTable = subTable; // run callback with event\n\n            subTableCallback(e);\n            $(subTable).children('.' + pfx + 'datatable').on(pfx + 'datatable-on-init', function (e) {\n              $(subTableRow).removeClass(pfx + 'datatable-row-loading');\n            });\n\n            if (Plugin.getOption('data.type') === 'local') {\n              $(subTableRow).removeClass(pfx + 'datatable-row-loading');\n            }\n          }\n        };\n\n        var columns = options.columns;\n        $(datatable.tableBody).find('.' + pfx + 'datatable-row').each(function (tri, tr) {\n          $(tr).find('.' + pfx + 'datatable-cell').each(function (tdi, td) {\n            // get column settings by field\n            var column = $.grep(columns, function (n, i) {\n              return $(td).data('field') === n.field;\n            })[0];\n\n            if (typeof column !== 'undefined') {\n              var value = $(td).text(); // enable column subtable toggle\n\n              if (typeof column.subtable !== 'undefined' && column.subtable) {\n                // check if subtable toggle exist\n                if ($(td).find('.' + pfx + 'datatable-toggle-subtable').length > 0) return; // append subtable toggle\n\n                $(td).html($('<a/>').addClass(pfx + 'datatable-toggle-subtable').attr('href', '#').attr('data-value', value).attr('title', Plugin.getOption('detail.title')).on('click', toggleSubTable).append($('<i/>').css('width', $(td).data('width')).addClass(Plugin.getOption('layout.icons.rowDetail.collapse'))));\n              }\n            }\n          });\n        }); // $(datatable.tableHead).find('.'+pfx+'-datatable-row').first()\n      },\n\n      /**\r\n       * Datasource mapping callback\r\n       */\n      dataMapCallback: function dataMapCallback(raw) {\n        // static dataset array\n        var dataSet = raw; // dataset mapping callback\n\n        if (typeof Plugin.getOption('data.source.read.map') === 'function') {\n          return Plugin.getOption('data.source.read.map')(raw);\n        } else {\n          // default data mapping fallback\n          if (typeof raw !== 'undefined' && typeof raw.data !== 'undefined') {\n            dataSet = raw.data;\n          }\n        }\n\n        return dataSet;\n      },\n      isSpinning: false,\n\n      /**\r\n       * BlockUI spinner callback\r\n       * @param block\r\n       * @param target\r\n       */\n      spinnerCallback: function spinnerCallback(block, target) {\n        if (typeof target === 'undefined') target = datatable; // get spinner options\n\n        var spinnerOptions = Plugin.getOption('layout.spinner'); // spinner is disabled\n\n        if (typeof spinnerOptions === 'undefined' || !spinnerOptions) {\n          return;\n        }\n\n        if (block) {\n          if (!Plugin.isSpinning) {\n            if (typeof spinnerOptions.message !== 'undefined' && spinnerOptions.message === true) {\n              // use default spinner message from translation\n              spinnerOptions.message = Plugin.getOption('translate.records.processing');\n            }\n\n            Plugin.isSpinning = true;\n\n            if (typeof app !== 'undefined') {\n              app.block(target, spinnerOptions);\n            }\n          }\n        } else {\n          Plugin.isSpinning = false;\n\n          if (typeof app !== 'undefined') {\n            app.unblock(target);\n          }\n        }\n      },\n\n      /**\r\n       * Default sort callback function\r\n       * @param data\r\n       * @param sort\r\n       * @param column\r\n       * @returns {*|Array.<T>|{sort, field}|{asc, desc}}\r\n       */\n      sortCallback: function sortCallback(data, sort, column) {\n        var type = column['type'] || 'string';\n        var format = column['format'] || '';\n        var field = column['field'];\n        return $(data).sort(function (a, b) {\n          var aField = a[field];\n          var bField = b[field];\n\n          switch (type) {\n            case 'date':\n              if (typeof moment === 'undefined') {\n                throw new Error('Moment.js is required.');\n              }\n\n              var diff = moment(aField, format).diff(moment(bField, format));\n\n              if (sort === 'asc') {\n                return diff > 0 ? 1 : diff < 0 ? -1 : 0;\n              } else {\n                return diff < 0 ? 1 : diff > 0 ? -1 : 0;\n              }\n\n              break;\n\n            case 'number':\n              if (isNaN(parseFloat(aField)) && aField != null) {\n                aField = Number(aField.replace(/[^0-9\\.-]+/g, ''));\n              }\n\n              if (isNaN(parseFloat(bField)) && bField != null) {\n                bField = Number(bField.replace(/[^0-9\\.-]+/g, ''));\n              }\n\n              aField = parseFloat(aField);\n              bField = parseFloat(bField);\n\n              if (sort === 'asc') {\n                return aField > bField ? 1 : aField < bField ? -1 : 0;\n              } else {\n                return aField < bField ? 1 : aField > bField ? -1 : 0;\n              }\n\n              break;\n\n            case 'html':\n              return $(data).sort(function (a, b) {\n                // get the text only from html\n                aField = $(a[field]).text();\n                bField = $(b[field]).text(); // sort\n\n                if (sort === 'asc') {\n                  return aField > bField ? 1 : aField < bField ? -1 : 0;\n                } else {\n                  return aField < bField ? 1 : aField > bField ? -1 : 0;\n                }\n              });\n              break;\n\n            case 'string':\n            default:\n              if (sort === 'asc') {\n                return aField > bField ? 1 : aField < bField ? -1 : 0;\n              } else {\n                return aField < bField ? 1 : aField > bField ? -1 : 0;\n              }\n\n              break;\n          }\n        });\n      },\n\n      /**\r\n       * Custom debug log\r\n       * @param text\r\n       * @param obj\r\n       */\n      log: function log(text, obj) {\n        if (typeof obj === 'undefined') obj = '';\n\n        if (datatable.debug) {\n          console.log(text, obj);\n        }\n      },\n\n      /**\r\n       * Auto hide columnds overflow in row\r\n       */\n      autoHide: function autoHide() {\n        var hiddenExist = false; // force hide enabled\n\n        var hidDefault = $(datatable.table).find('[data-autohide-enabled]');\n\n        if (hidDefault.length) {\n          hiddenExist = true;\n          hidDefault.hide();\n        }\n\n        var toggleHiddenColumns = function toggleHiddenColumns(e) {\n          e.preventDefault();\n          var row = $(this).closest('.' + pfx + 'datatable-row');\n          var detailRow = $(row).next();\n\n          if (!$(detailRow).hasClass(pfx + 'datatable-row-detail')) {\n            $(this).find('i').removeClass(Plugin.getOption('layout.icons.rowDetail.collapse')).addClass(Plugin.getOption('layout.icons.rowDetail.expand'));\n            var hiddenCells = $(row).find('.' + pfx + 'datatable-cell:hidden');\n            var clonedCells = hiddenCells.clone().show();\n            detailRow = $('<tr/>').addClass(pfx + 'datatable-row-detail').insertAfter(row);\n            var detailRowTd = $('<td/>').addClass(pfx + 'datatable-detail').attr('colspan', Plugin.getTotalColumns()).appendTo(detailRow);\n            var detailSubTable = $('<table/>');\n            $(clonedCells).each(function () {\n              var field = $(this).data('field');\n              var column = $.grep(options.columns, function (n, i) {\n                return field === n.field;\n              })[0];\n\n              if (typeof column === 'undefined' || column.visible !== false) {\n                $(detailSubTable).append($('<tr class=\"' + pfx + 'datatable-row\"></tr>').append($('<td class=\"' + pfx + 'datatable-cell\"></td>').append($('<span/>').append(column.title))).append(this));\n              }\n            });\n            $(detailRowTd).append(detailSubTable);\n          } else {\n            $(this).find('i').removeClass(Plugin.getOption('layout.icons.rowDetail.expand')).addClass(Plugin.getOption('layout.icons.rowDetail.collapse'));\n            $(detailRow).remove();\n          }\n        };\n\n        setTimeout(function () {\n          $(datatable.table).find('.' + pfx + 'datatable-cell').show();\n          $(datatable.tableBody).each(function () {\n            var recursive = 0;\n            var offsetWidth = $(this)[0].offsetWidth;\n            var scrollWidth = $(this)[0].scrollWidth;\n\n            while (offsetWidth < scrollWidth && scrollWidth - offsetWidth > Plugin.cellOffset && recursive < options.columns.length) {\n              $(datatable.table).find('.' + pfx + 'datatable-row').each(function (i) {\n                var cell = $(this).find('.' + pfx + 'datatable-cell:not(:hidden):not([data-autohide-disabled])').last();\n\n                if (cell.length) {\n                  $(cell).hide();\n                  hiddenExist = true;\n                }\n              });\n              recursive++;\n              offsetWidth = $(this)[0].offsetWidth;\n              scrollWidth = $(this)[0].scrollWidth;\n            }\n          });\n\n          if (hiddenExist) {\n            // toggle show hidden columns\n            $(datatable.tableBody).find('.' + pfx + 'datatable-row').each(function () {\n              // if no toggle yet\n              if ($(this).find('.' + pfx + 'datatable-toggle-detail').length === 0) {\n                // add toggle\n                $(this).prepend($('<td/>').addClass(pfx + 'datatable-cell ' + pfx + 'datatable-toggle-detail').append($('<a/>').addClass(pfx + 'datatable-toggle-detail').attr('href', '').on('click', toggleHiddenColumns).append('<i class=\"' + Plugin.getOption('layout.icons.rowDetail.collapse') + '\"></i>')));\n              } // check if subtable toggle exist\n\n\n              if ($(datatable.tableHead).find('.' + pfx + 'datatable-toggle-detail').length === 0) {\n                // add empty column to the header and footer\n                $(datatable.tableHead).find('.' + pfx + 'datatable-row').first().prepend('<th class=\"' + pfx + 'datatable-cell ' + pfx + 'datatable-toggle-detail\"><span></span></th>');\n                $(datatable.tableFoot).find('.' + pfx + 'datatable-row').first().prepend('<th class=\"' + pfx + 'datatable-cell ' + pfx + 'datatable-toggle-detail\"><span></span></th>');\n              } else {\n                $(datatable.tableHead).find('.' + pfx + 'datatable-toggle-detail').find('span');\n              }\n            });\n          }\n        });\n        Plugin.adjustCellsWidth.call();\n      },\n\n      /**\r\n       * To enable auto columns features for remote data source\r\n       */\n      setAutoColumns: function setAutoColumns() {\n        if (Plugin.getOption('data.autoColumns')) {\n          $.each(datatable.dataSet[0], function (k, v) {\n            var found = $.grep(options.columns, function (n, i) {\n              return k === n.field;\n            });\n\n            if (found.length === 0) {\n              options.columns.push({\n                field: k,\n                title: k\n              });\n            }\n          });\n          $(datatable.tableHead).find('.' + pfx + 'datatable-row').remove();\n          Plugin.setHeadTitle();\n\n          if (Plugin.getOption('layout.footer')) {\n            $(datatable.tableFoot).find('.' + pfx + 'datatable-row').remove();\n            Plugin.setHeadTitle(datatable.tableFoot);\n          }\n        }\n      },\n\n      /********************\r\n       ** HELPERS\r\n       ********************/\n\n      /**\r\n       * Check if table is a locked colums table\r\n       */\n      isLocked: function isLocked() {\n        var isLocked = Plugin.lockEnabledColumns();\n        return isLocked.left.length > 0 || isLocked.right.length > 0;\n      },\n      isSubtable: function isSubtable() {\n        return util.hasClass(datatable.wrap[0], pfx + 'datatable-subtable') || false;\n      },\n\n      /**\r\n       * Get total extra space of an element for width calculation,\r\n       * including padding, margin, border\r\n       * @param element\r\n       * @returns {number}\r\n       */\n      getExtraSpace: function getExtraSpace(element) {\n        var padding = parseInt($(element).css('paddingRight')) + parseInt($(element).css('paddingLeft'));\n        var margin = parseInt($(element).css('marginRight')) + parseInt($(element).css('marginLeft'));\n        var border = Math.ceil($(element).css('border-right-width').replace('px', ''));\n        return padding + margin + border;\n      },\n\n      /**\r\n       * Insert data of array into {{ }} template placeholder\r\n       * @param template\r\n       * @param data\r\n       * @returns {*}\r\n       */\n      dataPlaceholder: function dataPlaceholder(template, data) {\n        var result = template;\n        $.each(data, function (key, val) {\n          result = result.replace('{{' + key + '}}', val);\n        });\n        return result;\n      },\n\n      /**\r\n       * Get table unique ID\r\n       * Note: table unique change each time refreshed\r\n       * @param suffix\r\n       * @returns {*}\r\n       */\n      getTableId: function getTableId(suffix) {\n        if (typeof suffix === 'undefined') suffix = '';\n        var id = $(datatable).attr('id');\n\n        if (typeof id === 'undefined') {\n          id = $(datatable).attr('class').split(' ')[0];\n        }\n\n        return id + suffix;\n      },\n\n      /**\r\n       * Get table prefix with depth number\r\n       */\n      getTablePrefix: function getTablePrefix(suffix) {\n        if (typeof suffix !== 'undefined') suffix = '-' + suffix;\n        return Plugin.getTableId() + '-' + Plugin.getDepth() + suffix;\n      },\n\n      /**\r\n       * Get current table depth of sub table\r\n       * @returns {number}\r\n       */\n      getDepth: function getDepth() {\n        var depth = 0;\n        var table = datatable.table;\n\n        do {\n          table = $(table).parents('.' + pfx + 'datatable-table');\n          depth++;\n        } while ($(table).length > 0);\n\n        return depth;\n      },\n\n      /**\r\n       * Keep state item\r\n       * @param key\r\n       * @param value\r\n       */\n      stateKeep: function stateKeep(key, value) {\n        key = Plugin.getTablePrefix(key);\n        if (Plugin.getOption('data.saveState') === false) return;\n\n        if (localStorage) {\n          localStorage.setItem(key, JSON.stringify(value));\n        }\n      },\n\n      /**\r\n       * Get state item\r\n       * @param key\r\n       * @param defValue\r\n       */\n      stateGet: function stateGet(key, defValue) {\n        key = Plugin.getTablePrefix(key);\n        if (Plugin.getOption('data.saveState') === false) return;\n        var value = null;\n\n        if (localStorage) {\n          value = localStorage.getItem(key);\n        }\n\n        if (typeof value !== 'undefined' && value !== null) {\n          return JSON.parse(value);\n        }\n      },\n\n      /**\r\n       * Update data in state without clear existing\r\n       * @param key\r\n       * @param value\r\n       */\n      stateUpdate: function stateUpdate(key, value) {\n        var ori = Plugin.stateGet(key);\n        if (typeof ori === 'undefined' || ori === null) ori = {};\n        Plugin.stateKeep(key, $.extend({}, ori, value));\n      },\n\n      /**\r\n       * Remove state item\r\n       * @param key\r\n       */\n      stateRemove: function stateRemove(key) {\n        key = Plugin.getTablePrefix(key);\n\n        if (localStorage) {\n          localStorage.removeItem(key);\n        }\n      },\n\n      /**\r\n       * Get total columns.\r\n       */\n      getTotalColumns: function getTotalColumns(tablePart) {\n        if (typeof tablePart === 'undefined') tablePart = datatable.tableBody;\n        return $(tablePart).find('.' + pfx + 'datatable-row').first().find('.' + pfx + 'datatable-cell').length;\n      },\n\n      /**\r\n       * Get table row. Useful to get row when current table is in lock\r\n       * mode. Can be used for both lock and normal table mode. By\r\n       * default, returning result will be in a list of <td>.\r\n       * @param tablePart\r\n       * @param row 1-based index\r\n       * @param tdOnly Optional. Default true\r\n       * @returns {*}\r\n       */\n      getOneRow: function getOneRow(tablePart, row, tdOnly) {\n        if (typeof tdOnly === 'undefined') tdOnly = true; // get list of <tr>\n\n        var result = $(tablePart).find('.' + pfx + 'datatable-row:not(.' + pfx + 'datatable-row-detail):nth-child(' + row + ')');\n\n        if (tdOnly) {\n          // get list of <td> or <th>\n          result = result.find('.' + pfx + 'datatable-cell');\n        }\n\n        return result;\n      },\n\n      /**\r\n       * Sort table row at HTML level by column index.\r\n       * todo; Not in use.\r\n       * @param header Header sort clicked\r\n       * @param sort asc|desc. Optional. Default asc\r\n       * @param int Boolean. Optional. Comparison value parse to integer.\r\n       *     Default false\r\n       */\n      sortColumn: function sortColumn(header, sort, _int) {\n        if (typeof sort === 'undefined') sort = 'asc'; // desc\n\n        if (typeof _int === 'undefined') _int = false;\n        var column = $(header).index();\n        var rows = $(datatable.tableBody).find('.' + pfx + 'datatable-row');\n        var hIndex = $(header).closest('.' + pfx + 'datatable-lock').index();\n\n        if (hIndex !== -1) {\n          rows = $(datatable.tableBody).find('.' + pfx + 'datatable-lock:nth-child(' + (hIndex + 1) + ')').find('.' + pfx + 'datatable-row');\n        }\n\n        var container = $(rows).parent();\n        $(rows).sort(function (a, b) {\n          var tda = $(a).find('td:nth-child(' + column + ')').text();\n          var tdb = $(b).find('td:nth-child(' + column + ')').text();\n\n          if (_int) {\n            // useful for integer type sorting\n            tda = parseInt(tda);\n            tdb = parseInt(tdb);\n          }\n\n          if (sort === 'asc') {\n            return tda > tdb ? 1 : tda < tdb ? -1 : 0;\n          } else {\n            return tda < tdb ? 1 : tda > tdb ? -1 : 0;\n          }\n        }).appendTo(container);\n      },\n\n      /**\r\n       * Perform sort remote and local\r\n       */\n      sorting: function sorting() {\n        var sortObj = {\n          init: function init() {\n            if (options.sortable) {\n              $(datatable.tableHead).find('.' + pfx + 'datatable-cell:not(.' + pfx + 'datatable-cell-check)').addClass(pfx + 'datatable-cell-sort').off('click').on('click', sortObj.sortClick); // first init\n\n              sortObj.setIcon();\n            }\n          },\n          setIcon: function setIcon() {\n            var meta = Plugin.getDataSourceParam('sort');\n            if ($.isEmptyObject(meta)) return;\n            var column = Plugin.getColumnByField(meta.field); // sort is disabled for this column\n\n            if (typeof column === 'undefined') return;\n            if (typeof column.sortable !== 'undefined' && column.sortable === false) return;\n            if (typeof column.selector !== 'undefined' && column.selector === true) return; // sort icon beside column header\n\n            var td = $(datatable.tableHead).find('.' + pfx + 'datatable-cell[data-field=\"' + meta.field + '\"]').attr('data-sort', meta.sort);\n            var sorting = $(td).find('span');\n            var icon = $(sorting).find('i');\n            var icons = Plugin.getOption('layout.icons.sort'); // update sort icon; desc & asc\n\n            if ($(icon).length > 0) {\n              $(icon).removeAttr('class').addClass(icons[meta.sort]);\n            } else {\n              $(sorting).append($('<i/>').addClass(icons[meta.sort]));\n            } // set sorted class to header on init\n\n\n            $(td).addClass(pfx + 'datatable-cell-sorted');\n          },\n          sortClick: function sortClick(e) {\n            var meta = Plugin.getDataSourceParam('sort');\n            var field = $(this).data('field');\n            var column = Plugin.getColumnByField(field); // sort is disabled for this column\n\n            if (typeof column === 'undefined') return;\n            if (typeof column.sortable !== 'undefined' && column.sortable === false) return;\n            if (typeof column.selector !== 'undefined' && column.selector === true) return; // set sorted class to header\n\n            $(datatable.tableHead).find('th').removeClass(pfx + 'datatable-cell-sorted');\n            util.addClass(this, pfx + 'datatable-cell-sorted');\n            $(datatable.tableHead).find('.' + pfx + 'datatable-cell > span > i').remove();\n\n            if (options.sortable) {\n              Plugin.spinnerCallback(true);\n              var sort = 'desc';\n\n              if (Plugin.getObject('field', meta) === field) {\n                sort = Plugin.getObject('sort', meta);\n              } // toggle sort\n\n\n              sort = typeof sort === 'undefined' || sort === 'desc' ? 'asc' : 'desc'; // update field and sort params\n\n              meta = {\n                field: field,\n                sort: sort\n              };\n              Plugin.setDataSourceParam('sort', meta);\n              sortObj.setIcon();\n              setTimeout(function () {\n                Plugin.dataRender('sort');\n                $(datatable).trigger(pfx + 'datatable-on-sort', meta);\n              }, 300);\n            }\n          }\n        };\n        sortObj.init();\n      },\n\n      /**\r\n       * Update JSON data list linked with sort, filter and pagination.\r\n       * Call this method, before using dataSet variable.\r\n       * @returns {*|null}\r\n       */\n      localDataUpdate: function localDataUpdate() {\n        var params = Plugin.getDataSourceParam();\n\n        if (typeof datatable.originalDataSet === 'undefined') {\n          datatable.originalDataSet = datatable.dataSet;\n        }\n\n        var field = Plugin.getObject('sort.field', params);\n        var sort = Plugin.getObject('sort.sort', params);\n        var column = Plugin.getColumnByField(field);\n\n        if (typeof column !== 'undefined' && Plugin.getOption('data.serverSorting') !== true) {\n          if (typeof column.sortCallback === 'function') {\n            datatable.dataSet = column.sortCallback(datatable.originalDataSet, sort, column);\n          } else {\n            datatable.dataSet = Plugin.sortCallback(datatable.originalDataSet, sort, column);\n          }\n        } else {\n          datatable.dataSet = datatable.originalDataSet;\n        } // if server filter enable, don't pass local filter\n\n\n        if (_typeof(params.query) === 'object' && !Plugin.getOption('data.serverFiltering')) {\n          params.query = params.query || {};\n\n          var nestedSearch = function nestedSearch(obj) {\n            for (var field in obj) {\n              if (!obj.hasOwnProperty(field)) continue;\n\n              if (typeof obj[field] === 'string') {\n                if (obj[field].toLowerCase() == search || obj[field].toLowerCase().indexOf(search) !== -1) {\n                  return true;\n                }\n              } else if (typeof obj[field] === 'number') {\n                if (obj[field] === search) {\n                  return true;\n                }\n              } else if (_typeof(obj[field]) === 'object') {\n                if (nestedSearch(obj[field])) {\n                  return true;\n                }\n              }\n            }\n\n            return false;\n          };\n\n          var search = $(Plugin.getOption('search.input')).val();\n\n          if (typeof search !== 'undefined' && search !== '') {\n            search = search.toLowerCase();\n            datatable.dataSet = $.grep(datatable.dataSet, nestedSearch); // remove generalSearch as we don't need this for next columns filter\n\n            delete params.query[Plugin.getGeneralSearchKey()];\n          } // remove empty element from array\n\n\n          $.each(params.query, function (k, v) {\n            if (v === '') {\n              delete params.query[k];\n            }\n          }); // filter array by query\n\n          datatable.dataSet = Plugin.filterArray(datatable.dataSet, params.query); // reset array index\n\n          datatable.dataSet = datatable.dataSet.filter(function () {\n            return true;\n          });\n        }\n\n        return datatable.dataSet;\n      },\n\n      /**\r\n       * Utility helper to filter array by object pair of {key:value}\r\n       * @param list\r\n       * @param args\r\n       * @param operator\r\n       * @returns {*}\r\n       */\n      filterArray: function filterArray(list, args, operator) {\n        if (_typeof(list) !== 'object') {\n          return [];\n        }\n\n        if (typeof operator === 'undefined') operator = 'AND';\n\n        if (_typeof(args) !== 'object') {\n          return list;\n        }\n\n        operator = operator.toUpperCase();\n\n        if ($.inArray(operator, ['AND', 'OR', 'NOT']) === -1) {\n          return [];\n        }\n\n        var count = Object.keys(args).length;\n        var filtered = [];\n        $.each(list, function (key, obj) {\n          var to_match = obj;\n          var matched = 0;\n          $.each(args, function (m_key, m_value) {\n            m_value = m_value instanceof Array ? m_value : [m_value];\n            var match_property = Plugin.getObject(m_key, to_match);\n\n            if (typeof match_property !== 'undefined' && match_property) {\n              var lhs = match_property.toString().toLowerCase();\n              m_value.forEach(function (item, index) {\n                if (item.toString().toLowerCase() == lhs || lhs.indexOf(item.toString().toLowerCase()) !== -1) {\n                  matched++;\n                }\n              });\n            }\n          });\n\n          if ('AND' == operator && matched == count || 'OR' == operator && matched > 0 || 'NOT' == operator && 0 == matched) {\n            filtered[key] = obj;\n          }\n        });\n        list = filtered;\n        return list;\n      },\n\n      /**\r\n       * Reset lock column scroll to 0 when resize\r\n       */\n      resetScroll: function resetScroll() {\n        if (typeof options.detail === 'undefined' && Plugin.getDepth() === 1) {\n          $(datatable.table).find('.' + pfx + 'datatable-row').css('left', 0);\n          $(datatable.table).find('.' + pfx + 'datatable-lock').css('top', 0);\n          $(datatable.tableBody).scrollTop(0);\n        }\n      },\n\n      /**\r\n       * Get column options by field\r\n       * @param field\r\n       * @returns {boolean}\r\n       */\n      getColumnByField: function getColumnByField(field) {\n        if (typeof field === 'undefined') return;\n        var result;\n        $.each(options.columns, function (i, column) {\n          if (field === column.field) {\n            result = column;\n            return false;\n          }\n        });\n        return result;\n      },\n\n      /**\r\n       * Get default sort column\r\n       */\n      getDefaultSortColumn: function getDefaultSortColumn() {\n        var result;\n        $.each(options.columns, function (i, column) {\n          if (typeof column.sortable !== 'undefined' && $.inArray(column.sortable, ['asc', 'desc']) !== -1) {\n            result = {\n              sort: column.sortable,\n              field: column.field\n            };\n            return false;\n          }\n        });\n        return result;\n      },\n\n      /**\r\n       * Helper to get element dimensions, when the element is hidden\r\n       * @param element\r\n       * @param includeMargin\r\n       * @returns {{width: number, height: number, innerWidth: number,\r\n       *     innerHeight: number, outerWidth: number, outerHeight:\r\n       *     number}}\r\n       */\n      getHiddenDimensions: function getHiddenDimensions(element, includeMargin) {\n        var props = {\n          position: 'absolute',\n          visibility: 'hidden',\n          display: 'block'\n        },\n            dim = {\n          width: 0,\n          height: 0,\n          innerWidth: 0,\n          innerHeight: 0,\n          outerWidth: 0,\n          outerHeight: 0\n        },\n            hiddenParents = $(element).parents().addBack().not(':visible');\n        includeMargin = typeof includeMargin === 'boolean' ? includeMargin : false;\n        var oldProps = [];\n        hiddenParents.each(function () {\n          var old = {};\n\n          for (var name in props) {\n            old[name] = this.style[name];\n            this.style[name] = props[name];\n          }\n\n          oldProps.push(old);\n        });\n        dim.width = $(element).width();\n        dim.outerWidth = $(element).outerWidth(includeMargin);\n        dim.innerWidth = $(element).innerWidth();\n        dim.height = $(element).height();\n        dim.innerHeight = $(element).innerHeight();\n        dim.outerHeight = $(element).outerHeight(includeMargin);\n        hiddenParents.each(function (i) {\n          var old = oldProps[i];\n\n          for (var name in props) {\n            this.style[name] = old[name];\n          }\n        });\n        return dim;\n      },\n      getGeneralSearchKey: function getGeneralSearchKey() {\n        var searchInput = $(Plugin.getOption('search.input'));\n        return Plugin.getOption('search.key') || $(searchInput).prop('name');\n      },\n\n      /**\r\n       * Get value by dot notation path string and to prevent undefined\r\n       * errors\r\n       * @param path String Dot notation path in string\r\n       * @param object Object to iterate\r\n       * @returns {*}\r\n       */\n      getObject: function getObject(path, object) {\n        return path.split('.').reduce(function (obj, i) {\n          return obj !== null && typeof obj[i] !== 'undefined' ? obj[i] : null;\n        }, object);\n      },\n\n      /**\r\n       * Extend object\r\n       * @param obj\r\n       * @param path\r\n       * @param value\r\n       * @returns {*}\r\n       */\n      extendObj: function extendObj(obj, path, value) {\n        var levels = path.split('.'),\n            i = 0;\n\n        function createLevel(child) {\n          var name = levels[i++];\n\n          if (typeof child[name] !== 'undefined' && child[name] !== null) {\n            if (_typeof(child[name]) !== 'object' && typeof child[name] !== 'function') {\n              child[name] = {};\n            }\n          } else {\n            child[name] = {};\n          }\n\n          if (i === levels.length) {\n            child[name] = value;\n          } else {\n            createLevel(child[name]);\n          }\n        }\n\n        createLevel(obj);\n        return obj;\n      },\n      rowEvenOdd: function rowEvenOdd() {\n        // row even class\n        $(datatable.tableBody).find('.' + pfx + 'datatable-row').removeClass(pfx + 'datatable-row-even');\n\n        if ($(datatable.wrap).hasClass(pfx + 'datatable-subtable')) {\n          $(datatable.tableBody).find('.' + pfx + 'datatable-row:not(.' + pfx + 'datatable-row-detail):even').addClass(pfx + 'datatable-row-even');\n        } else {\n          $(datatable.tableBody).find('.' + pfx + 'datatable-row:nth-child(even)').addClass(pfx + 'datatable-row-even');\n        }\n      },\n\n      /********************\r\n       ** PUBLIC API METHODS\r\n       ********************/\n      // delay timer\n      timer: 0,\n\n      /**\r\n       * Redraw datatable by recalculating its DOM elements, etc.\r\n       * @returns {jQuery}\r\n       */\n      redraw: function redraw() {\n        Plugin.adjustCellsWidth.call();\n\n        if (Plugin.isLocked()) {\n          // fix hiding cell width issue\n          Plugin.scrollbar();\n          Plugin.resetScroll();\n          Plugin.adjustCellsHeight.call();\n        }\n\n        Plugin.adjustLockContainer.call();\n        Plugin.initHeight.call();\n        return datatable;\n      },\n\n      /**\r\n       * Shortcode to reload\r\n       * @returns {jQuery}\r\n       */\n      load: function load() {\n        Plugin.reload();\n        return datatable;\n      },\n\n      /**\r\n       * Datasource reload\r\n       * @returns {jQuery}\r\n       */\n      reload: function reload() {\n        var delay = function () {\n          return function (callback, ms) {\n            clearTimeout(Plugin.timer);\n            Plugin.timer = setTimeout(callback, ms);\n          };\n        }();\n\n        delay(function () {\n          // local only. remote pagination will skip this block\n          if (!options.data.serverFiltering) {\n            Plugin.localDataUpdate();\n          }\n\n          Plugin.dataRender();\n          $(datatable).trigger(pfx + 'datatable-on-reloaded');\n        }, Plugin.getOption('search.delay'));\n        return datatable;\n      },\n\n      /**\r\n       * Get record by record ID\r\n       * @param id\r\n       * @returns {jQuery}\r\n       */\n      getRecord: function getRecord(id) {\n        if (typeof datatable.tableBody === 'undefined') datatable.tableBody = $(datatable.table).children('tbody');\n        $(datatable.tableBody).find('.' + pfx + 'datatable-cell:first-child').each(function (i, cell) {\n          if (id == $(cell).text()) {\n            var rowNumber = $(cell).closest('.' + pfx + 'datatable-row').index() + 1;\n            datatable.API.record = datatable.API.value = Plugin.getOneRow(datatable.tableBody, rowNumber);\n            return datatable;\n          }\n        });\n        return datatable;\n      },\n\n      /**\r\n       * @deprecated in v5.0.6\r\n       * Get column of current record ID\r\n       * @param columnName\r\n       * @returns {jQuery}\r\n       */\n      getColumn: function getColumn(columnName) {\n        Plugin.setSelectedRecords();\n        datatable.API.value = $(datatable.API.record).find('[data-field=\"' + columnName + '\"]');\n        return datatable;\n      },\n\n      /**\r\n       * Destroy datatable to original DOM state before datatable was\r\n       * initialized\r\n       * @returns {jQuery}\r\n       */\n      destroy: function destroy() {\n        $(datatable).parent().find('.' + pfx + 'datatable-pager').remove();\n        var initialDatatable = $(datatable.initialDatatable).addClass(pfx + 'datatable-destroyed').show();\n        $(datatable).replaceWith(initialDatatable);\n        datatable = initialDatatable;\n        $(datatable).trigger(pfx + 'datatable-on-destroy');\n        Plugin.isInit = false; // clean up variables\n\n        initialDatatable = null;\n        datatable.dataSet = null;\n        datatable.originalDataSet = null;\n        datatable.tableHead = null;\n        datatable.tableBody = null;\n        datatable.table = null;\n        datatable.wrap = null;\n        datatable.API = {\n          record: null,\n          value: null,\n          params: null\n        };\n        Plugin.ajaxParams = {};\n        Plugin.pagingObject = {};\n        Plugin.nodeTr = [];\n        Plugin.nodeTd = [];\n        Plugin.nodeCols = [];\n        Plugin.recentNode = [];\n        return initialDatatable;\n      },\n\n      /**\r\n       * Sort by column field\r\n       * @param field\r\n       * @param sort\r\n       */\n      sort: function sort(field, _sort) {\n        // toggle sort\n        _sort = typeof _sort === 'undefined' ? 'asc' : _sort;\n        Plugin.spinnerCallback(true); // update field and sort params\n\n        var meta = {\n          field: field,\n          sort: _sort\n        };\n        Plugin.setDataSourceParam('sort', meta);\n        setTimeout(function () {\n          Plugin.dataRender('sort');\n          $(datatable).trigger(pfx + 'datatable-on-sort', meta);\n          $(datatable.tableHead).find('.' + pfx + 'datatable-cell > span > i').remove();\n        }, 300);\n        return datatable;\n      },\n\n      /**\r\n       * @deprecated in v5.0.6\r\n       * Get current selected column value\r\n       * @returns {jQuery}\r\n       */\n      getValue: function getValue() {\n        return $(datatable.API.value).text();\n      },\n\n      /**\r\n       * Set checkbox active\r\n       * @param cell JQuery selector or checkbox ID\r\n       */\n      setActive: function setActive(cell) {\n        if (typeof cell === 'string') {\n          // set by checkbox id\n          cell = $(datatable.tableBody).find('.' + pfx + 'checkbox-single > [type=\"checkbox\"][value=\"' + cell + '\"]');\n        }\n\n        $(cell).prop('checked', true);\n        var ids = [];\n        $(cell).each(function (i, td) {\n          // normal table\n          var row = $(td).closest('tr').addClass(pfx + 'datatable-row-active');\n          var id = $(td).attr('value');\n\n          if (typeof id !== 'undefined') {\n            ids.push(id);\n          }\n        });\n        $(datatable).trigger(pfx + 'datatable-on-check', [ids]);\n      },\n\n      /**\r\n       * Set checkbox inactive\r\n       * @param cell JQuery selector or checkbox ID\r\n       */\n      setInactive: function setInactive(cell) {\n        if (typeof cell === 'string') {\n          // set by checkbox id\n          cell = $(datatable.tableBody).find('.' + pfx + 'checkbox-single > [type=\"checkbox\"][value=\"' + cell + '\"]');\n        }\n\n        $(cell).prop('checked', false);\n        var ids = [];\n        $(cell).each(function (i, td) {\n          // normal table\n          var row = $(td).closest('tr').removeClass(pfx + 'datatable-row-active');\n          var id = $(td).attr('value');\n\n          if (typeof id !== 'undefined') {\n            ids.push(id);\n          }\n        });\n        $(datatable).trigger(pfx + 'datatable-on-uncheck', [ids]);\n      },\n\n      /**\r\n       * Set all checkboxes active or inactive\r\n       * @param active\r\n       */\n      setActiveAll: function setActiveAll(active) {\n        var checkboxes = $(datatable.table).find('> tbody, > thead').find('tr').not('.' + pfx + 'datatable-row-subtable').find('.' + pfx + 'datatable-cell-check [type=\"checkbox\"]');\n\n        if (active) {\n          Plugin.setActive(checkboxes);\n        } else {\n          Plugin.setInactive(checkboxes);\n        }\n      },\n\n      /**\r\n       * @deprecated in v5.0.6\r\n       * Get selected rows which are active\r\n       * @returns {jQuery}\r\n       */\n      setSelectedRecords: function setSelectedRecords() {\n        datatable.API.record = $(datatable.tableBody).find('.' + pfx + 'datatable-row-active');\n        return datatable;\n      },\n\n      /**\r\n       * Get selected records\r\n       * @returns {null}\r\n       */\n      getSelectedRecords: function getSelectedRecords() {\n        // support old method\n        Plugin.setSelectedRecords();\n        datatable.API.record = datatable.rows('.' + pfx + 'datatable-row-active').nodes();\n        return datatable.API.record;\n      },\n\n      /**\r\n       * Get options by dots notation path\r\n       * @param path String Dot notation path in string\r\n       * @returns {*}\r\n       */\n      getOption: function getOption(path) {\n        return Plugin.getObject(path, options);\n      },\n\n      /**\r\n       * Set global options nodes by dots notation path\r\n       * @param path\r\n       * @param object\r\n       */\n      setOption: function setOption(path, object) {\n        options = Plugin.extendObj(options, path, object);\n      },\n\n      /**\r\n       * Search filter for local & remote\r\n       * @param value\r\n       * @param columns. Optional list of columns to be filtered.\r\n       */\n      search: function search(value, columns) {\n        if (typeof columns !== 'undefined') columns = $.makeArray(columns);\n\n        var delay = function () {\n          return function (callback, ms) {\n            clearTimeout(Plugin.timer);\n            Plugin.timer = setTimeout(callback, ms);\n          };\n        }();\n\n        delay(function () {\n          // get query parameters\n          var query = Plugin.getDataSourceQuery(); // search not by columns\n\n          if (typeof columns === 'undefined' && typeof value !== 'undefined') {\n            var key = Plugin.getGeneralSearchKey();\n            query[key] = value;\n          } // search by columns, support multiple columns\n\n\n          if (_typeof(columns) === 'object') {\n            $.each(columns, function (k, column) {\n              query[column] = value;\n            }); // remove empty element from arrays\n\n            $.each(query, function (k, v) {\n              if (v === '' || $.isEmptyObject(v)) {\n                delete query[k];\n              }\n            });\n          }\n\n          Plugin.setDataSourceQuery(query); // reset pagination to 1 when doing seearching\n\n          datatable.setDataSourceParam('pagination', Object.assign({}, datatable.getDataSourceParam('pagination'), {\n            page: 1\n          })); // local filter only. remote pagination will skip this block\n\n          if (!options.data.serverFiltering) {\n            Plugin.localDataUpdate();\n          }\n\n          Plugin.dataRender('search');\n        }, Plugin.getOption('search.delay'));\n      },\n\n      /**\r\n       * Set datasource params extract\r\n       * @param param\r\n       * @param value\r\n       */\n      setDataSourceParam: function setDataSourceParam(param, value) {\n        datatable.API.params = $.extend({}, {\n          pagination: {\n            page: 1,\n            perpage: Plugin.getOption('data.pageSize')\n          },\n          sort: Plugin.getDefaultSortColumn(),\n          query: {}\n        }, datatable.API.params, Plugin.stateGet(Plugin.stateId));\n        datatable.API.params = Plugin.extendObj(datatable.API.params, param, value);\n        Plugin.stateKeep(Plugin.stateId, datatable.API.params);\n      },\n\n      /**\r\n       * Get datasource params\r\n       * @param param\r\n       */\n      getDataSourceParam: function getDataSourceParam(param) {\n        datatable.API.params = $.extend({}, {\n          pagination: {\n            page: 1,\n            perpage: Plugin.getOption('data.pageSize')\n          },\n          sort: Plugin.getDefaultSortColumn(),\n          query: {}\n        }, datatable.API.params, Plugin.stateGet(Plugin.stateId));\n\n        if (typeof param === 'string') {\n          return Plugin.getObject(param, datatable.API.params);\n        }\n\n        return datatable.API.params;\n      },\n\n      /**\r\n       * Shortcode to datatable.getDataSourceParam('query');\r\n       * @returns {*}\r\n       */\n      getDataSourceQuery: function getDataSourceQuery() {\n        return Plugin.getDataSourceParam('query') || {};\n      },\n\n      /**\r\n       * Shortcode to datatable.setDataSourceParam('query', query);\r\n       * @param query\r\n       */\n      setDataSourceQuery: function setDataSourceQuery(query) {\n        Plugin.setDataSourceParam('query', query);\n      },\n\n      /**\r\n       * Get current page number\r\n       * @returns {number}\r\n       */\n      getCurrentPage: function getCurrentPage() {\n        return $(datatable.table).siblings('.' + pfx + 'datatable-pager').last().find('.' + pfx + 'datatable-pager-nav').find('.' + pfx + 'datatable-pager-link.' + pfx + 'datatable-pager-link-active').data('page') || 1;\n      },\n\n      /**\r\n       * Get selected dropdown page size\r\n       * @returns {*|number}\r\n       */\n      getPageSize: function getPageSize() {\n        return $(datatable.table).siblings('.' + pfx + 'datatable-pager').last().find('select.' + pfx + 'datatable-pager-size').val() || 10;\n      },\n\n      /**\r\n       * Get total rows\r\n       */\n      getTotalRows: function getTotalRows() {\n        return datatable.API.params.pagination.total;\n      },\n\n      /**\r\n       * Get full dataset in grid\r\n       * @returns {*|null|Array}\r\n       */\n      getDataSet: function getDataSet() {\n        return datatable.originalDataSet;\n      },\n      nodeTr: [],\n      nodeTd: [],\n      nodeCols: [],\n      recentNode: [],\n      table: function table() {\n        if (typeof datatable.table !== 'undefined') {\n          return datatable.table;\n        }\n      },\n\n      /**\r\n       * Select a single row from the table\r\n       * @param selector\r\n       * @returns {jQuery}\r\n       */\n      row: function row(selector) {\n        Plugin.rows(selector);\n        Plugin.nodeTr = Plugin.recentNode = $(Plugin.nodeTr).first();\n        return datatable;\n      },\n\n      /**\r\n       * Select multiple rows from the table\r\n       * @param selector\r\n       * @returns {jQuery}\r\n       */\n      rows: function rows(selector) {\n        if (Plugin.isLocked()) {\n          Plugin.nodeTr = Plugin.recentNode = $(datatable.tableBody).find(selector).filter('.' + pfx + 'datatable-lock-scroll > .' + pfx + 'datatable-row');\n        } else {\n          Plugin.nodeTr = Plugin.recentNode = $(datatable.tableBody).find(selector).filter('.' + pfx + 'datatable-row');\n        }\n\n        return datatable;\n      },\n\n      /**\r\n       * Select a single column from the table\r\n       * @param index zero-based index\r\n       * @returns {jQuery}\r\n       */\n      column: function column(index) {\n        Plugin.nodeCols = Plugin.recentNode = $(datatable.tableBody).find('.' + pfx + 'datatable-cell:nth-child(' + (index + 1) + ')');\n        return datatable;\n      },\n\n      /**\r\n       * Select multiple columns from the table\r\n       * @param selector\r\n       * @returns {jQuery}\r\n       */\n      columns: function columns(selector) {\n        var context = datatable.table;\n\n        if (Plugin.nodeTr === Plugin.recentNode) {\n          context = Plugin.nodeTr;\n        }\n\n        var columns = $(context).find('.' + pfx + 'datatable-cell[data-field=\"' + selector + '\"]');\n\n        if (columns.length > 0) {\n          Plugin.nodeCols = Plugin.recentNode = columns;\n        } else {\n          Plugin.nodeCols = Plugin.recentNode = $(context).find(selector).filter('.' + pfx + 'datatable-cell');\n        }\n\n        return datatable;\n      },\n      cell: function cell(selector) {\n        Plugin.cells(selector);\n        Plugin.nodeTd = Plugin.recentNode = $(Plugin.nodeTd).first();\n        return datatable;\n      },\n      cells: function cells(selector) {\n        var cells = $(datatable.tableBody).find('.' + pfx + 'datatable-cell');\n\n        if (typeof selector !== 'undefined') {\n          cells = $(cells).filter(selector);\n        }\n\n        Plugin.nodeTd = Plugin.recentNode = cells;\n        return datatable;\n      },\n\n      /**\r\n       * Delete the selected row from the table\r\n       * @returns {jQuery}\r\n       */\n      remove: function remove() {\n        if ($(Plugin.nodeTr.length) && Plugin.nodeTr === Plugin.recentNode) {\n          $(Plugin.nodeTr).remove();\n        }\n\n        Plugin.layoutUpdate();\n        return datatable;\n      },\n\n      /**\r\n       * Show or hide the columns or rows\r\n       */\n      visible: function visible(bool) {\n        if ($(Plugin.recentNode.length)) {\n          var locked = Plugin.lockEnabledColumns();\n\n          if (Plugin.recentNode === Plugin.nodeCols) {\n            var index = Plugin.recentNode.index();\n\n            if (Plugin.isLocked()) {\n              var scrollColumns = $(Plugin.recentNode).closest('.' + pfx + 'datatable-lock-scroll').length;\n\n              if (scrollColumns) {\n                // is at center of scrollable area\n                index += locked.left.length + 1;\n              } else if ($(Plugin.recentNode).closest('.' + pfx + 'datatable-lock-right').length) {\n                // is at the right locked table\n                index += locked.left.length + scrollColumns + 1;\n              }\n            }\n          }\n\n          if (bool) {\n            if (Plugin.recentNode === Plugin.nodeCols) {\n              delete options.columns[index].visible;\n            }\n\n            $(Plugin.recentNode).show();\n          } else {\n            if (Plugin.recentNode === Plugin.nodeCols) {\n              Plugin.setOption('columns.' + index + '.visible', false);\n            }\n\n            $(Plugin.recentNode).hide();\n          }\n\n          Plugin.columnHide();\n          Plugin.redraw();\n        }\n      },\n\n      /**\r\n       * Get the the DOM element for the selected rows or columns\r\n       * @returns {Array}\r\n       */\n      nodes: function nodes() {\n        return Plugin.recentNode;\n      },\n\n      /**\r\n       * will be implemented soon\r\n       * @returns {jQuery}\r\n       */\n      dataset: function dataset() {\n        return datatable;\n      },\n\n      /**\r\n       * Open page by number\r\n       * @param page number\r\n       */\n      gotoPage: function gotoPage(page) {\n        if (typeof Plugin.pagingObject !== 'undefined') {\n          Plugin.isInit = true;\n          Plugin.pagingObject.openPage(page);\n        }\n      }\n    };\n    /**\r\n     * Public API methods can be used directly by datatable\r\n     */\n\n    $.each(Plugin, function (funcName, func) {\n      datatable[funcName] = func;\n    }); // initialize main datatable plugin\n\n    if (typeof options !== 'undefined') {\n      if (typeof options === 'string') {\n        var method = options;\n        datatable = $(this).data(pluginName);\n\n        if (typeof datatable !== 'undefined') {\n          options = datatable.options;\n          Plugin[method].apply(this, Array.prototype.slice.call(arguments, 1));\n        }\n      } else {\n        if (!datatable.data(pluginName) && !$(this).hasClass(pfx + 'datatable-loaded')) {\n          datatable.dataSet = null;\n          datatable.textAlign = {\n            left: pfx + 'datatable-cell-left',\n            center: pfx + 'datatable-cell-center',\n            right: pfx + 'datatable-cell-right'\n          }; // merge default and user defined options\n\n          options = $.extend(true, {}, $.fn[pluginName].defaults, options);\n          datatable.options = options; // init plugin process\n\n          Plugin.init.apply(this, [options]);\n          $(datatable.wrap).data(pluginName, datatable);\n        }\n      }\n    } else {\n      // get existing instance datatable\n      datatable = $(this).data(pluginName);\n\n      if (typeof datatable === 'undefined') {\n        $.error(pluginName + ' not initialized');\n      }\n\n      options = datatable.options;\n    }\n\n    return datatable;\n  }; // default options\n\n\n  $.fn[pluginName].defaults = {\n    // datasource definition\n    data: {\n      type: 'local',\n      source: null,\n      pageSize: 10,\n      // display records per page\n      saveState: true,\n      serverPaging: false,\n      serverFiltering: false,\n      serverSorting: false,\n      autoColumns: false,\n      attr: {\n        rowProps: []\n      }\n    },\n    // layout definition\n    layout: {\n      theme: 'default',\n      // datatable will support multiple themes and designs\n      \"class\": pfx + 'datatable-primary',\n      // custom wrapper class\n      scroll: false,\n      // enable/disable datatable scroll both horizontal and vertical when needed.\n      height: null,\n      // datatable's body's fixed height\n      minHeight: null,\n      footer: false,\n      // display/hide footer\n      header: true,\n      // display/hide header\n      customScrollbar: true,\n      // set false to disable custom scrollbar\n      // datatable spinner\n      spinner: {\n        overlayColor: '#000000',\n        opacity: 0,\n        type: 'loader',\n        state: 'primary',\n        message: true\n      },\n      // datatable UI icons\n      icons: {\n        sort: {\n          asc: 'flaticon2-arrow-up',\n          desc: 'flaticon2-arrow-down'\n        },\n        pagination: {\n          next: 'flaticon2-next',\n          prev: 'flaticon2-back',\n          first: 'flaticon2-fast-back',\n          last: 'flaticon2-fast-next',\n          more: 'flaticon-more-1'\n        },\n        rowDetail: {\n          expand: 'fa fa-caret-down',\n          collapse: 'fa fa-caret-right'\n        }\n      }\n    },\n    // column sorting\n    sortable: true,\n    // resize column size with mouse drag coming soon)\n    resizable: false,\n    // column based filtering (coming soon)\n    filterable: false,\n    pagination: true,\n    // inline and bactch editing (cooming soon)\n    editable: false,\n    // columns definition\n    columns: [],\n    search: {\n      // enable trigger search by keyup enter\n      onEnter: false,\n      // input text for search\n      input: null,\n      // search delay in milliseconds\n      delay: 400,\n      //\tremote server search key value\n      key: null\n    },\n    rows: {\n      // deprecated\n      callback: function callback() {},\n      // call before row template\n      beforeTemplate: function beforeTemplate() {},\n      // call after row template\n      afterTemplate: function afterTemplate() {},\n      autoHide: true\n    },\n    // toolbar\n    toolbar: {\n      // place pagination and displayInfo blocks according to the array order\n      layout: ['pagination', 'info'],\n      // toolbar placement can be at top or bottom or both top and bottom repeated\n      placement: ['bottom'],\n      //'top', 'bottom'\n      // toolbar items\n      items: {\n        // pagination\n        pagination: {\n          // pagination type(default or scroll)\n          type: 'default',\n          // number of pages to display by breakpoints\n          pages: {\n            desktop: {\n              layout: 'default',\n              pagesNumber: 5\n            },\n            tablet: {\n              layout: 'default',\n              pagesNumber: 3\n            },\n            mobile: {\n              layout: 'compact'\n            }\n          },\n          // navigation buttons\n          navigation: {\n            prev: true,\n            // display prev button\n            next: true,\n            // display next button\n            first: true,\n            // display first button\n            last: true,\n            // display last button\n            more: false // display more button\n\n          },\n          // page size select\n          pageSizeSelect: [] // display dropdown to select pagination size. -1 is used for \"ALl\" option\n\n        },\n        // records info\n        info: true\n      }\n    },\n    // here we will keep all strings and message used by datatable UI so developer can easiliy translate to any language.\n    // By default the stirngs will be in the plugin source and here can override it\n    translate: {\n      records: {\n        processing: 'Please wait...',\n        noRecords: 'No records found'\n      },\n      toolbar: {\n        pagination: {\n          items: {\n            \"default\": {\n              first: 'First',\n              prev: 'Previous',\n              next: 'Next',\n              last: 'Last',\n              more: 'More pages',\n              input: 'Page number',\n              select: 'Select page size',\n              all: 'all'\n            },\n            info: 'Showing {{start}} - {{end}} of {{total}}'\n          }\n        }\n      }\n    },\n    extensions: {}\n  };\n})(jQuery);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/components/datatable/core.datatable.js\n");

/***/ }),

/***/ "./resources/metronic/js/components/datatable/datatable.checkbox.js":
/*!**************************************************************************!*\
  !*** ./resources/metronic/js/components/datatable/datatable.checkbox.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n(function ($) {\n  var pluginName = 'KTDatatable';\n  var pfx = '';\n  $.fn[pluginName] = $.fn[pluginName] || {};\n  /**\r\n   * @param datatable Main datatable plugin instance\r\n   * @param options Extension options\r\n   * @returns {*}\r\n   */\n\n  $.fn[pluginName].checkbox = function (datatable, options) {\n    var Extension = {\n      selectedAllRows: false,\n      selectedRows: [],\n      unselectedRows: [],\n      init: function init() {\n        if (Extension.selectorEnabled()) {\n          // reset\n          datatable.setDataSourceParam(options.vars.selectedAllRows, false);\n          datatable.stateRemove('checkbox'); // requestIds is not null\n\n          if (options.vars.requestIds) {\n            // request ids in response\n            datatable.setDataSourceParam(options.vars.requestIds, true);\n          } // remove selected checkbox on datatable reload\n\n\n          $(datatable).on(pfx + 'datatable-on-reloaded', function () {\n            datatable.stateRemove('checkbox');\n            datatable.setDataSourceParam(options.vars.selectedAllRows, false);\n            Extension.selectedAllRows = false;\n            Extension.selectedRows = [];\n            Extension.unselectedRows = [];\n          }); // select all on extension init\n\n          Extension.selectedAllRows = datatable.getDataSourceParam(options.vars.selectedAllRows);\n          $(datatable).on(pfx + 'datatable-on-layout-updated', function (e, args) {\n            if (args.table != $(datatable.wrap).attr('id')) {\n              return;\n            }\n\n            datatable.ready(function () {\n              Extension.initVars();\n              Extension.initEvent();\n              Extension.initSelect();\n            });\n          });\n          $(datatable).on(pfx + 'datatable-on-check', function (e, ids) {\n            ids.forEach(function (id) {\n              Extension.selectedRows.push(id); // // remove from unselected rows\n\n              Extension.unselectedRows = Extension.remove(Extension.unselectedRows, id);\n            });\n            var storage = {};\n            storage['selectedRows'] = Extension.selectedRows.filter(Extension.unique);\n            storage['unselectedRows'] = Extension.unselectedRows.filter(Extension.unique);\n            datatable.stateKeep('checkbox', storage);\n          });\n          $(datatable).on(pfx + 'datatable-on-uncheck', function (e, ids) {\n            ids.forEach(function (id) {\n              Extension.unselectedRows.push(id); // // remove from selected rows\n\n              Extension.selectedRows = Extension.remove(Extension.selectedRows, id);\n            });\n            var storage = {};\n            storage['selectedRows'] = Extension.selectedRows.filter(Extension.unique);\n            storage['unselectedRows'] = Extension.unselectedRows.filter(Extension.unique);\n            storage['unselectedRows'] = Extension.unselectedRows.filter(Extension.unique);\n            datatable.stateKeep('checkbox', storage);\n          });\n        }\n      },\n\n      /**\r\n       * Init checkbox clicks event\r\n       */\n      initEvent: function initEvent() {\n        // select all checkbox click\n        $(datatable.tableHead).find('.' + pfx + 'checkbox-all > [type=\"checkbox\"]').click(function (e) {\n          // clear selected and unselected rows\n          Extension.selectedRows = Extension.unselectedRows = [];\n          datatable.stateRemove('checkbox'); // select all rows\n\n          Extension.selectedAllRows = !!$(this).is(':checked'); // local select all current page rows\n\n          if (!options.vars.requestIds) {\n            if ($(this).is(':checked')) {\n              Extension.selectedRows = $.makeArray($(datatable.tableBody).find('.' + pfx + 'checkbox-single > [type=\"checkbox\"]').map(function (i, chk) {\n                return $(chk).val();\n              }));\n            }\n\n            var storage = {};\n            storage['selectedRows'] = Extension.selectedRows.filter(Extension.unique);\n            datatable.stateKeep('checkbox', storage);\n          } // keep selectedAllRows in datasource params\n\n\n          datatable.setDataSourceParam(options.vars.selectedAllRows, Extension.selectedAllRows);\n          $(datatable).trigger(pfx + 'datatable-on-click-checkbox', [$(this)]);\n        }); // single row checkbox click\n\n        $(datatable.tableBody).find('.' + pfx + 'checkbox-single > [type=\"checkbox\"]').click(function (e) {\n          var id = $(this).val();\n\n          if ($(this).is(':checked')) {\n            Extension.selectedRows.push(id); // remove from unselected rows\n\n            Extension.unselectedRows = Extension.remove(Extension.unselectedRows, id);\n          } else {\n            Extension.unselectedRows.push(id); // remove from selected rows\n\n            Extension.selectedRows = Extension.remove(Extension.selectedRows, id);\n          } // local checkbox header check\n\n\n          if (!options.vars.requestIds && Extension.selectedRows.length < 1) {\n            // remove select all checkbox, if there is no checked checkbox left\n            $(datatable.tableHead).find('.' + pfx + 'checkbox-all > [type=\"checkbox\"]').prop('checked', false);\n          }\n\n          var storage = {};\n          storage['selectedRows'] = Extension.selectedRows.filter(Extension.unique);\n          storage['unselectedRows'] = Extension.unselectedRows.filter(Extension.unique);\n          datatable.stateKeep('checkbox', storage);\n          $(datatable).trigger(pfx + 'datatable-on-click-checkbox', [$(this)]);\n        });\n      },\n      unique: function unique(value, index, self) {\n        return self.indexOf(value) === index;\n      },\n      initSelect: function initSelect() {\n        // selected all rows from server\n        if (Extension.selectedAllRows && options.vars.requestIds) {\n          if (!datatable.hasClass(pfx + 'datatable-error')) {\n            // set header select all checkbox checked\n            $(datatable.tableHead).find('.' + pfx + 'checkbox-all > [type=\"checkbox\"]').prop('checked', true);\n          } // set all checkbox in table body\n\n\n          datatable.setActiveAll(true); // remove unselected rows\n\n          Extension.unselectedRows.forEach(function (id) {\n            datatable.setInactive(id);\n          });\n        } else {\n          // single check for server and local\n          Extension.selectedRows.forEach(function (id) {\n            datatable.setActive(id);\n          }); // local checkbox; check if all checkboxes of currect page are checked\n\n          if (!datatable.hasClass(pfx + 'datatable-error') && $(datatable.tableBody).find('.' + pfx + 'checkbox-single > [type=\"checkbox\"]').not(':checked').length < 1) {\n            // set header select all checkbox checked\n            $(datatable.tableHead).find('.' + pfx + 'checkbox-all > [type=\"checkbox\"]').prop('checked', true);\n          }\n        }\n      },\n\n      /**\r\n       * Check if selector is enabled from options\r\n       */\n      selectorEnabled: function selectorEnabled() {\n        return $.grep(datatable.options.columns, function (n, i) {\n          return n.selector || false;\n        })[0];\n      },\n      initVars: function initVars() {\n        // get single select/unselect from localstorage\n        var storage = datatable.stateGet('checkbox');\n\n        if (typeof storage !== 'undefined') {\n          Extension.selectedRows = storage['selectedRows'] || [];\n          Extension.unselectedRows = storage['unselectedRows'] || [];\n        }\n      },\n      getSelectedId: function getSelectedId(path) {\n        Extension.initVars(); // server selected all rows\n\n        if (Extension.selectedAllRows && options.vars.requestIds) {\n          if (typeof path === 'undefined') {\n            path = options.vars.rowIds;\n          } // if selected all rows, return id from response meta\n\n\n          var selectedAllRows = datatable.getObject(path, datatable.lastResponse) || [];\n\n          if (selectedAllRows.length > 0) {\n            // remove single unselected rows from selectedAllRows ids from server response emta\n            Extension.unselectedRows.forEach(function (id) {\n              selectedAllRows = Extension.remove(selectedAllRows, parseInt(id));\n            });\n          }\n\n          return selectedAllRows.filter(Extension.unique);\n        } // else return single checked selected rows\n\n\n        return Extension.selectedRows.filter(Extension.unique);\n      },\n      remove: function remove(array, element) {\n        return array.filter(function (e) {\n          return e !== element;\n        });\n      }\n    }; // make the extension accessible from datatable init\n\n    datatable.checkbox = function () {\n      return Extension;\n    };\n\n    if (_typeof(options) === 'object') {\n      options = $.extend(true, {}, $.fn[pluginName].checkbox[\"default\"], options);\n      Extension.init.apply(this, [options]);\n    }\n\n    return datatable;\n  };\n\n  $.fn[pluginName].checkbox[\"default\"] = {\n    vars: {\n      // select all rows flag to be sent to the server\n      selectedAllRows: 'selectedAllRows',\n      // request id parameter's name\n      requestIds: 'requestIds',\n      // response path to all rows id\n      rowIds: 'meta.rowIds'\n    }\n  };\n})(jQuery);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/components/datatable/datatable.checkbox.js\n");

/***/ }),

/***/ "./resources/metronic/js/components/datatable/datatable.rtl.js":
/*!*********************************************************************!*\
  !*** ./resources/metronic/js/components/datatable/datatable.rtl.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var defaults = {\n  layout: {\n    icons: {\n      pagination: {\n        next: 'flaticon2-next',\n        prev: 'flaticon2-back',\n        first: 'flaticon2-fast-back',\n        last: 'flaticon2-fast-next',\n        more: 'flaticon-more-1'\n      },\n      rowDetail: {\n        expand: 'fa fa-caret-down',\n        collapse: 'fa fa-caret-right'\n      }\n    }\n  }\n};\n\nif (KTUtil.isRTL()) {\n  defaults = {\n    layout: {\n      icons: {\n        pagination: {\n          next: 'flaticon2-back',\n          prev: 'flaticon2-next',\n          first: 'flaticon2-fast-next',\n          last: 'flaticon2-fast-back'\n        },\n        rowDetail: {\n          collapse: 'fa fa-caret-down',\n          expand: 'fa fa-caret-right'\n        }\n      }\n    }\n  };\n}\n\n$.extend(true, $.fn.KTDatatable.defaults, defaults);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvY29tcG9uZW50cy9kYXRhdGFibGUvZGF0YXRhYmxlLnJ0bC5qcz9jNWExIl0sIm5hbWVzIjpbImRlZmF1bHRzIiwibGF5b3V0IiwiaWNvbnMiLCJwYWdpbmF0aW9uIiwibmV4dCIsInByZXYiLCJmaXJzdCIsImxhc3QiLCJtb3JlIiwicm93RGV0YWlsIiwiZXhwYW5kIiwiY29sbGFwc2UiLCJLVFV0aWwiLCJpc1JUTCIsIiQiLCJleHRlbmQiLCJmbiIsIktURGF0YXRhYmxlIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxRQUFRLEdBQUc7QUFDZEMsUUFBTSxFQUFFO0FBQ1BDLFNBQUssRUFBRTtBQUNOQyxnQkFBVSxFQUFFO0FBQ1hDLFlBQUksRUFBRSxnQkFESztBQUVYQyxZQUFJLEVBQUUsZ0JBRks7QUFHWEMsYUFBSyxFQUFFLHFCQUhJO0FBSVhDLFlBQUksRUFBRSxxQkFKSztBQUtYQyxZQUFJLEVBQUU7QUFMSyxPQUROO0FBUU5DLGVBQVMsRUFBRTtBQUFDQyxjQUFNLEVBQUUsa0JBQVQ7QUFBNkJDLGdCQUFRLEVBQUU7QUFBdkM7QUFSTDtBQURBO0FBRE0sQ0FBZjs7QUFlQSxJQUFJQyxNQUFNLENBQUNDLEtBQVAsRUFBSixFQUFvQjtBQUNuQmIsVUFBUSxHQUFHO0FBQ1ZDLFVBQU0sRUFBRTtBQUNQQyxXQUFLLEVBQUU7QUFDTkMsa0JBQVUsRUFBRTtBQUNYQyxjQUFJLEVBQUUsZ0JBREs7QUFFWEMsY0FBSSxFQUFFLGdCQUZLO0FBR1hDLGVBQUssRUFBRSxxQkFISTtBQUlYQyxjQUFJLEVBQUU7QUFKSyxTQUROO0FBT05FLGlCQUFTLEVBQUU7QUFBQ0Usa0JBQVEsRUFBRSxrQkFBWDtBQUErQkQsZ0JBQU0sRUFBRTtBQUF2QztBQVBMO0FBREE7QUFERSxHQUFYO0FBYUE7O0FBRURJLENBQUMsQ0FBQ0MsTUFBRixDQUFTLElBQVQsRUFBZUQsQ0FBQyxDQUFDRSxFQUFGLENBQUtDLFdBQUwsQ0FBaUJqQixRQUFoQyxFQUEwQ0EsUUFBMUMiLCJmaWxlIjoiLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvY29tcG9uZW50cy9kYXRhdGFibGUvZGF0YXRhYmxlLnJ0bC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBkZWZhdWx0cyA9IHtcclxuXHRsYXlvdXQ6IHtcclxuXHRcdGljb25zOiB7XHJcblx0XHRcdHBhZ2luYXRpb246IHtcclxuXHRcdFx0XHRuZXh0OiAnZmxhdGljb24yLW5leHQnLFxyXG5cdFx0XHRcdHByZXY6ICdmbGF0aWNvbjItYmFjaycsXHJcblx0XHRcdFx0Zmlyc3Q6ICdmbGF0aWNvbjItZmFzdC1iYWNrJyxcclxuXHRcdFx0XHRsYXN0OiAnZmxhdGljb24yLWZhc3QtbmV4dCcsXHJcblx0XHRcdFx0bW9yZTogJ2ZsYXRpY29uLW1vcmUtMScsXHJcblx0XHRcdH0sXHJcblx0XHRcdHJvd0RldGFpbDoge2V4cGFuZDogJ2ZhIGZhLWNhcmV0LWRvd24nLCBjb2xsYXBzZTogJ2ZhIGZhLWNhcmV0LXJpZ2h0J30sXHJcblx0XHR9XHJcblx0fVxyXG59O1xyXG5cclxuaWYgKEtUVXRpbC5pc1JUTCgpKSB7XHJcblx0ZGVmYXVsdHMgPSB7XHJcblx0XHRsYXlvdXQ6IHtcclxuXHRcdFx0aWNvbnM6IHtcclxuXHRcdFx0XHRwYWdpbmF0aW9uOiB7XHJcblx0XHRcdFx0XHRuZXh0OiAnZmxhdGljb24yLWJhY2snLFxyXG5cdFx0XHRcdFx0cHJldjogJ2ZsYXRpY29uMi1uZXh0JyxcclxuXHRcdFx0XHRcdGZpcnN0OiAnZmxhdGljb24yLWZhc3QtbmV4dCcsXHJcblx0XHRcdFx0XHRsYXN0OiAnZmxhdGljb24yLWZhc3QtYmFjaycsXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHRyb3dEZXRhaWw6IHtjb2xsYXBzZTogJ2ZhIGZhLWNhcmV0LWRvd24nLCBleHBhbmQ6ICdmYSBmYS1jYXJldC1yaWdodCd9LFxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG59XHJcblxyXG4kLmV4dGVuZCh0cnVlLCAkLmZuLktURGF0YXRhYmxlLmRlZmF1bHRzLCBkZWZhdWx0cyk7XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/metronic/js/components/datatable/datatable.rtl.js\n");

/***/ }),

/***/ "./resources/metronic/js/components/dialog.js":
/*!****************************************************!*\
  !*** ./resources/metronic/js/components/dialog.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" // Component Definition \n\nvar KTDialog = function KTDialog(options) {\n  // Main object\n  var the = this; // Get element object\n\n  var element;\n  var body = KTUtil.getBody(); // Default options\n\n  var defaultOptions = {\n    'placement': 'top center',\n    'type': 'loader',\n    'width': 100,\n    'state': 'default',\n    'message': 'Loading...'\n  }; ////////////////////////////\n  // ** Private Methods  ** //\n  ////////////////////////////\n\n  var Plugin = {\n    /**\r\n     * Construct\r\n     */\n    construct: function construct(options) {\n      Plugin.init(options);\n      return the;\n    },\n\n    /**\r\n     * Handles subtoggle click toggle\r\n     */\n    init: function init(options) {\n      the.events = []; // merge default and user defined options\n\n      the.options = KTUtil.deepExtend({}, defaultOptions, options);\n      the.state = false;\n    },\n\n    /**\r\n     * Show dialog\r\n     */\n    show: function show() {\n      Plugin.eventTrigger('show');\n      element = document.createElement(\"DIV\");\n      KTUtil.setHTML(element, the.options.message);\n      KTUtil.addClass(element, 'dialog dialog-shown');\n      KTUtil.addClass(element, 'dialog-' + the.options.state);\n      KTUtil.addClass(element, 'dialog-' + the.options.type);\n\n      if (the.options.placement == 'top center') {\n        KTUtil.addClass(element, 'dialog-top-center');\n      }\n\n      body.appendChild(element);\n      the.state = 'shown';\n      Plugin.eventTrigger('shown');\n      return the;\n    },\n\n    /**\r\n     * Hide dialog\r\n     */\n    hide: function hide() {\n      if (element) {\n        Plugin.eventTrigger('hide');\n        element.remove();\n        the.state = 'hidden';\n        Plugin.eventTrigger('hidden');\n      }\n\n      return the;\n    },\n\n    /**\r\n     * Trigger events\r\n     */\n    eventTrigger: function eventTrigger(name) {\n      for (var i = 0; i < the.events.length; i++) {\n        var event = the.events[i];\n\n        if (event.name == name) {\n          if (event.one == true) {\n            if (event.fired == false) {\n              the.events[i].fired = true;\n              return event.handler.call(this, the);\n            }\n          } else {\n            return event.handler.call(this, the);\n          }\n        }\n      }\n    },\n    addEvent: function addEvent(name, handler, one) {\n      the.events.push({\n        name: name,\n        handler: handler,\n        one: one,\n        fired: false\n      });\n      return the;\n    }\n  }; //////////////////////////\n  // ** Public Methods ** //\n  //////////////////////////\n\n  /**\r\n   * Set default options\r\n   */\n\n  the.setDefaults = function (options) {\n    defaultOptions = options;\n  };\n  /**\r\n   * Check shown state\r\n   */\n\n\n  the.shown = function () {\n    return the.state == 'shown';\n  };\n  /**\r\n   * Check hidden state\r\n   */\n\n\n  the.hidden = function () {\n    return the.state == 'hidden';\n  };\n  /**\r\n   * Show dialog\r\n   */\n\n\n  the.show = function () {\n    return Plugin.show();\n  };\n  /**\r\n   * Hide dialog\r\n   */\n\n\n  the.hide = function () {\n    return Plugin.hide();\n  };\n  /**\r\n   * Attach event\r\n   * @returns {KTToggle}\r\n   */\n\n\n  the.on = function (name, handler) {\n    return Plugin.addEvent(name, handler);\n  };\n  /**\r\n   * Attach event that will be fired once\r\n   * @returns {KTToggle}\r\n   */\n\n\n  the.one = function (name, handler) {\n    return Plugin.addEvent(name, handler, true);\n  }; // Construct plugin\n\n\n  Plugin.construct.apply(the, [options]);\n  return the;\n}; // webpack support\n\n\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTDialog;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/components/dialog.js\n");

/***/ }),

/***/ "./resources/metronic/js/components/header.js":
/*!****************************************************!*\
  !*** ./resources/metronic/js/components/header.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" // Component Definition\n\nvar KTHeader = function KTHeader(elementId, options) {\n  // Main object\n  var the = this;\n  var init = false; // Get element object\n\n  var element = KTUtil.getById(elementId);\n  var body = KTUtil.getBody();\n\n  if (element === undefined) {\n    return;\n  } // Default options\n\n\n  var defaultOptions = {\n    offset: {\n      desktop: true,\n      tabletAndMobile: true\n    },\n    releseOnReverse: {\n      desktop: false,\n      tabletAndMobile: false\n    }\n  }; ////////////////////////////\n  // ** Private Methods  ** //\n  ////////////////////////////\n\n  var Plugin = {\n    /**\r\n     * Run plugin\r\n     * @returns {KTHeader}\r\n     */\n    construct: function construct(options) {\n      if (KTUtil.data(element).has('header')) {\n        the = KTUtil.data(element).get('header');\n      } else {\n        // reset header\n        Plugin.init(options); // build header\n\n        Plugin.build();\n        KTUtil.data(element).set('header', the);\n      }\n\n      return the;\n    },\n\n    /**\r\n     * Handles subheader click toggle\r\n     * @returns {KTHeader}\r\n     */\n    init: function init(options) {\n      the.events = []; // merge default and user defined options\n\n      the.options = KTUtil.deepExtend({}, defaultOptions, options);\n    },\n\n    /**\r\n     * Reset header\r\n     * @returns {KTHeader}\r\n     */\n    build: function build() {\n      var eventTriggerState = true;\n      var lastScrollTop = 0;\n      window.addEventListener('scroll', function () {\n        var offset = 0,\n            st,\n            attrName;\n\n        if (KTUtil.isBreakpointDown('lg') && the.options.offset.tabletAndMobile === false) {\n          return;\n        }\n\n        if (KTUtil.isBreakpointUp('lg') && the.options.offset.desktop === false) {\n          return;\n        }\n\n        if (KTUtil.isBreakpointUp('lg')) {\n          offset = the.options.offset.desktop;\n        } else if (KTUtil.isBreakpointDown('lg')) {\n          offset = the.options.offset.tabletAndMobile;\n        }\n\n        st = KTUtil.getScrollTop();\n\n        if (KTUtil.isBreakpointDown('lg') && the.options.releseOnReverse.tabletAndMobile || KTUtil.isBreakpointUp('lg') && the.options.releseOnReverse.desktop) {\n          if (st > offset && lastScrollTop < st) {\n            // down scroll mode\n            if (body.hasAttribute('data-header-scroll') === false) {\n              body.setAttribute('data-header-scroll', 'on');\n            }\n\n            if (eventTriggerState) {\n              Plugin.eventTrigger('scrollOn', the);\n              eventTriggerState = false;\n            }\n          } else {\n            // back scroll mode\n            if (body.hasAttribute('data-header-scroll') === true) {\n              body.removeAttribute('data-header-scroll');\n            }\n\n            if (eventTriggerState == false) {\n              Plugin.eventTrigger('scrollOff', the);\n              eventTriggerState = true;\n            }\n          }\n\n          lastScrollTop = st;\n        } else {\n          if (st > offset) {\n            // down scroll mode\n            if (body.hasAttribute('data-header-scroll') === false) {\n              body.setAttribute('data-header-scroll', 'on');\n            }\n\n            if (eventTriggerState) {\n              Plugin.eventTrigger('scrollOn', the);\n              eventTriggerState = false;\n            }\n          } else {\n            // back scroll mode\n            if (body.hasAttribute('data-header-scroll') === true) {\n              body.removeAttribute('data-header-scroll');\n            }\n\n            if (eventTriggerState == false) {\n              Plugin.eventTrigger('scrollOff', the);\n              eventTriggerState = true;\n            }\n          }\n        }\n      });\n    },\n\n    /**\r\n     * Trigger events\r\n     */\n    eventTrigger: function eventTrigger(name, args) {\n      for (var i = 0; i < the.events.length; i++) {\n        var event = the.events[i];\n\n        if (event.name == name) {\n          if (event.one == true) {\n            if (event.fired == false) {\n              the.events[i].fired = true;\n              return event.handler.call(this, the, args);\n            }\n          } else {\n            return event.handler.call(this, the, args);\n          }\n        }\n      }\n    },\n    addEvent: function addEvent(name, handler, one) {\n      the.events.push({\n        name: name,\n        handler: handler,\n        one: one,\n        fired: false\n      });\n    }\n  }; //////////////////////////\n  // ** Public Methods ** //\n  //////////////////////////\n\n  /**\r\n   * Set default options\r\n   */\n\n  the.setDefaults = function (options) {\n    defaultOptions = options;\n  };\n  /**\r\n   * Register event\r\n   */\n\n\n  the.on = function (name, handler) {\n    return Plugin.addEvent(name, handler);\n  }; ///////////////////////////////\n  // ** Plugin Construction ** //\n  ///////////////////////////////\n  // Run plugin\n\n\n  Plugin.construct.apply(the, [options]); // Init done\n\n  init = true; // Return plugin instance\n\n  return the;\n}; // webpack support\n\n\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTHeader;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/components/header.js\n");

/***/ }),

/***/ "./resources/metronic/js/components/image-input.js":
/*!*********************************************************!*\
  !*** ./resources/metronic/js/components/image-input.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" // Component Definition \n\nvar KTImageInput = function KTImageInput(elementId, options) {\n  // Main object\n  var the = this;\n  var init = false; // Get element object\n\n  var element = KTUtil.getById(elementId);\n  var body = KTUtil.getBody();\n\n  if (!element) {\n    return;\n  } // Default options\n\n\n  var defaultOptions = {\n    editMode: false\n  }; ////////////////////////////\n  // ** Private Methods  ** //\n  ////////////////////////////\n\n  var Plugin = {\n    /**\r\n     * Construct\r\n     */\n    construct: function construct(options) {\n      if (KTUtil.data(element).has('imageinput')) {\n        the = KTUtil.data(element).get('imageinput');\n      } else {\n        // reset menu\n        Plugin.init(options); // build menu\n\n        Plugin.build();\n        KTUtil.data(element).set('imageinput', the);\n      }\n\n      return the;\n    },\n\n    /**\r\n     * Init avatar\r\n     */\n    init: function init(options) {\n      the.element = element;\n      the.events = [];\n      the.input = KTUtil.find(element, 'input[type=\"file\"]');\n      the.wrapper = KTUtil.find(element, '.image-input-wrapper');\n      the.cancel = KTUtil.find(element, '[data-action=\"cancel\"]');\n      the.remove = KTUtil.find(element, '[data-action=\"remove\"]');\n      the.src = KTUtil.css(the.wrapper, 'backgroundImage');\n      the.hidden = KTUtil.find(element, 'input[type=\"hidden\"]'); // merge default and user defined options\n\n      the.options = KTUtil.deepExtend({}, defaultOptions, options);\n    },\n\n    /**\r\n     * Build\r\n     */\n    build: function build() {\n      // Handle change\n      KTUtil.addEvent(the.input, 'change', function (e) {\n        e.preventDefault();\n\n        if (the.input && the.input.files && the.input.files[0]) {\n          var reader = new FileReader();\n\n          reader.onload = function (e) {\n            KTUtil.css(the.wrapper, 'background-image', 'url(' + e.target.result + ')');\n          };\n\n          reader.readAsDataURL(the.input.files[0]);\n          KTUtil.addClass(the.element, 'image-input-changed');\n          KTUtil.removeClass(the.element, 'image-input-empty'); // Fire change event\n\n          Plugin.eventTrigger('change');\n        }\n      }); // Handle cancel\n\n      KTUtil.addEvent(the.cancel, 'click', function (e) {\n        e.preventDefault(); // Fire cancel event\n\n        Plugin.eventTrigger('cancel');\n        KTUtil.removeClass(the.element, 'image-input-changed');\n        KTUtil.removeClass(the.element, 'image-input-empty');\n        KTUtil.css(the.wrapper, 'background-image', the.src);\n        the.input.value = \"\";\n\n        if (the.hidden) {\n          the.hidden.value = \"0\";\n        }\n      }); // Handle remove\n\n      KTUtil.addEvent(the.remove, 'click', function (e) {\n        e.preventDefault(); // Fire cancel event\n\n        Plugin.eventTrigger('remove');\n        KTUtil.removeClass(the.element, 'image-input-changed');\n        KTUtil.addClass(the.element, 'image-input-empty');\n        KTUtil.css(the.wrapper, 'background-image', \"none\");\n        the.input.value = \"\";\n\n        if (the.hidden) {\n          the.hidden.value = \"1\";\n        }\n      });\n    },\n\n    /**\r\n     * Trigger events\r\n     */\n    eventTrigger: function eventTrigger(name) {\n      //KTUtil.triggerCustomEvent(name);\n      for (var i = 0; i < the.events.length; i++) {\n        var event = the.events[i];\n\n        if (event.name == name) {\n          if (event.one == true) {\n            if (event.fired == false) {\n              the.events[i].fired = true;\n              return event.handler.call(this, the);\n            }\n          } else {\n            return event.handler.call(this, the);\n          }\n        }\n      }\n    },\n    addEvent: function addEvent(name, handler, one) {\n      the.events.push({\n        name: name,\n        handler: handler,\n        one: one,\n        fired: false\n      });\n      return the;\n    }\n  }; //////////////////////////\n  // ** Public Methods ** //\n  //////////////////////////\n\n  /**\r\n   * Set default options\r\n   */\n\n  the.setDefaults = function (options) {\n    defaultOptions = options;\n  };\n  /**\r\n   * Attach event\r\n   */\n\n\n  the.on = function (name, handler) {\n    return Plugin.addEvent(name, handler);\n  };\n  /**\r\n   * Attach event that will be fired once\r\n   */\n\n\n  the.one = function (name, handler) {\n    return Plugin.addEvent(name, handler, true);\n  }; // Construct plugin\n\n\n  Plugin.construct.apply(the, [options]);\n  return the;\n}; // webpack support\n\n\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTImageInput;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/components/image-input.js\n");

/***/ }),

/***/ "./resources/metronic/js/components/menu.js":
/*!**************************************************!*\
  !*** ./resources/metronic/js/components/menu.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" // Component Definition\n\nvar KTMenu = function KTMenu(elementId, options) {\n  // Main object\n  var the = this;\n  var init = false; // Get element object\n\n  var element = KTUtil.getById(elementId);\n  var body = KTUtil.getBody();\n\n  if (!element) {\n    return;\n  } // Default options\n\n\n  var defaultOptions = {\n    // scrollable area with Perfect Scroll\n    scroll: {\n      rememberPosition: false\n    },\n    // accordion submenu mode\n    accordion: {\n      slideSpeed: 200,\n      // accordion toggle slide speed in milliseconds\n      autoScroll: false,\n      // enable auto scrolling(focus) to the clicked menu item\n      autoScrollSpeed: 1200,\n      expandAll: true // allow having multiple expanded accordions in the menu\n\n    },\n    // dropdown submenu mode\n    dropdown: {\n      timeout: 500 // timeout in milliseconds to show and hide the hoverable submenu dropdown\n\n    }\n  }; ////////////////////////////\n  // ** Private Methods  ** //\n  ////////////////////////////\n\n  var Plugin = {\n    /**\r\n     * Run plugin\r\n     * @returns {KTMenu}\r\n     */\n    construct: function construct(options) {\n      if (KTUtil.data(element).has('menu')) {\n        the = KTUtil.data(element).get('menu');\n      } else {\n        // reset menu\n        Plugin.init(options); // reset menu\n\n        Plugin.reset(); // build menu\n\n        Plugin.build();\n        KTUtil.data(element).set('menu', the);\n      }\n\n      return the;\n    },\n\n    /**\r\n     * Handles submenu click toggle\r\n     * @returns {KTMenu}\r\n     */\n    init: function init(options) {\n      the.events = [];\n      the.eventHandlers = {}; // merge default and user defined options\n\n      the.options = KTUtil.deepExtend({}, defaultOptions, options); // pause menu\n\n      the.pauseDropdownHoverTime = 0;\n      the.uid = KTUtil.getUniqueID();\n    },\n    update: function update(options) {\n      // merge default and user defined options\n      the.options = KTUtil.deepExtend({}, defaultOptions, options); // pause menu\n\n      the.pauseDropdownHoverTime = 0; // reset menu\n\n      Plugin.reset();\n      the.eventHandlers = {}; // build menu\n\n      Plugin.build();\n      KTUtil.data(element).set('menu', the);\n    },\n    reload: function reload() {\n      // reset menu\n      Plugin.reset(); // build menu\n\n      Plugin.build(); // reset submenu props\n\n      Plugin.resetSubmenuProps();\n    },\n\n    /**\r\n     * Reset menu\r\n     * @returns {KTMenu}\r\n     */\n    build: function build() {\n      // General accordion submenu toggle\n      the.eventHandlers['event_1'] = KTUtil.on(element, '.menu-toggle', 'click', Plugin.handleSubmenuAccordion); // Dropdown mode(hoverable)\n\n      if (Plugin.getSubmenuMode() === 'dropdown' || Plugin.isConditionalSubmenuDropdown()) {\n        // dropdown submenu - hover toggle\n        the.eventHandlers['event_2'] = KTUtil.on(element, '[data-menu-toggle=\"hover\"]', 'mouseover', Plugin.handleSubmenuDrodownHoverEnter);\n        the.eventHandlers['event_3'] = KTUtil.on(element, '[data-menu-toggle=\"hover\"]', 'mouseout', Plugin.handleSubmenuDrodownHoverExit); // dropdown submenu - click toggle\n\n        the.eventHandlers['event_4'] = KTUtil.on(element, '[data-menu-toggle=\"click\"] > .menu-toggle, [data-menu-toggle=\"click\"] > .menu-link .menu-toggle', 'click', Plugin.handleSubmenuDropdownClick);\n        the.eventHandlers['event_5'] = KTUtil.on(element, '[data-menu-toggle=\"tab\"] > .menu-toggle, [data-menu-toggle=\"tab\"] > .menu-link .menu-toggle', 'click', Plugin.handleSubmenuDropdownTabClick);\n      } // Handle general link click\n\n\n      the.eventHandlers['event_6'] = KTUtil.on(element, '.menu-item > .menu-link:not(.menu-toggle):not(.menu-link-toggle-skip)', 'click', Plugin.handleLinkClick); // Init scrollable menu\n\n      if (the.options.scroll && the.options.scroll.height) {\n        Plugin.scrollInit();\n      }\n    },\n\n    /**\r\n     * Reset menu\r\n     * @returns {KTMenu}\r\n     */\n    reset: function reset() {\n      KTUtil.off(element, 'click', the.eventHandlers['event_1']); // dropdown submenu - hover toggle\n\n      KTUtil.off(element, 'mouseover', the.eventHandlers['event_2']);\n      KTUtil.off(element, 'mouseout', the.eventHandlers['event_3']); // dropdown submenu - click toggle\n\n      KTUtil.off(element, 'click', the.eventHandlers['event_4']);\n      KTUtil.off(element, 'click', the.eventHandlers['event_5']); // handle link click\n\n      KTUtil.off(element, 'click', the.eventHandlers['event_6']);\n    },\n\n    /**\r\n     * Init scroll menu\r\n     *\r\n    */\n    scrollInit: function scrollInit() {\n      if (the.options.scroll && the.options.scroll.height) {\n        KTUtil.scrollDestroy(element, true);\n        KTUtil.scrollInit(element, {\n          mobileNativeScroll: true,\n          windowScroll: false,\n          resetHeightOnDestroy: true,\n          handleWindowResize: true,\n          height: the.options.scroll.height,\n          rememberPosition: the.options.scroll.rememberPosition\n        });\n      } else {\n        KTUtil.scrollDestroy(element, true);\n      }\n    },\n\n    /**\r\n     * Update scroll menu\r\n    */\n    scrollUpdate: function scrollUpdate() {\n      if (the.options.scroll && the.options.scroll.height) {\n        KTUtil.scrollUpdate(element);\n      }\n    },\n\n    /**\r\n     * Scroll top\r\n    */\n    scrollTop: function scrollTop() {\n      if (the.options.scroll && the.options.scroll.height) {\n        KTUtil.scrollTop(element);\n      }\n    },\n\n    /**\r\n     * Get submenu mode for current breakpoint and menu state\r\n     * @returns {KTMenu}\r\n     */\n    getSubmenuMode: function getSubmenuMode(el) {\n      if (KTUtil.isBreakpointUp('lg')) {\n        if (el && KTUtil.hasAttr(el, 'data-menu-toggle') && KTUtil.attr(el, 'data-menu-toggle') == 'hover') {\n          return 'dropdown';\n        }\n\n        if (KTUtil.isset(the.options.submenu, 'desktop.state.body')) {\n          if (KTUtil.hasClasses(body, the.options.submenu.desktop.state.body)) {\n            return the.options.submenu.desktop.state.mode;\n          } else {\n            return the.options.submenu.desktop[\"default\"];\n          }\n        } else if (KTUtil.isset(the.options.submenu, 'desktop')) {\n          return the.options.submenu.desktop;\n        }\n      } else if (KTUtil.isBreakpointUp('md') && KTUtil.isBreakpointDown('lg') && KTUtil.isset(the.options.submenu, 'tablet')) {\n        return the.options.submenu.tablet;\n      } else if (KTUtil.isBreakpointDown('md') && KTUtil.isset(the.options.submenu, 'mobile')) {\n        return the.options.submenu.mobile;\n      } else {\n        return false;\n      }\n    },\n\n    /**\r\n     * Get submenu mode for current breakpoint and menu state\r\n     * @returns {KTMenu}\r\n     */\n    isConditionalSubmenuDropdown: function isConditionalSubmenuDropdown() {\n      if (KTUtil.isBreakpointUp('lg') && KTUtil.isset(the.options.submenu, 'desktop.state.body')) {\n        return true;\n      } else {\n        return false;\n      }\n    },\n\n    /**\r\n     * Reset submenu attributes\r\n     * @returns {KTMenu}\r\n     */\n    resetSubmenuProps: function resetSubmenuProps(e) {\n      var submenus = KTUtil.findAll(element, '.menu-submenu');\n\n      if (submenus) {\n        for (var i = 0, len = submenus.length; i < len; i++) {\n          var submenu = submenus[0];\n          KTUtil.css(submenu, 'display', '');\n          KTUtil.css(submenu, 'overflow', '');\n\n          if (submenu.hasAttribute('data-hor-direction')) {\n            KTUtil.removeClass(submenu, 'menu-submenu-left');\n            KTUtil.removeClass(submenu, 'menu-submenu-right');\n            KTUtil.addClass(submenu, submenu.getAttribute('data-hor-direction'));\n          }\n        }\n      }\n    },\n\n    /**\r\n     * Handles submenu hover toggle\r\n     * @returns {KTMenu}\r\n     */\n    handleSubmenuDrodownHoverEnter: function handleSubmenuDrodownHoverEnter(e) {\n      if (Plugin.getSubmenuMode(this) === 'accordion') {\n        return;\n      }\n\n      if (the.resumeDropdownHover() === false) {\n        return;\n      }\n\n      var item = this;\n\n      if (item.getAttribute('data-hover') == '1') {\n        item.removeAttribute('data-hover');\n        clearTimeout(item.getAttribute('data-timeout'));\n        item.removeAttribute('data-timeout');\n      }\n\n      Plugin.showSubmenuDropdown(item);\n    },\n\n    /**\r\n     * Handles submenu hover toggle\r\n     * @returns {KTMenu}\r\n     */\n    handleSubmenuDrodownHoverExit: function handleSubmenuDrodownHoverExit(e) {\n      if (the.resumeDropdownHover() === false) {\n        return;\n      }\n\n      if (Plugin.getSubmenuMode(this) === 'accordion') {\n        return;\n      }\n\n      var item = this;\n      var time = the.options.dropdown.timeout;\n      var timeout = setTimeout(function () {\n        if (item.getAttribute('data-hover') == '1') {\n          Plugin.hideSubmenuDropdown(item, true);\n        }\n      }, time);\n      item.setAttribute('data-hover', '1');\n      item.setAttribute('data-timeout', timeout);\n    },\n\n    /**\r\n     * Handles submenu click toggle\r\n     * @returns {KTMenu}\r\n     */\n    handleSubmenuDropdownClick: function handleSubmenuDropdownClick(e) {\n      if (Plugin.getSubmenuMode(this) === 'accordion') {\n        return;\n      }\n\n      var item = this.closest('.menu-item'); // Trigger click event handlers\n\n      var result = Plugin.eventTrigger('submenuToggle', this, e);\n\n      if (result === false) {\n        return;\n      }\n\n      if (item.getAttribute('data-menu-submenu-mode') == 'accordion') {\n        return;\n      }\n\n      if (KTUtil.hasClass(item, 'menu-item-hover') === false) {\n        KTUtil.addClass(item, 'menu-item-open-dropdown');\n        Plugin.showSubmenuDropdown(item);\n      } else {\n        KTUtil.removeClass(item, 'menu-item-open-dropdown');\n        Plugin.hideSubmenuDropdown(item, true);\n      }\n\n      e.preventDefault();\n    },\n\n    /**\r\n     * Handles tab click toggle\r\n     * @returns {KTMenu}\r\n     */\n    handleSubmenuDropdownTabClick: function handleSubmenuDropdownTabClick(e) {\n      if (Plugin.getSubmenuMode(this) === 'accordion') {\n        return;\n      }\n\n      var item = this.closest('.menu-item'); // Trigger click event handlers\n\n      var result = Plugin.eventTrigger('submenuToggle', this, e);\n\n      if (result === false) {\n        return;\n      }\n\n      if (item.getAttribute('data-menu-submenu-mode') == 'accordion') {\n        return;\n      }\n\n      if (KTUtil.hasClass(item, 'menu-item-hover') == false) {\n        KTUtil.addClass(item, 'menu-item-open-dropdown');\n        Plugin.showSubmenuDropdown(item);\n      }\n\n      e.preventDefault();\n    },\n\n    /**\r\n     * Handles link click\r\n     * @returns {KTMenu}\r\n     */\n    handleLinkClick: function handleLinkClick(e) {\n      var submenu = this.closest('.menu-item.menu-item-submenu'); // Trigger click event handlers\n\n      var result = Plugin.eventTrigger('linkClick', this, e);\n\n      if (result === false) {\n        return;\n      }\n\n      if (submenu && Plugin.getSubmenuMode(submenu) === 'dropdown') {\n        Plugin.hideSubmenuDropdowns();\n      }\n    },\n\n    /**\r\n     * Handles submenu dropdown close on link click\r\n     * @returns {KTMenu}\r\n     */\n    handleSubmenuDropdownClose: function handleSubmenuDropdownClose(e, el) {\n      // exit if its not submenu dropdown mode\n      if (Plugin.getSubmenuMode(el) === 'accordion') {\n        return;\n      }\n\n      var shown = element.querySelectorAll('.menu-item.menu-item-submenu.menu-item-hover:not(.menu-item-tabs)'); // check if currently clicked link's parent item ha\n\n      if (shown.length > 0 && KTUtil.hasClass(el, 'menu-toggle') === false && el.querySelectorAll('.menu-toggle').length === 0) {\n        // close opened dropdown menus\n        for (var i = 0, len = shown.length; i < len; i++) {\n          Plugin.hideSubmenuDropdown(shown[0], true);\n        }\n      }\n    },\n\n    /**\r\n     * helper functions\r\n     * @returns {KTMenu}\r\n     */\n    handleSubmenuAccordion: function handleSubmenuAccordion(e, el) {\n      var query;\n      var item = el ? el : this; // Trigger click event handlers\n\n      var result = Plugin.eventTrigger('submenuToggle', this, e);\n\n      if (result === false) {\n        return;\n      }\n\n      if (Plugin.getSubmenuMode(el) === 'dropdown' && (query = item.closest('.menu-item'))) {\n        if (query.getAttribute('data-menu-submenu-mode') != 'accordion') {\n          e.preventDefault();\n          return;\n        }\n      }\n\n      var li = item.closest('.menu-item');\n      var submenu = KTUtil.child(li, '.menu-submenu, .menu-inner');\n\n      if (KTUtil.hasClass(item.closest('.menu-item'), 'menu-item-open-always')) {\n        return;\n      }\n\n      if (li && submenu) {\n        e.preventDefault();\n        var speed = the.options.accordion.slideSpeed;\n        var hasClosables = false;\n\n        if (KTUtil.hasClass(li, 'menu-item-open') === false) {\n          // hide other accordions\n          if (the.options.accordion.expandAll === false) {\n            var subnav = item.closest('.menu-nav, .menu-subnav');\n            var closables = KTUtil.children(subnav, '.menu-item.menu-item-open.menu-item-submenu:not(.menu-item-here):not(.menu-item-open-always)');\n\n            if (subnav && closables) {\n              for (var i = 0, len = closables.length; i < len; i++) {\n                var el_ = closables[0];\n                var submenu_ = KTUtil.child(el_, '.menu-submenu');\n\n                if (submenu_) {\n                  KTUtil.slideUp(submenu_, speed, function () {\n                    Plugin.scrollUpdate();\n                    KTUtil.removeClass(el_, 'menu-item-open');\n                  });\n                }\n              }\n            }\n          }\n\n          KTUtil.slideDown(submenu, speed, function () {\n            Plugin.scrollToItem(item);\n            Plugin.scrollUpdate();\n            Plugin.eventTrigger('submenuToggle', submenu, e);\n          });\n          KTUtil.addClass(li, 'menu-item-open');\n        } else {\n          KTUtil.slideUp(submenu, speed, function () {\n            Plugin.scrollToItem(item);\n            Plugin.scrollUpdate();\n            Plugin.eventTrigger('submenuToggle', submenu, e);\n          });\n          KTUtil.removeClass(li, 'menu-item-open');\n        }\n      }\n    },\n\n    /**\r\n     * scroll to item function\r\n     * @returns {KTMenu}\r\n     */\n    scrollToItem: function scrollToItem(item) {\n      // handle auto scroll for accordion submenus\n      if (KTUtil.isBreakpointUp('lg') && the.options.accordion.autoScroll && element.getAttribute('data-menu-scroll') !== '1') {\n        KTUtil.scrollTo(item, the.options.accordion.autoScrollSpeed);\n      }\n    },\n\n    /**\r\n     * Hide submenu dropdown\r\n     * @returns {KTMenu}\r\n     */\n    hideSubmenuDropdown: function hideSubmenuDropdown(item, classAlso) {\n      // remove submenu activation class\n      if (classAlso) {\n        KTUtil.removeClass(item, 'menu-item-hover');\n        KTUtil.removeClass(item, 'menu-item-active-tab');\n      } // clear timeout\n\n\n      item.removeAttribute('data-hover');\n\n      if (item.getAttribute('data-menu-toggle-class')) {\n        KTUtil.removeClass(body, item.getAttribute('data-menu-toggle-class'));\n      }\n\n      var timeout = item.getAttribute('data-timeout');\n      item.removeAttribute('data-timeout');\n      clearTimeout(timeout);\n    },\n\n    /**\r\n     * Hide submenu dropdowns\r\n     * @returns {KTMenu}\r\n     */\n    hideSubmenuDropdowns: function hideSubmenuDropdowns() {\n      var items;\n\n      if (items = element.querySelectorAll('.menu-item-submenu.menu-item-hover:not(.menu-item-tabs):not([data-menu-toggle=\"tab\"])')) {\n        for (var j = 0, cnt = items.length; j < cnt; j++) {\n          Plugin.hideSubmenuDropdown(items[j], true);\n        }\n      }\n    },\n\n    /**\r\n     * helper functions\r\n     * @returns {KTMenu}\r\n     */\n    showSubmenuDropdown: function showSubmenuDropdown(item) {\n      // close active submenus\n      var list = element.querySelectorAll('.menu-item-submenu.menu-item-hover, .menu-item-submenu.menu-item-active-tab');\n\n      if (list) {\n        for (var i = 0, len = list.length; i < len; i++) {\n          var el = list[i];\n\n          if (item !== el && el.contains(item) === false && item.contains(el) === false) {\n            Plugin.hideSubmenuDropdown(el, true);\n          }\n        }\n      } // add submenu activation class\n\n\n      KTUtil.addClass(item, 'menu-item-hover'); // Change the alignment of submenu is offscreen.\n\n      var submenu = KTUtil.find(item, '.menu-submenu');\n\n      if (submenu && submenu.hasAttribute('data-hor-direction') === false) {\n        if (KTUtil.hasClass(submenu, 'menu-submenu-left')) {\n          submenu.setAttribute('data-hor-direction', 'menu-submenu-left');\n        } else if (KTUtil.hasClass(submenu, 'menu-submenu-right')) {\n          submenu.setAttribute('data-hor-direction', 'menu-submenu-right');\n        }\n      }\n\n      if (submenu && KTUtil.isOffscreen(submenu, 'left', 15) === true) {\n        KTUtil.removeClass(submenu, 'menu-submenu-left');\n        KTUtil.addClass(submenu, 'menu-submenu-right');\n      } else if (submenu && KTUtil.isOffscreen(submenu, 'right', 15) === true) {\n        KTUtil.removeClass(submenu, 'menu-submenu-right');\n        KTUtil.addClass(submenu, 'menu-submenu-left');\n      }\n\n      if (item.getAttribute('data-menu-toggle-class')) {\n        KTUtil.addClass(body, item.getAttribute('data-menu-toggle-class'));\n      }\n    },\n\n    /**\r\n     * Handles submenu slide toggle\r\n     * @returns {KTMenu}\r\n     */\n    createSubmenuDropdownClickDropoff: function createSubmenuDropdownClickDropoff(el) {\n      var query;\n      var zIndex = (query = KTUtil.child(el, '.menu-submenu') ? KTUtil.css(query, 'z-index') : 0) - 1;\n      var dropoff = document.createElement('<div class=\"menu-dropoff\" style=\"background: transparent; position: fixed; top: 0; bottom: 0; left: 0; right: 0; z-index: ' + zIndex + '\"></div>');\n      body.appendChild(dropoff);\n      KTUtil.addEvent(dropoff, 'click', function (e) {\n        e.stopPropagation();\n        e.preventDefault();\n        KTUtil.remove(this);\n        Plugin.hideSubmenuDropdown(el, true);\n      });\n    },\n\n    /**\r\n     * Handles submenu hover toggle\r\n     * @returns {KTMenu}\r\n     */\n    pauseDropdownHover: function pauseDropdownHover(time) {\n      var date = new Date();\n      the.pauseDropdownHoverTime = date.getTime() + time;\n    },\n\n    /**\r\n     * Handles submenu hover toggle\r\n     * @returns {KTMenu}\r\n     */\n    resumeDropdownHover: function resumeDropdownHover() {\n      var date = new Date();\n      return date.getTime() > the.pauseDropdownHoverTime ? true : false;\n    },\n\n    /**\r\n     * Reset menu's current active item\r\n     * @returns {KTMenu}\r\n     */\n    resetActiveItem: function resetActiveItem(item) {\n      var list;\n      var parents;\n      list = element.querySelectorAll('.menu-item-active');\n\n      for (var i = 0, len = list.length; i < len; i++) {\n        var el = list[0];\n        KTUtil.removeClass(el, 'menu-item-active');\n        KTUtil.hide(KTUtil.child(el, '.menu-submenu'));\n        parents = KTUtil.parents(el, '.menu-item-submenu') || [];\n\n        for (var i_ = 0, len_ = parents.length; i_ < len_; i_++) {\n          var el_ = parents[i];\n          KTUtil.removeClass(el_, 'menu-item-open');\n          KTUtil.hide(KTUtil.child(el_, '.menu-submenu'));\n        }\n      } // close open submenus\n\n\n      if (the.options.accordion.expandAll === false) {\n        if (list = element.querySelectorAll('.menu-item-open')) {\n          for (var i = 0, len = list.length; i < len; i++) {\n            KTUtil.removeClass(parents[0], 'menu-item-open');\n          }\n        }\n      }\n    },\n\n    /**\r\n     * Sets menu's active item\r\n     * @returns {KTMenu}\r\n     */\n    setActiveItem: function setActiveItem(item) {\n      // reset current active item\n      Plugin.resetActiveItem();\n      var parents = KTUtil.parents(item, '.menu-item-submenu') || [];\n\n      for (var i = 0, len = parents.length; i < len; i++) {\n        KTUtil.addClass(parents[i], 'menu-item-open');\n      }\n\n      KTUtil.addClass(item, 'menu-item-active');\n    },\n\n    /**\r\n     * Returns page breadcrumbs for the menu's active item\r\n     * @returns {KTMenu}\r\n     */\n    getBreadcrumbs: function getBreadcrumbs(item) {\n      var query;\n      var breadcrumbs = [];\n      var link = KTUtil.child(item, '.menu-link');\n      breadcrumbs.push({\n        text: query = KTUtil.child(link, '.menu-text') ? query.innerHTML : '',\n        title: link.getAttribute('title'),\n        href: link.getAttribute('href')\n      });\n      var parents = KTUtil.parents(item, '.menu-item-submenu');\n\n      for (var i = 0, len = parents.length; i < len; i++) {\n        var submenuLink = KTUtil.child(parents[i], '.menu-link');\n        breadcrumbs.push({\n          text: query = KTUtil.child(submenuLink, '.menu-text') ? query.innerHTML : '',\n          title: submenuLink.getAttribute('title'),\n          href: submenuLink.getAttribute('href')\n        });\n      }\n\n      return breadcrumbs.reverse();\n    },\n\n    /**\r\n     * Returns page title for the menu's active item\r\n     * @returns {KTMenu}\r\n     */\n    getPageTitle: function getPageTitle(item) {\n      var query;\n      return query = KTUtil.child(item, '.menu-text') ? query.innerHTML : '';\n    },\n\n    /**\r\n     * Trigger events\r\n     */\n    eventTrigger: function eventTrigger(name, target, e) {\n      for (var i = 0; i < the.events.length; i++) {\n        var event = the.events[i];\n\n        if (event.name == name) {\n          if (event.one == true) {\n            if (event.fired == false) {\n              the.events[i].fired = true;\n              return event.handler.call(this, target, e);\n            }\n          } else {\n            return event.handler.call(this, target, e);\n          }\n        }\n      }\n    },\n    addEvent: function addEvent(name, handler, one) {\n      the.events.push({\n        name: name,\n        handler: handler,\n        one: one,\n        fired: false\n      });\n    },\n    removeEvent: function removeEvent(name) {\n      if (the.events[name]) {\n        delete the.events[name];\n      }\n    }\n  }; //////////////////////////\n  // ** Public Methods ** //\n  //////////////////////////\n\n  /**\r\n   * Set default options\r\n   */\n\n  the.setDefaults = function (options) {\n    defaultOptions = options;\n  };\n  /**\r\n   * Update scroll\r\n   */\n\n\n  the.scrollUpdate = function () {\n    return Plugin.scrollUpdate();\n  };\n  /**\r\n   * Re-init scroll\r\n   */\n\n\n  the.scrollReInit = function () {\n    return Plugin.scrollInit();\n  };\n  /**\r\n   * Scroll top\r\n   */\n\n\n  the.scrollTop = function () {\n    return Plugin.scrollTop();\n  };\n  /**\r\n   * Set active menu item\r\n   */\n\n\n  the.setActiveItem = function (item) {\n    return Plugin.setActiveItem(item);\n  };\n\n  the.reload = function () {\n    return Plugin.reload();\n  };\n\n  the.update = function (options) {\n    return Plugin.update(options);\n  };\n  /**\r\n   * Set breadcrumb for menu item\r\n   */\n\n\n  the.getBreadcrumbs = function (item) {\n    return Plugin.getBreadcrumbs(item);\n  };\n  /**\r\n   * Set page title for menu item\r\n   */\n\n\n  the.getPageTitle = function (item) {\n    return Plugin.getPageTitle(item);\n  };\n  /**\r\n   * Get submenu mode\r\n   */\n\n\n  the.getSubmenuMode = function (el) {\n    return Plugin.getSubmenuMode(el);\n  };\n  /**\r\n   * Hide dropdown\r\n   * @returns {Object}\r\n   */\n\n\n  the.hideDropdown = function (item) {\n    Plugin.hideSubmenuDropdown(item, true);\n  };\n  /**\r\n   * Hide dropdowns\r\n   * @returns {Object}\r\n   */\n\n\n  the.hideDropdowns = function () {\n    Plugin.hideSubmenuDropdowns();\n  };\n  /**\r\n   * Disable menu for given time\r\n   * @returns {Object}\r\n   */\n\n\n  the.pauseDropdownHover = function (time) {\n    Plugin.pauseDropdownHover(time);\n  };\n  /**\r\n   * Disable menu for given time\r\n   * @returns {Object}\r\n   */\n\n\n  the.resumeDropdownHover = function () {\n    return Plugin.resumeDropdownHover();\n  };\n  /**\r\n   * Register event\r\n   */\n\n\n  the.on = function (name, handler) {\n    return Plugin.addEvent(name, handler);\n  };\n\n  the.off = function (name) {\n    return Plugin.removeEvent(name);\n  };\n\n  the.one = function (name, handler) {\n    return Plugin.addEvent(name, handler, true);\n  }; ///////////////////////////////\n  // ** Plugin Construction ** //\n  ///////////////////////////////\n  // Run plugin\n\n\n  Plugin.construct.apply(the, [options]); // Handle plugin on window resize\n\n  KTUtil.addResizeHandler(function () {\n    if (init) {\n      the.reload();\n    }\n  }); // Init done\n\n  init = true; // Return plugin instance\n\n  return the;\n}; // webpack support\n\n\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTMenu;\n} // Plugin global lazy initialization\n\n\ndocument.addEventListener(\"click\", function (e) {\n  var body = KTUtil.getByTagName('body')[0];\n  var query;\n\n  if (query = body.querySelectorAll('.menu-nav .menu-item.menu-item-submenu.menu-item-hover:not(.menu-item-tabs)[data-menu-toggle=\"click\"]')) {\n    for (var i = 0, len = query.length; i < len; i++) {\n      var element = query[i].closest('.menu-nav').parentNode;\n\n      if (element) {\n        var the = KTUtil.data(element).get('menu');\n\n        if (!the) {\n          break;\n        }\n\n        if (!the || the.getSubmenuMode() !== 'dropdown') {\n          break;\n        }\n\n        if (e.target !== element && element.contains(e.target) === false) {\n          the.hideDropdowns();\n        }\n      }\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/components/menu.js\n");

/***/ }),

/***/ "./resources/metronic/js/components/offcanvas.js":
/*!*******************************************************!*\
  !*** ./resources/metronic/js/components/offcanvas.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" // Component Definition\n\nvar KTOffcanvas = function KTOffcanvas(elementId, options) {\n  // Main object\n  var the = this;\n  var init = false; // Get element object\n\n  var element = KTUtil.getById(elementId);\n  var body = KTUtil.getBody();\n\n  if (!element) {\n    return;\n  } // Default options\n\n\n  var defaultOptions = {\n    attrCustom: ''\n  }; ////////////////////////////\n  // ** Private Methods  ** //\n  ////////////////////////////\n\n  var Plugin = {\n    construct: function construct(options) {\n      if (KTUtil.data(element).has('offcanvas')) {\n        the = KTUtil.data(element).get('offcanvas');\n      } else {\n        // Reset offcanvas\n        Plugin.init(options); // Build offcanvas\n\n        Plugin.build();\n        KTUtil.data(element).set('offcanvas', the);\n      }\n\n      return the;\n    },\n    init: function init(options) {\n      the.events = []; // merge default and user defined options\n\n      the.options = KTUtil.deepExtend({}, defaultOptions, options);\n      the.classBase = the.options.baseClass;\n      the.attrCustom = the.options.attrCustom;\n      the.classShown = the.classBase + '-on';\n      the.classOverlay = the.classBase + '-overlay';\n      the.target;\n      the.state = KTUtil.hasClass(element, the.classShown) ? 'shown' : 'hidden';\n    },\n    build: function build() {\n      // offcanvas toggle\n      if (the.options.toggleBy) {\n        if (typeof the.options.toggleBy === 'string') {\n          KTUtil.addEvent(KTUtil.getById(the.options.toggleBy), 'click', function (e) {\n            e.preventDefault();\n            the.target = this;\n            Plugin.toggle();\n          });\n        } else if (the.options.toggleBy && the.options.toggleBy[0]) {\n          if (the.options.toggleBy[0].target) {\n            for (var i in the.options.toggleBy) {\n              KTUtil.addEvent(KTUtil.getById(the.options.toggleBy[i].target), 'click', function (e) {\n                e.preventDefault();\n                the.target = this;\n                Plugin.toggle();\n              });\n            }\n          } else {\n            for (var i in the.options.toggleBy) {\n              KTUtil.addEvent(KTUtil.getById(the.options.toggleBy[i]), 'click', function (e) {\n                e.preventDefault();\n                the.target = this;\n                Plugin.toggle();\n              });\n            }\n          }\n        } else if (the.options.toggleBy && the.options.toggleBy.target) {\n          KTUtil.addEvent(KTUtil.getById(the.options.toggleBy.target), 'click', function (e) {\n            e.preventDefault();\n            the.target = this;\n            Plugin.toggle();\n          });\n        }\n      } // offcanvas close\n\n\n      var closeBy = KTUtil.getById(the.options.closeBy);\n\n      if (closeBy) {\n        KTUtil.addEvent(closeBy, 'click', function (e) {\n          e.preventDefault();\n          the.target = this;\n          Plugin.hide();\n        });\n      }\n    },\n    isShown: function isShown() {\n      return the.state == 'shown' ? true : false;\n    },\n    toggle: function toggle() {\n      ;\n      Plugin.eventTrigger('toggle');\n\n      if (the.state == 'shown') {\n        Plugin.hide();\n      } else {\n        Plugin.show();\n      }\n    },\n    show: function show() {\n      if (the.state == 'shown') {\n        return;\n      }\n\n      Plugin.eventTrigger('beforeShow');\n      Plugin.toggleClass('show'); // Offcanvas panel\n\n      KTUtil.attr(body, 'data-offcanvas-' + the.classBase, 'on');\n      KTUtil.addClass(element, the.classShown);\n\n      if (the.attrCustom.length > 0) {\n        KTUtil.attr(body, 'data-offcanvas-' + the.classCustom, 'on'); //KTUtil.addClass(body, the.classCustom);\n      }\n\n      the.state = 'shown';\n\n      if (the.options.overlay) {\n        the.overlay = KTUtil.insertAfter(document.createElement('DIV'), element);\n        KTUtil.addClass(the.overlay, the.classOverlay);\n        KTUtil.addEvent(the.overlay, 'click', function (e) {\n          //e.stopPropagation();\n          e.preventDefault();\n          Plugin.hide(the.target);\n        });\n      }\n\n      Plugin.eventTrigger('afterShow');\n    },\n    hide: function hide() {\n      if (the.state == 'hidden') {\n        return;\n      }\n\n      Plugin.eventTrigger('beforeHide');\n      Plugin.toggleClass('hide');\n      KTUtil.removeAttr(body, 'data-offcanvas-' + the.classBase);\n      KTUtil.removeClass(element, the.classShown);\n\n      if (the.attrCustom.length > 0) {\n        KTUtil.removeAttr(body, 'data-offcanvas-' + the.attrCustom);\n      }\n\n      the.state = 'hidden';\n\n      if (the.options.overlay && the.overlay) {\n        KTUtil.remove(the.overlay);\n      }\n\n      Plugin.eventTrigger('afterHide');\n    },\n    toggleClass: function toggleClass(mode) {\n      var id = KTUtil.attr(the.target, 'id');\n      var toggleBy;\n\n      if (the.options.toggleBy && the.options.toggleBy[0] && the.options.toggleBy[0].target) {\n        for (var i in the.options.toggleBy) {\n          if (the.options.toggleBy[i].target === id) {\n            toggleBy = the.options.toggleBy[i];\n          }\n        }\n      } else if (the.options.toggleBy && the.options.toggleBy.target) {\n        toggleBy = the.options.toggleBy;\n      }\n\n      if (toggleBy) {\n        var el = KTUtil.getById(toggleBy.target);\n\n        if (mode === 'show') {\n          KTUtil.addClass(el, toggleBy.state);\n        }\n\n        if (mode === 'hide') {\n          KTUtil.removeClass(el, toggleBy.state);\n        }\n      }\n    },\n    eventTrigger: function eventTrigger(name, args) {\n      for (var i = 0; i < the.events.length; i++) {\n        var event = the.events[i];\n\n        if (event.name == name) {\n          if (event.one == true) {\n            if (event.fired == false) {\n              the.events[i].fired = true;\n              return event.handler.call(this, the, args);\n            }\n          } else {\n            return event.handler.call(this, the, args);\n          }\n        }\n      }\n    },\n    addEvent: function addEvent(name, handler, one) {\n      the.events.push({\n        name: name,\n        handler: handler,\n        one: one,\n        fired: false\n      });\n    }\n  }; //////////////////////////\n  // ** Public Methods ** //\n  //////////////////////////\n\n  /**\r\n   * Set default options\r\n   * @param options\r\n   */\n\n  the.setDefaults = function (options) {\n    defaultOptions = options;\n  };\n  /**\r\n   * Check if canvas is shown\r\n   * @returns {boolean}\r\n   */\n\n\n  the.isShown = function () {\n    return Plugin.isShown();\n  };\n  /**\r\n   * Set to hide the canvas\r\n   */\n\n\n  the.hide = function () {\n    return Plugin.hide();\n  };\n  /**\r\n   * Set to show the canvas\r\n   */\n\n\n  the.show = function () {\n    return Plugin.show();\n  };\n  /**\r\n   * Attach event\r\n   * @param name\r\n   * @param handler\r\n   */\n\n\n  the.on = function (name, handler) {\n    return Plugin.addEvent(name, handler);\n  };\n  /**\r\n   * Attach event that will be fired once\r\n   * @param name\r\n   * @param handler\r\n   */\n\n\n  the.one = function (name, handler) {\n    return Plugin.addEvent(name, handler, true);\n  }; ///////////////////////////////\n  // ** Plugin Construction ** //\n  ///////////////////////////////\n  // Run plugin\n\n\n  Plugin.construct.apply(the, [options]); // Init done\n\n  init = true; // Return plugin instance\n\n  return the;\n}; // webpack support\n\n\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTOffcanvas;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/components/offcanvas.js\n");

/***/ }),

/***/ "./resources/metronic/js/components/scrolltop.js":
/*!*******************************************************!*\
  !*** ./resources/metronic/js/components/scrolltop.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" // Component Definition\n\nvar KTScrolltop = function KTScrolltop(elementId, options) {\n  // Main object\n  var the = this;\n  var init = false; // Get element object\n\n  var element = KTUtil.getById(elementId);\n  var body = KTUtil.getBody();\n\n  if (!element) {\n    return;\n  } // Default options\n\n\n  var defaultOptions = {\n    offset: 300,\n    speed: 6000\n  }; ////////////////////////////\n  // ** Private Methods  ** //\n  ////////////////////////////\n\n  var Plugin = {\n    /**\r\n     * Run plugin\r\n     * @returns {mscrolltop}\r\n     */\n    construct: function construct(options) {\n      if (KTUtil.data(element).has('scrolltop')) {\n        the = KTUtil.data(element).get('scrolltop');\n      } else {\n        // reset scrolltop\n        Plugin.init(options); // build scrolltop\n\n        Plugin.build();\n        KTUtil.data(element).set('scrolltop', the);\n      }\n\n      return the;\n    },\n\n    /**\r\n     * Handles subscrolltop click toggle\r\n     * @returns {mscrolltop}\r\n     */\n    init: function init(options) {\n      the.events = []; // merge default and user defined options\n\n      the.options = KTUtil.deepExtend({}, defaultOptions, options);\n    },\n    build: function build() {\n      var timer;\n      window.addEventListener('scroll', function () {\n        KTUtil.throttle(timer, function () {\n          Plugin.handle();\n        }, 200);\n      }); // handle button click\n\n      KTUtil.addEvent(element, 'click', Plugin.scroll);\n    },\n\n    /**\r\n     * Handles scrolltop click scrollTop\r\n     */\n    handle: function handle() {\n      var pos = KTUtil.getScrollTop(); // current vertical position\n\n      if (pos > the.options.offset) {\n        if (body.hasAttribute('data-scrolltop') === false) {\n          body.setAttribute('data-scrolltop', 'on');\n        }\n      } else {\n        if (body.hasAttribute('data-scrolltop') === true) {\n          body.removeAttribute('data-scrolltop');\n        }\n      }\n    },\n\n    /**\r\n     * Handles scrolltop click scrollTop\r\n     */\n    scroll: function scroll(e) {\n      e.preventDefault();\n      KTUtil.scrollTop(0, the.options.speed);\n    },\n\n    /**\r\n     * Trigger events\r\n     */\n    eventTrigger: function eventTrigger(name, args) {\n      for (var i = 0; i < the.events.length; i++) {\n        var event = the.events[i];\n\n        if (event.name == name) {\n          if (event.one == true) {\n            if (event.fired == false) {\n              the.events[i].fired = true;\n              return event.handler.call(this, the, args);\n            }\n          } else {\n            return event.handler.call(this, the, args);\n          }\n        }\n      }\n    },\n    addEvent: function addEvent(name, handler, one) {\n      the.events.push({\n        name: name,\n        handler: handler,\n        one: one,\n        fired: false\n      });\n    }\n  }; //////////////////////////\n  // ** Public Methods ** //\n  //////////////////////////\n\n  /**\r\n   * Set default options\r\n   */\n\n  the.setDefaults = function (options) {\n    defaultOptions = options;\n  };\n  /**\r\n   * Get subscrolltop mode\r\n   */\n\n\n  the.on = function (name, handler) {\n    return Plugin.addEvent(name, handler);\n  };\n  /**\r\n   * Set scrolltop content\r\n   * @returns {mscrolltop}\r\n   */\n\n\n  the.one = function (name, handler) {\n    return Plugin.addEvent(name, handler, true);\n  }; ///////////////////////////////\n  // ** Plugin Construction ** //\n  ///////////////////////////////\n  // Run plugin\n\n\n  Plugin.construct.apply(the, [options]); // Init done\n\n  init = true; // Return plugin instance\n\n  return the;\n}; // webpack support\n\n\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTScrolltop;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/components/scrolltop.js\n");

/***/ }),

/***/ "./resources/metronic/js/components/toggle.js":
/*!****************************************************!*\
  !*** ./resources/metronic/js/components/toggle.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" // Component Definition\n\nvar KTToggle = function KTToggle(toggleElement, targetElement, options) {\n  // Main object\n  var the = this;\n  var init = false; // Get element object\n\n  var element = toggleElement;\n  var target = targetElement;\n\n  if (!element) {\n    return;\n  } // Default options\n\n\n  var defaultOptions = {\n    targetToggleMode: 'class' // class|attribute\n\n  }; ////////////////////////////\n  // ** Private Methods  ** //\n  ////////////////////////////\n\n  var Plugin = {\n    /**\r\n     * Construct\r\n     */\n    construct: function construct(options) {\n      if (KTUtil.data(element).has('toggle')) {\n        the = KTUtil.data(element).get('toggle');\n      } else {\n        // reset menu\n        Plugin.init(options); // build menu\n\n        Plugin.build();\n        KTUtil.data(element).set('toggle', the);\n      }\n\n      return the;\n    },\n\n    /**\r\n     * Handles subtoggle click toggle\r\n     */\n    init: function init(options) {\n      the.element = element;\n      the.events = []; // Merge default and user defined options\n\n      the.options = KTUtil.deepExtend({}, defaultOptions, options); //alert(the.options.target.tagName);\n\n      the.target = target;\n      the.targetState = the.options.targetState;\n      the.toggleState = the.options.toggleState;\n\n      if (the.options.targetToggleMode == 'class') {\n        the.state = KTUtil.hasClasses(the.target, the.targetState) ? 'on' : 'off';\n      } else {\n        the.state = KTUtil.hasAttr(the.target, 'data-' + the.targetState) ? KTUtil.attr(the.target, 'data-' + the.targetState) : 'off';\n      }\n    },\n\n    /**\r\n     * Setup toggle\r\n     */\n    build: function build() {\n      KTUtil.addEvent(element, 'mouseup', Plugin.toggle);\n    },\n\n    /**\r\n     * Handles offcanvas click toggle\r\n     */\n    toggle: function toggle(e) {\n      Plugin.eventTrigger('beforeToggle');\n\n      if (the.state == 'off') {\n        Plugin.toggleOn();\n      } else {\n        Plugin.toggleOff();\n      }\n\n      Plugin.eventTrigger('afterToggle');\n      e.preventDefault();\n      return the;\n    },\n\n    /**\r\n     * Handles toggle click toggle\r\n     */\n    toggleOn: function toggleOn() {\n      Plugin.eventTrigger('beforeOn');\n\n      if (the.options.targetToggleMode == 'class') {\n        KTUtil.addClass(the.target, the.targetState);\n      } else {\n        KTUtil.attr(the.target, 'data-' + the.targetState, 'on');\n      }\n\n      if (the.toggleState) {\n        KTUtil.addClass(element, the.toggleState);\n      }\n\n      the.state = 'on';\n      Plugin.eventTrigger('afterOn');\n      Plugin.eventTrigger('toggle');\n      return the;\n    },\n\n    /**\r\n     * Handles toggle click toggle\r\n     */\n    toggleOff: function toggleOff() {\n      Plugin.eventTrigger('beforeOff');\n\n      if (the.options.targetToggleMode == 'class') {\n        KTUtil.removeClass(the.target, the.targetState);\n      } else {\n        KTUtil.removeAttr(the.target, 'data-' + the.targetState);\n      }\n\n      if (the.toggleState) {\n        KTUtil.removeClass(element, the.toggleState);\n      }\n\n      the.state = 'off';\n      Plugin.eventTrigger('afterOff');\n      Plugin.eventTrigger('toggle');\n      return the;\n    },\n\n    /**\r\n     * Trigger events\r\n     */\n    eventTrigger: function eventTrigger(name) {\n      for (var i = 0; i < the.events.length; i++) {\n        var event = the.events[i];\n\n        if (event.name == name) {\n          if (event.one == true) {\n            if (event.fired == false) {\n              the.events[i].fired = true;\n              return event.handler.call(this, the);\n            }\n          } else {\n            return event.handler.call(this, the);\n          }\n        }\n      }\n    },\n    addEvent: function addEvent(name, handler, one) {\n      the.events.push({\n        name: name,\n        handler: handler,\n        one: one,\n        fired: false\n      });\n      return the;\n    }\n  }; //////////////////////////\n  // ** Public Methods ** //\n  //////////////////////////\n\n  /**\r\n   * Set default options\r\n   */\n\n  the.setDefaults = function (options) {\n    defaultOptions = options;\n  };\n  /**\r\n   * Get toggle state\r\n   */\n\n\n  the.getState = function () {\n    return the.state;\n  };\n  /**\r\n   * Toggle\r\n   */\n\n\n  the.toggle = function () {\n    return Plugin.toggle();\n  };\n  /**\r\n   * Toggle on\r\n   */\n\n\n  the.toggleOn = function () {\n    return Plugin.toggleOn();\n  };\n  /**\r\n   * Toggle off\r\n   */\n\n\n  the.toggleOff = function () {\n    return Plugin.toggleOff();\n  };\n  /**\r\n   * Attach event\r\n   * @returns {KTToggle}\r\n   */\n\n\n  the.on = function (name, handler) {\n    return Plugin.addEvent(name, handler);\n  };\n  /**\r\n   * Attach event that will be fired once\r\n   * @returns {KTToggle}\r\n   */\n\n\n  the.one = function (name, handler) {\n    return Plugin.addEvent(name, handler, true);\n  }; // Construct plugin\n\n\n  Plugin.construct.apply(the, [options]);\n  return the;\n}; // webpack support\n\n\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTToggle;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/components/toggle.js\n");

/***/ }),

/***/ "./resources/metronic/js/components/util.js":
/*!**************************************************!*\
  !*** ./resources/metronic/js/components/util.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\r\n * @class KTUtil  base utilize class that privides helper functions\r\n */\n// Polyfills\n\n/**\r\n * Element.matches() polyfill (simple version)\r\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/matches#Polyfill\r\n */\n\nif (!Element.prototype.matches) {\n  Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\n}\n/**\r\n * Element.closest() polyfill\r\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/closest#Polyfill\r\n */\n\n\nif (!Element.prototype.closest) {\n  if (!Element.prototype.matches) {\n    Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\n  }\n\n  Element.prototype.closest = function (s) {\n    var el = this;\n    var ancestor = this;\n    if (!document.documentElement.contains(el)) return null;\n\n    do {\n      if (ancestor.matches(s)) return ancestor;\n      ancestor = ancestor.parentElement;\n    } while (ancestor !== null);\n\n    return null;\n  };\n}\n/**\r\n * ChildNode.remove() polyfill\r\n * https://gomakethings.com/removing-an-element-from-the-dom-the-es6-way/\r\n * @author Chris Ferdinandi\r\n * @license MIT\r\n */\n\n\n(function (elem) {\n  for (var i = 0; i < elem.length; i++) {\n    if (!window[elem[i]] || 'remove' in window[elem[i]].prototype) continue;\n\n    window[elem[i]].prototype.remove = function () {\n      this.parentNode.removeChild(this);\n    };\n  }\n})(['Element', 'CharacterData', 'DocumentType']); //\n// requestAnimationFrame polyfill by Erik Möller.\n//  With fixes from Paul Irish and Tino Zijdel\n//\n//  http://paulirish.com/2011/requestanimationframe-for-smart-animating/\n//  http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating\n//\n//  MIT license\n//\n\n\n(function () {\n  var lastTime = 0;\n  var vendors = ['webkit', 'moz'];\n\n  for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\n    window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];\n    window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] || window[vendors[x] + 'CancelRequestAnimationFrame'];\n  }\n\n  if (!window.requestAnimationFrame) window.requestAnimationFrame = function (callback) {\n    var currTime = new Date().getTime();\n    var timeToCall = Math.max(0, 16 - (currTime - lastTime));\n    var id = window.setTimeout(function () {\n      callback(currTime + timeToCall);\n    }, timeToCall);\n    lastTime = currTime + timeToCall;\n    return id;\n  };\n  if (!window.cancelAnimationFrame) window.cancelAnimationFrame = function (id) {\n    clearTimeout(id);\n  };\n})(); // Source: https://github.com/jserz/js_piece/blob/master/DOM/ParentNode/prepend()/prepend().md\n\n\n(function (arr) {\n  arr.forEach(function (item) {\n    if (item.hasOwnProperty('prepend')) {\n      return;\n    }\n\n    Object.defineProperty(item, 'prepend', {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: function prepend() {\n        var argArr = Array.prototype.slice.call(arguments),\n            docFrag = document.createDocumentFragment();\n        argArr.forEach(function (argItem) {\n          var isNode = argItem instanceof Node;\n          docFrag.appendChild(isNode ? argItem : document.createTextNode(String(argItem)));\n        });\n        this.insertBefore(docFrag, this.firstChild);\n      }\n    });\n  });\n})([Element.prototype, Document.prototype, DocumentFragment.prototype]); // getAttributeNames\n\n\nif (Element.prototype.getAttributeNames == undefined) {\n  Element.prototype.getAttributeNames = function () {\n    var attributes = this.attributes;\n    var length = attributes.length;\n    var result = new Array(length);\n\n    for (var i = 0; i < length; i++) {\n      result[i] = attributes[i].name;\n    }\n\n    return result;\n  };\n} // Global variables\n\n\nwindow.KTUtilElementDataStore = {};\nwindow.KTUtilElementDataStoreID = 0;\nwindow.KTUtilDelegatedEventHandlers = {};\n\nvar KTUtil = function () {\n  var resizeHandlers = [];\n  /** @type {object} breakpoints The device width breakpoints **/\n\n  var breakpoints = {\n    sm: 544,\n    // Small screen / phone\n    md: 768,\n    // Medium screen / tablet\n    lg: 992,\n    // Large screen / desktop\n    xl: 1200 // Extra large screen / wide desktop\n\n  };\n  /**\r\n   * Handle window resize event with some\r\n   * delay to attach event handlers upon resize complete\r\n   */\n\n  var _windowResizeHandler = function _windowResizeHandler() {\n    var _runResizeHandlers = function _runResizeHandlers() {\n      // reinitialize other subscribed elements\n      for (var i = 0; i < resizeHandlers.length; i++) {\n        var each = resizeHandlers[i];\n        each.call();\n      }\n    };\n\n    var timer;\n    window.addEventListener('resize', function () {\n      KTUtil.throttle(timer, function () {\n        _runResizeHandlers();\n      }, 200);\n    });\n  };\n\n  return {\n    /**\r\n     * Class main initializer.\r\n     * @param {object} settings.\r\n     * @returns null\r\n     */\n    //main function to initiate the theme\n    init: function init(settings) {\n      if (settings && settings.breakpoints) {\n        breakpoints = settings.breakpoints;\n      }\n\n      _windowResizeHandler();\n    },\n\n    /**\r\n     * Adds window resize event handler.\r\n     * @param {function} callback function.\r\n     */\n    addResizeHandler: function addResizeHandler(callback) {\n      resizeHandlers.push(callback);\n    },\n\n    /**\r\n     * Removes window resize event handler.\r\n     * @param {function} callback function.\r\n     */\n    removeResizeHandler: function removeResizeHandler(callback) {\n      for (var i = 0; i < resizeHandlers.length; i++) {\n        if (callback === resizeHandlers[i]) {\n          delete resizeHandlers[i];\n        }\n      }\n    },\n\n    /**\r\n     * Trigger window resize handlers.\r\n     */\n    runResizeHandlers: function runResizeHandlers() {\n      _runResizeHandlers();\n    },\n    resize: function resize() {\n      if (typeof Event === 'function') {\n        // modern browsers\n        window.dispatchEvent(new Event('resize'));\n      } else {\n        // for IE and other old browsers\n        // causes deprecation warning on modern browsers\n        var evt = window.document.createEvent('UIEvents');\n        evt.initUIEvent('resize', true, false, window, 0);\n        window.dispatchEvent(evt);\n      }\n    },\n\n    /**\r\n     * Get GET parameter value from URL.\r\n     * @param {string} paramName Parameter name.\r\n     * @returns {string}\r\n     */\n    getURLParam: function getURLParam(paramName) {\n      var searchString = window.location.search.substring(1),\n          i,\n          val,\n          params = searchString.split(\"&\");\n\n      for (i = 0; i < params.length; i++) {\n        val = params[i].split(\"=\");\n\n        if (val[0] == paramName) {\n          return unescape(val[1]);\n        }\n      }\n\n      return null;\n    },\n\n    /**\r\n     * Checks whether current device is mobile touch.\r\n     * @returns {boolean}\r\n     */\n    isMobileDevice: function isMobileDevice() {\n      var test = this.getViewPort().width < this.getBreakpoint('lg') ? true : false;\n\n      if (test === false) {\n        // For use within normal web clients\n        test = navigator.userAgent.match(/iPad/i) != null;\n      }\n\n      return test;\n    },\n\n    /**\r\n     * Checks whether current device is desktop.\r\n     * @returns {boolean}\r\n     */\n    isDesktopDevice: function isDesktopDevice() {\n      return KTUtil.isMobileDevice() ? false : true;\n    },\n\n    /**\r\n     * Gets browser window viewport size. Ref:\r\n     * http://andylangton.co.uk/articles/javascript/get-viewport-size-javascript/\r\n     * @returns {object}\r\n     */\n    getViewPort: function getViewPort() {\n      var e = window,\n          a = 'inner';\n\n      if (!('innerWidth' in window)) {\n        a = 'client';\n        e = document.documentElement || document.body;\n      }\n\n      return {\n        width: e[a + 'Width'],\n        height: e[a + 'Height']\n      };\n    },\n\n    /**\r\n     * Checks whether given device mode is currently activated.\r\n     * @param {string} mode Responsive mode name(e.g: desktop,\r\n     *     desktop-and-tablet, tablet, tablet-and-mobile, mobile)\r\n     * @returns {boolean}\r\n     */\n    isInResponsiveRange: function isInResponsiveRange(mode) {\n      var breakpoint = this.getViewPort().width;\n\n      if (mode == 'general') {\n        return true;\n      } else if (mode == 'desktop' && breakpoint >= this.getBreakpoint('lg') + 1) {\n        return true;\n      } else if (mode == 'tablet' && breakpoint >= this.getBreakpoint('md') + 1 && breakpoint < this.getBreakpoint('lg')) {\n        return true;\n      } else if (mode == 'mobile' && breakpoint <= this.getBreakpoint('md')) {\n        return true;\n      } else if (mode == 'desktop-and-tablet' && breakpoint >= this.getBreakpoint('md') + 1) {\n        return true;\n      } else if (mode == 'tablet-and-mobile' && breakpoint <= this.getBreakpoint('lg')) {\n        return true;\n      } else if (mode == 'minimal-desktop-and-below' && breakpoint <= this.getBreakpoint('xl')) {\n        return true;\n      }\n\n      return false;\n    },\n\n    /**\r\n           * Checks whether given device mode is currently activated.\r\n           * @param {string} mode Responsive mode name(e.g: desktop,\r\n           *     desktop-and-tablet, tablet, tablet-and-mobile, mobile)\r\n           * @returns {boolean}\r\n           */\n    isBreakpointUp: function isBreakpointUp(mode) {\n      var width = this.getViewPort().width;\n      var breakpoint = this.getBreakpoint(mode);\n      return width >= breakpoint;\n    },\n    isBreakpointDown: function isBreakpointDown(mode) {\n      var width = this.getViewPort().width;\n      var breakpoint = this.getBreakpoint(mode);\n      return width < breakpoint;\n    },\n\n    /**\r\n     * Generates unique ID for give prefix.\r\n     * @param {string} prefix Prefix for generated ID\r\n     * @returns {boolean}\r\n     */\n    getUniqueID: function getUniqueID(prefix) {\n      return prefix + Math.floor(Math.random() * new Date().getTime());\n    },\n\n    /**\r\n     * Gets window width for give breakpoint mode.\r\n     * @param {string} mode Responsive mode name(e.g: xl, lg, md, sm)\r\n     * @returns {number}\r\n     */\n    getBreakpoint: function getBreakpoint(mode) {\n      return breakpoints[mode];\n    },\n\n    /**\r\n     * Checks whether object has property matchs given key path.\r\n     * @param {object} obj Object contains values paired with given key path\r\n     * @param {string} keys Keys path seperated with dots\r\n     * @returns {object}\r\n     */\n    isset: function isset(obj, keys) {\n      var stone;\n      keys = keys || '';\n\n      if (keys.indexOf('[') !== -1) {\n        throw new Error('Unsupported object path notation.');\n      }\n\n      keys = keys.split('.');\n\n      do {\n        if (obj === undefined) {\n          return false;\n        }\n\n        stone = keys.shift();\n\n        if (!obj.hasOwnProperty(stone)) {\n          return false;\n        }\n\n        obj = obj[stone];\n      } while (keys.length);\n\n      return true;\n    },\n\n    /**\r\n     * Gets highest z-index of the given element parents\r\n     * @param {object} el jQuery element object\r\n     * @returns {number}\r\n     */\n    getHighestZindex: function getHighestZindex(el) {\n      var position, value;\n\n      while (el && el !== document) {\n        // Ignore z-index if position is set to a value where z-index is ignored by the browser\n        // This makes behavior of this function consistent across browsers\n        // WebKit always returns auto if the element is positioned\n        position = KTUtil.css(el, 'position');\n\n        if (position === \"absolute\" || position === \"relative\" || position === \"fixed\") {\n          // IE returns 0 when zIndex is not specified\n          // other browsers return a string\n          // we ignore the case of nested elements with an explicit value of 0\n          // <div style=\"z-index: -10;\"><div style=\"z-index: 0;\"></div></div>\n          value = parseInt(KTUtil.css(el, 'z-index'));\n\n          if (!isNaN(value) && value !== 0) {\n            return value;\n          }\n        }\n\n        el = el.parentNode;\n      }\n\n      return null;\n    },\n\n    /**\r\n     * Checks whether the element has any parent with fixed positionfreg\r\n     * @param {object} el jQuery element object\r\n     * @returns {boolean}\r\n     */\n    hasFixedPositionedParent: function hasFixedPositionedParent(el) {\n      var position;\n\n      while (el && el !== document) {\n        position = KTUtil.css(el, 'position');\n\n        if (position === \"fixed\") {\n          return true;\n        }\n\n        el = el.parentNode;\n      }\n\n      return false;\n    },\n\n    /**\r\n     * Simulates delay\r\n     */\n    sleep: function sleep(milliseconds) {\n      var start = new Date().getTime();\n\n      for (var i = 0; i < 1e7; i++) {\n        if (new Date().getTime() - start > milliseconds) {\n          break;\n        }\n      }\n    },\n\n    /**\r\n     * Gets randomly generated integer value within given min and max range\r\n     * @param {number} min Range start value\r\n     * @param {number} max Range end value\r\n     * @returns {number}\r\n     */\n    getRandomInt: function getRandomInt(min, max) {\n      return Math.floor(Math.random() * (max - min + 1)) + min;\n    },\n\n    /**\r\n     * Checks whether Angular library is included\r\n     * @returns {boolean}\r\n     */\n    isAngularVersion: function isAngularVersion() {\n      return window.Zone !== undefined ? true : false;\n    },\n    // Deep extend:  $.extend(true, {}, objA, objB);\n    deepExtend: function deepExtend(out) {\n      out = out || {};\n\n      for (var i = 1; i < arguments.length; i++) {\n        var obj = arguments[i];\n        if (!obj) continue;\n\n        for (var key in obj) {\n          if (!obj.hasOwnProperty(key)) {\n            continue;\n          } // based on https://javascriptweblog.wordpress.com/2011/08/08/fixing-the-javascript-typeof-operator/\n\n\n          if (Object.prototype.toString.call(obj[key]) === '[object Object]') {\n            out[key] = KTUtil.deepExtend(out[key], obj[key]);\n            continue;\n          }\n\n          out[key] = obj[key];\n        }\n      }\n\n      return out;\n    },\n    // extend:  $.extend({}, objA, objB);\n    extend: function extend(out) {\n      out = out || {};\n\n      for (var i = 1; i < arguments.length; i++) {\n        if (!arguments[i]) continue;\n\n        for (var key in arguments[i]) {\n          if (arguments[i].hasOwnProperty(key)) out[key] = arguments[i][key];\n        }\n      }\n\n      return out;\n    },\n    getById: function getById(el) {\n      if (typeof el === 'string') {\n        return document.getElementById(el);\n      } else {\n        return el;\n      }\n    },\n    getByTag: function getByTag(query) {\n      return document.getElementsByTagName(query);\n    },\n    getByTagName: function getByTagName(query) {\n      return document.getElementsByTagName(query);\n    },\n    getByClass: function getByClass(query) {\n      return document.getElementsByClassName(query);\n    },\n    getBody: function getBody() {\n      return document.getElementsByTagName('body')[0];\n    },\n\n    /**\r\n     * Checks whether the element has given classes\r\n     * @param {object} el jQuery element object\r\n     * @param {string} Classes string\r\n     * @returns {boolean}\r\n     */\n    hasClasses: function hasClasses(el, classes) {\n      if (!el) {\n        return;\n      }\n\n      var classesArr = classes.split(\" \");\n\n      for (var i = 0; i < classesArr.length; i++) {\n        if (KTUtil.hasClass(el, KTUtil.trim(classesArr[i])) == false) {\n          return false;\n        }\n      }\n\n      return true;\n    },\n    hasClass: function hasClass(el, className) {\n      if (!el) {\n        return;\n      }\n\n      return el.classList ? el.classList.contains(className) : new RegExp('\\\\b' + className + '\\\\b').test(el.className);\n    },\n    addClass: function addClass(el, className) {\n      if (!el || typeof className === 'undefined') {\n        return;\n      }\n\n      var classNames = className.split(' ');\n\n      if (el.classList) {\n        for (var i = 0; i < classNames.length; i++) {\n          if (classNames[i] && classNames[i].length > 0) {\n            el.classList.add(KTUtil.trim(classNames[i]));\n          }\n        }\n      } else if (!KTUtil.hasClass(el, className)) {\n        for (var x = 0; x < classNames.length; x++) {\n          el.className += ' ' + KTUtil.trim(classNames[x]);\n        }\n      }\n    },\n    removeClass: function removeClass(el, className) {\n      if (!el || typeof className === 'undefined') {\n        return;\n      }\n\n      var classNames = className.split(' ');\n\n      if (el.classList) {\n        for (var i = 0; i < classNames.length; i++) {\n          el.classList.remove(KTUtil.trim(classNames[i]));\n        }\n      } else if (KTUtil.hasClass(el, className)) {\n        for (var x = 0; x < classNames.length; x++) {\n          el.className = el.className.replace(new RegExp('\\\\b' + KTUtil.trim(classNames[x]) + '\\\\b', 'g'), '');\n        }\n      }\n    },\n    triggerCustomEvent: function triggerCustomEvent(el, eventName, data) {\n      var event;\n\n      if (window.CustomEvent) {\n        event = new CustomEvent(eventName, {\n          detail: data\n        });\n      } else {\n        event = document.createEvent('CustomEvent');\n        event.initCustomEvent(eventName, true, true, data);\n      }\n\n      el.dispatchEvent(event);\n    },\n    triggerEvent: function triggerEvent(node, eventName) {\n      // Make sure we use the ownerDocument from the provided node to avoid cross-window problems\n      var doc;\n\n      if (node.ownerDocument) {\n        doc = node.ownerDocument;\n      } else if (node.nodeType == 9) {\n        // the node may be the document itself, nodeType 9 = DOCUMENT_NODE\n        doc = node;\n      } else {\n        throw new Error(\"Invalid node passed to fireEvent: \" + node.id);\n      }\n\n      if (node.dispatchEvent) {\n        // Gecko-style approach (now the standard) takes more work\n        var eventClass = \"\"; // Different events have different event classes.\n        // If this switch statement can't map an eventName to an eventClass,\n        // the event firing is going to fail.\n\n        switch (eventName) {\n          case \"click\": // Dispatching of 'click' appears to not work correctly in Safari. Use 'mousedown' or 'mouseup' instead.\n\n          case \"mouseenter\":\n          case \"mouseleave\":\n          case \"mousedown\":\n          case \"mouseup\":\n            eventClass = \"MouseEvents\";\n            break;\n\n          case \"focus\":\n          case \"change\":\n          case \"blur\":\n          case \"select\":\n            eventClass = \"HTMLEvents\";\n            break;\n\n          default:\n            throw \"fireEvent: Couldn't find an event class for event '\" + eventName + \"'.\";\n            break;\n        }\n\n        var event = doc.createEvent(eventClass);\n        var bubbles = eventName == \"change\" ? false : true;\n        event.initEvent(eventName, bubbles, true); // All events created as bubbling and cancelable.\n\n        event.synthetic = true; // allow detection of synthetic events\n        // The second parameter says go ahead with the default action\n\n        node.dispatchEvent(event, true);\n      } else if (node.fireEvent) {\n        // IE-old school style\n        var event = doc.createEventObject();\n        event.synthetic = true; // allow detection of synthetic events\n\n        node.fireEvent(\"on\" + eventName, event);\n      }\n    },\n    index: function index(el) {\n      var c = el.parentNode.children,\n          i = 0;\n\n      for (; i < c.length; i++) {\n        if (c[i] == el) return i;\n      }\n    },\n    trim: function trim(string) {\n      return string.trim();\n    },\n    eventTriggered: function eventTriggered(e) {\n      if (e.currentTarget.dataset.triggered) {\n        return true;\n      } else {\n        e.currentTarget.dataset.triggered = true;\n        return false;\n      }\n    },\n    remove: function remove(el) {\n      if (el && el.parentNode) {\n        el.parentNode.removeChild(el);\n      }\n    },\n    find: function find(parent, query) {\n      parent = KTUtil.getById(parent);\n\n      if (parent) {\n        return parent.querySelector(query);\n      }\n    },\n    findAll: function findAll(parent, query) {\n      parent = KTUtil.getById(parent);\n\n      if (parent) {\n        return parent.querySelectorAll(query);\n      }\n    },\n    insertAfter: function insertAfter(el, referenceNode) {\n      return referenceNode.parentNode.insertBefore(el, referenceNode.nextSibling);\n    },\n    parents: function parents(elem, selector) {\n      // Element.matches() polyfill\n      if (!Element.prototype.matches) {\n        Element.prototype.matches = Element.prototype.matchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector || Element.prototype.webkitMatchesSelector || function (s) {\n          var matches = (this.document || this.ownerDocument).querySelectorAll(s),\n              i = matches.length;\n\n          while (--i >= 0 && matches.item(i) !== this) {}\n\n          return i > -1;\n        };\n      } // Set up a parent array\n\n\n      var parents = []; // Push each parent element to the array\n\n      for (; elem && elem !== document; elem = elem.parentNode) {\n        if (selector) {\n          if (elem.matches(selector)) {\n            parents.push(elem);\n          }\n\n          continue;\n        }\n\n        parents.push(elem);\n      } // Return our parent array\n\n\n      return parents;\n    },\n    children: function children(el, selector, log) {\n      if (!el || !el.childNodes) {\n        return;\n      }\n\n      var result = [],\n          i = 0,\n          l = el.childNodes.length;\n\n      for (var i; i < l; ++i) {\n        if (el.childNodes[i].nodeType == 1 && KTUtil.matches(el.childNodes[i], selector, log)) {\n          result.push(el.childNodes[i]);\n        }\n      }\n\n      return result;\n    },\n    child: function child(el, selector, log) {\n      var children = KTUtil.children(el, selector, log);\n      return children ? children[0] : null;\n    },\n    matches: function matches(el, selector, log) {\n      var p = Element.prototype;\n\n      var f = p.matches || p.webkitMatchesSelector || p.mozMatchesSelector || p.msMatchesSelector || function (s) {\n        return [].indexOf.call(document.querySelectorAll(s), this) !== -1;\n      };\n\n      if (el && el.tagName) {\n        return f.call(el, selector);\n      } else {\n        return false;\n      }\n    },\n    data: function data(el) {\n      return {\n        set: function set(name, data) {\n          if (!el) {\n            return;\n          }\n\n          if (el.customDataTag === undefined) {\n            window.KTUtilElementDataStoreID++;\n            el.customDataTag = window.KTUtilElementDataStoreID;\n          }\n\n          if (window.KTUtilElementDataStore[el.customDataTag] === undefined) {\n            window.KTUtilElementDataStore[el.customDataTag] = {};\n          }\n\n          window.KTUtilElementDataStore[el.customDataTag][name] = data;\n        },\n        get: function get(name) {\n          if (!el) {\n            return;\n          }\n\n          if (el.customDataTag === undefined) {\n            return null;\n          }\n\n          return this.has(name) ? window.KTUtilElementDataStore[el.customDataTag][name] : null;\n        },\n        has: function has(name) {\n          if (!el) {\n            return false;\n          }\n\n          if (el.customDataTag === undefined) {\n            return false;\n          }\n\n          return window.KTUtilElementDataStore[el.customDataTag] && window.KTUtilElementDataStore[el.customDataTag][name] ? true : false;\n        },\n        remove: function remove(name) {\n          if (el && this.has(name)) {\n            delete window.KTUtilElementDataStore[el.customDataTag][name];\n          }\n        }\n      };\n    },\n    outerWidth: function outerWidth(el, margin) {\n      var width;\n\n      if (margin === true) {\n        width = parseFloat(el.offsetWidth);\n        width += parseFloat(KTUtil.css(el, 'margin-left')) + parseFloat(KTUtil.css(el, 'margin-right'));\n        return parseFloat(width);\n      } else {\n        width = parseFloat(el.offsetWidth);\n        return width;\n      }\n    },\n    offset: function offset(el) {\n      var rect, win;\n\n      if (!el) {\n        return;\n      } // Return zeros for disconnected and hidden (display: none) elements (gh-2310)\n      // Support: IE <=11 only\n      // Running getBoundingClientRect on a\n      // disconnected node in IE throws an error\n\n\n      if (!el.getClientRects().length) {\n        return {\n          top: 0,\n          left: 0\n        };\n      } // Get document-relative position by adding viewport scroll to viewport-relative gBCR\n\n\n      rect = el.getBoundingClientRect();\n      win = el.ownerDocument.defaultView;\n      return {\n        top: rect.top + win.pageYOffset,\n        left: rect.left + win.pageXOffset\n      };\n    },\n    height: function height(el) {\n      return KTUtil.css(el, 'height');\n    },\n    outerHeight: function outerHeight(el, withMargin) {\n      var height = el.offsetHeight;\n      var style;\n\n      if (typeof withMargin !== 'undefined' && withMargin === true) {\n        style = getComputedStyle(el);\n        height += parseInt(style.marginTop) + parseInt(style.marginBottom);\n        return height;\n      } else {\n        return height;\n      }\n    },\n    visible: function visible(el) {\n      return !(el.offsetWidth === 0 && el.offsetHeight === 0);\n    },\n    attr: function attr(el, name, value) {\n      if (el == undefined) {\n        return;\n      }\n\n      if (value !== undefined) {\n        el.setAttribute(name, value);\n      } else {\n        return el.getAttribute(name);\n      }\n    },\n    hasAttr: function hasAttr(el, name) {\n      if (el == undefined) {\n        return;\n      }\n\n      return el.getAttribute(name) ? true : false;\n    },\n    removeAttr: function removeAttr(el, name) {\n      if (el == undefined) {\n        return;\n      }\n\n      el.removeAttribute(name);\n    },\n    animate: function animate(from, to, duration, update, easing, done) {\n      /**\r\n       * TinyAnimate.easings\r\n       *  Adapted from jQuery Easing\r\n       */\n      var easings = {};\n      var easing;\n\n      easings.linear = function (t, b, c, d) {\n        return c * t / d + b;\n      };\n\n      easing = easings.linear; // Early bail out if called incorrectly\n\n      if (typeof from !== 'number' || typeof to !== 'number' || typeof duration !== 'number' || typeof update !== 'function') {\n        return;\n      } // Create mock done() function if necessary\n\n\n      if (typeof done !== 'function') {\n        done = function done() {};\n      } // Pick implementation (requestAnimationFrame | setTimeout)\n\n\n      var rAF = window.requestAnimationFrame || function (callback) {\n        window.setTimeout(callback, 1000 / 50);\n      }; // Animation loop\n\n\n      var canceled = false;\n      var change = to - from;\n\n      function loop(timestamp) {\n        var time = (timestamp || +new Date()) - start;\n\n        if (time >= 0) {\n          update(easing(time, from, change, duration));\n        }\n\n        if (time >= 0 && time >= duration) {\n          update(to);\n          done();\n        } else {\n          rAF(loop);\n        }\n      }\n\n      update(from); // Start animation loop\n\n      var start = window.performance && window.performance.now ? window.performance.now() : +new Date();\n      rAF(loop);\n    },\n    actualCss: function actualCss(el, prop, cache) {\n      var css = '';\n\n      if (el instanceof HTMLElement === false) {\n        return;\n      }\n\n      if (!el.getAttribute('kt-hidden-' + prop) || cache === false) {\n        var value; // the element is hidden so:\n        // making the el block so we can meassure its height but still be hidden\n\n        css = el.style.cssText;\n        el.style.cssText = 'position: absolute; visibility: hidden; display: block;';\n\n        if (prop == 'width') {\n          value = el.offsetWidth;\n        } else if (prop == 'height') {\n          value = el.offsetHeight;\n        }\n\n        el.style.cssText = css; // store it in cache\n\n        el.setAttribute('kt-hidden-' + prop, value);\n        return parseFloat(value);\n      } else {\n        // store it in cache\n        return parseFloat(el.getAttribute('kt-hidden-' + prop));\n      }\n    },\n    actualHeight: function actualHeight(el, cache) {\n      return KTUtil.actualCss(el, 'height', cache);\n    },\n    actualWidth: function actualWidth(el, cache) {\n      return KTUtil.actualCss(el, 'width', cache);\n    },\n    getScroll: function getScroll(element, method) {\n      // The passed in `method` value should be 'Top' or 'Left'\n      method = 'scroll' + method;\n      return element == window || element == document ? self[method == 'scrollTop' ? 'pageYOffset' : 'pageXOffset'] || browserSupportsBoxModel && document.documentElement[method] || document.body[method] : element[method];\n    },\n    css: function css(el, styleProp, value) {\n      if (!el) {\n        return;\n      }\n\n      if (value !== undefined) {\n        el.style[styleProp] = value;\n      } else {\n        var defaultView = (el.ownerDocument || document).defaultView; // W3C standard way:\n\n        if (defaultView && defaultView.getComputedStyle) {\n          // sanitize property name to css notation\n          // (hyphen separated words eg. font-Size)\n          styleProp = styleProp.replace(/([A-Z])/g, \"-$1\").toLowerCase();\n          return defaultView.getComputedStyle(el, null).getPropertyValue(styleProp);\n        } else if (el.currentStyle) {\n          // IE\n          // sanitize property name to camelCase\n          styleProp = styleProp.replace(/\\-(\\w)/g, function (str, letter) {\n            return letter.toUpperCase();\n          });\n          value = el.currentStyle[styleProp]; // convert other units to pixels on IE\n\n          if (/^\\d+(em|pt|%|ex)?$/i.test(value)) {\n            return function (value) {\n              var oldLeft = el.style.left,\n                  oldRsLeft = el.runtimeStyle.left;\n              el.runtimeStyle.left = el.currentStyle.left;\n              el.style.left = value || 0;\n              value = el.style.pixelLeft + \"px\";\n              el.style.left = oldLeft;\n              el.runtimeStyle.left = oldRsLeft;\n              return value;\n            }(value);\n          }\n\n          return value;\n        }\n      }\n    },\n    slide: function slide(el, dir, speed, callback, recalcMaxHeight) {\n      if (!el || dir == 'up' && KTUtil.visible(el) === false || dir == 'down' && KTUtil.visible(el) === true) {\n        return;\n      }\n\n      speed = speed ? speed : 600;\n      var calcHeight = KTUtil.actualHeight(el);\n      var calcPaddingTop = false;\n      var calcPaddingBottom = false;\n\n      if (KTUtil.css(el, 'padding-top') && KTUtil.data(el).has('slide-padding-top') !== true) {\n        KTUtil.data(el).set('slide-padding-top', KTUtil.css(el, 'padding-top'));\n      }\n\n      if (KTUtil.css(el, 'padding-bottom') && KTUtil.data(el).has('slide-padding-bottom') !== true) {\n        KTUtil.data(el).set('slide-padding-bottom', KTUtil.css(el, 'padding-bottom'));\n      }\n\n      if (KTUtil.data(el).has('slide-padding-top')) {\n        calcPaddingTop = parseInt(KTUtil.data(el).get('slide-padding-top'));\n      }\n\n      if (KTUtil.data(el).has('slide-padding-bottom')) {\n        calcPaddingBottom = parseInt(KTUtil.data(el).get('slide-padding-bottom'));\n      }\n\n      if (dir == 'up') {\n        // up\n        el.style.cssText = 'display: block; overflow: hidden;';\n\n        if (calcPaddingTop) {\n          KTUtil.animate(0, calcPaddingTop, speed, function (value) {\n            el.style.paddingTop = calcPaddingTop - value + 'px';\n          }, 'linear');\n        }\n\n        if (calcPaddingBottom) {\n          KTUtil.animate(0, calcPaddingBottom, speed, function (value) {\n            el.style.paddingBottom = calcPaddingBottom - value + 'px';\n          }, 'linear');\n        }\n\n        KTUtil.animate(0, calcHeight, speed, function (value) {\n          el.style.height = calcHeight - value + 'px';\n        }, 'linear', function () {\n          el.style.height = '';\n          el.style.display = 'none';\n\n          if (typeof callback === 'function') {\n            callback();\n          }\n        });\n      } else if (dir == 'down') {\n        // down\n        el.style.cssText = 'display: block; overflow: hidden;';\n\n        if (calcPaddingTop) {\n          KTUtil.animate(0, calcPaddingTop, speed, function (value) {\n            //\n            el.style.paddingTop = value + 'px';\n          }, 'linear', function () {\n            el.style.paddingTop = '';\n          });\n        }\n\n        if (calcPaddingBottom) {\n          KTUtil.animate(0, calcPaddingBottom, speed, function (value) {\n            el.style.paddingBottom = value + 'px';\n          }, 'linear', function () {\n            el.style.paddingBottom = '';\n          });\n        }\n\n        KTUtil.animate(0, calcHeight, speed, function (value) {\n          el.style.height = value + 'px';\n        }, 'linear', function () {\n          el.style.height = '';\n          el.style.display = '';\n          el.style.overflow = '';\n\n          if (typeof callback === 'function') {\n            callback();\n          }\n        });\n      }\n    },\n    slideUp: function slideUp(el, speed, callback) {\n      KTUtil.slide(el, 'up', speed, callback);\n    },\n    slideDown: function slideDown(el, speed, callback) {\n      KTUtil.slide(el, 'down', speed, callback);\n    },\n    show: function show(el, display) {\n      if (typeof el !== 'undefined') {\n        el.style.display = display ? display : 'block';\n      }\n    },\n    hide: function hide(el) {\n      if (typeof el !== 'undefined') {\n        el.style.display = 'none';\n      }\n    },\n    addEvent: function addEvent(el, type, handler, one) {\n      if (typeof el !== 'undefined' && el !== null) {\n        el.addEventListener(type, handler);\n      }\n    },\n    removeEvent: function removeEvent(el, type, handler) {\n      if (el !== null) {\n        el.removeEventListener(type, handler);\n      }\n    },\n    on: function on(element, selector, event, handler) {\n      if (!selector) {\n        return;\n      }\n\n      var eventId = KTUtil.getUniqueID('event');\n\n      window.KTUtilDelegatedEventHandlers[eventId] = function (e) {\n        var targets = element.querySelectorAll(selector);\n        var target = e.target;\n\n        while (target && target !== element) {\n          for (var i = 0, j = targets.length; i < j; i++) {\n            if (target === targets[i]) {\n              handler.call(target, e);\n            }\n          }\n\n          target = target.parentNode;\n        }\n      };\n\n      KTUtil.addEvent(element, event, window.KTUtilDelegatedEventHandlers[eventId]);\n      return eventId;\n    },\n    off: function off(element, event, eventId) {\n      if (!element || !window.KTUtilDelegatedEventHandlers[eventId]) {\n        return;\n      }\n\n      KTUtil.removeEvent(element, event, window.KTUtilDelegatedEventHandlers[eventId]);\n      delete window.KTUtilDelegatedEventHandlers[eventId];\n    },\n    one: function onetime(el, type, callback) {\n      el.addEventListener(type, function callee(e) {\n        // remove event\n        if (e.target && e.target.removeEventListener) {\n          e.target.removeEventListener(e.type, callee);\n        } // need to verify from https://themeforest.net/author_dashboard#comment_23615588\n\n\n        if (el && el.removeEventListener) {\n          e.currentTarget.removeEventListener(e.type, callee);\n        } // call handler\n\n\n        return callback(e);\n      });\n    },\n    hash: function hash(str) {\n      var hash = 0,\n          i,\n          chr;\n      if (str.length === 0) return hash;\n\n      for (i = 0; i < str.length; i++) {\n        chr = str.charCodeAt(i);\n        hash = (hash << 5) - hash + chr;\n        hash |= 0; // Convert to 32bit integer\n      }\n\n      return hash;\n    },\n    animateClass: function animateClass(el, animationName, callback) {\n      var animation;\n      var animations = {\n        animation: 'animationend',\n        OAnimation: 'oAnimationEnd',\n        MozAnimation: 'mozAnimationEnd',\n        WebkitAnimation: 'webkitAnimationEnd',\n        msAnimation: 'msAnimationEnd'\n      };\n\n      for (var t in animations) {\n        if (el.style[t] !== undefined) {\n          animation = animations[t];\n        }\n      }\n\n      KTUtil.addClass(el, 'animated ' + animationName);\n      KTUtil.one(el, animation, function () {\n        KTUtil.removeClass(el, 'animated ' + animationName);\n      });\n\n      if (callback) {\n        KTUtil.one(el, animation, callback);\n      }\n    },\n    transitionEnd: function transitionEnd(el, callback) {\n      var transition;\n      var transitions = {\n        transition: 'transitionend',\n        OTransition: 'oTransitionEnd',\n        MozTransition: 'mozTransitionEnd',\n        WebkitTransition: 'webkitTransitionEnd',\n        msTransition: 'msTransitionEnd'\n      };\n\n      for (var t in transitions) {\n        if (el.style[t] !== undefined) {\n          transition = transitions[t];\n        }\n      }\n\n      KTUtil.one(el, transition, callback);\n    },\n    animationEnd: function animationEnd(el, callback) {\n      var animation;\n      var animations = {\n        animation: 'animationend',\n        OAnimation: 'oAnimationEnd',\n        MozAnimation: 'mozAnimationEnd',\n        WebkitAnimation: 'webkitAnimationEnd',\n        msAnimation: 'msAnimationEnd'\n      };\n\n      for (var t in animations) {\n        if (el.style[t] !== undefined) {\n          animation = animations[t];\n        }\n      }\n\n      KTUtil.one(el, animation, callback);\n    },\n    animateDelay: function animateDelay(el, value) {\n      var vendors = ['webkit-', 'moz-', 'ms-', 'o-', ''];\n\n      for (var i = 0; i < vendors.length; i++) {\n        KTUtil.css(el, vendors[i] + 'animation-delay', value);\n      }\n    },\n    animateDuration: function animateDuration(el, value) {\n      var vendors = ['webkit-', 'moz-', 'ms-', 'o-', ''];\n\n      for (var i = 0; i < vendors.length; i++) {\n        KTUtil.css(el, vendors[i] + 'animation-duration', value);\n      }\n    },\n    scrollTo: function scrollTo(target, offset, duration) {\n      var duration = duration ? duration : 500;\n      var targetPos = target ? KTUtil.offset(target).top : 0;\n      var scrollPos = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;\n      var from, to;\n\n      if (offset) {\n        scrollPos += offset;\n      }\n\n      from = scrollPos;\n      to = targetPos;\n      KTUtil.animate(from, to, duration, function (value) {\n        document.documentElement.scrollTop = value;\n        document.body.parentNode.scrollTop = value;\n        document.body.scrollTop = value;\n      }); //, easing, done\n    },\n    scrollTop: function scrollTop(offset, duration) {\n      KTUtil.scrollTo(null, offset, duration);\n    },\n    isArray: function isArray(obj) {\n      return obj && Array.isArray(obj);\n    },\n    ready: function ready(callback) {\n      if (document.attachEvent ? document.readyState === \"complete\" : document.readyState !== \"loading\") {\n        callback();\n      } else {\n        document.addEventListener('DOMContentLoaded', callback);\n      }\n    },\n    isEmpty: function isEmpty(obj) {\n      for (var prop in obj) {\n        if (obj.hasOwnProperty(prop)) {\n          return false;\n        }\n      }\n\n      return true;\n    },\n    numberString: function numberString(nStr) {\n      nStr += '';\n      var x = nStr.split('.');\n      var x1 = x[0];\n      var x2 = x.length > 1 ? '.' + x[1] : '';\n      var rgx = /(\\d+)(\\d{3})/;\n\n      while (rgx.test(x1)) {\n        x1 = x1.replace(rgx, '$1' + ',' + '$2');\n      }\n\n      return x1 + x2;\n    },\n    detectIE: function detectIE() {\n      var ua = window.navigator.userAgent; // Test values; Uncomment to check result …\n      // IE 10\n      // ua = 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0)';\n      // IE 11\n      // ua = 'Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko';\n      // Edge 12 (Spartan)\n      // ua = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.71 Safari/537.36 Edge/12.0';\n      // Edge 13\n      // ua = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2486.0 Safari/537.36 Edge/13.10586';\n\n      var msie = ua.indexOf('MSIE ');\n\n      if (msie > 0) {\n        // IE 10 or older => return version number\n        return parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);\n      }\n\n      var trident = ua.indexOf('Trident/');\n\n      if (trident > 0) {\n        // IE 11 => return version number\n        var rv = ua.indexOf('rv:');\n        return parseInt(ua.substring(rv + 3, ua.indexOf('.', rv)), 10);\n      }\n\n      var edge = ua.indexOf('Edge/');\n\n      if (edge > 0) {\n        // Edge (IE 12+) => return version number\n        return parseInt(ua.substring(edge + 5, ua.indexOf('.', edge)), 10);\n      } // other browser\n\n\n      return false;\n    },\n    isRTL: function isRTL() {\n      var html = KTUtil.getByTagName('html')[0];\n\n      if (html) {\n        return KTUtil.attr(html, 'direction') == 'rtl';\n      }\n    },\n    // Scroller\n    scrollInit: function scrollInit(element, options) {\n      if (!element) {\n        return;\n      } // Learn more: https://github.com/mdbootstrap/perfect-scrollbar#options\n\n\n      var pluginDefOptions = {\n        wheelSpeed: 0.5,\n        swipeEasing: true,\n        wheelPropagation: false,\n        minScrollbarLength: 40,\n        maxScrollbarLength: 300,\n        suppressScrollX: true\n      };\n      options = KTUtil.deepExtend({}, pluginDefOptions, options); // Define init function\n\n      function init() {\n        var ps;\n        var height; // Get extra options via data attributes\n\n        var attrs = element.getAttributeNames();\n\n        if (attrs.length > 0) {\n          attrs.forEach(function (attrName) {\n            // more options; https://github.com/ganlanyuan/tiny-slider#options\n            if (/^data-.*/g.test(attrName)) {\n              if (['scroll', 'height', 'mobile-height'].includes(optionName) == false) {\n                var optionName = attrName.replace('data-', '').toLowerCase().replace(/(?:[\\s-])\\w/g, function (match) {\n                  return match.replace('-', '').toUpperCase();\n                });\n                options[optionName] = KTUtil.filterBoolean(element.getAttribute(attrName));\n              }\n            }\n          });\n        }\n\n        if (options.height instanceof Function) {\n          height = options.height.call();\n        } else {\n          if (KTUtil.isMobileDevice() === true && options.mobileHeight) {\n            height = parseInt(options.mobileHeight);\n          } else if (options.height) {\n            height = parseInt(options.height);\n          } else {\n            height = parseInt(KTUtil.css(element, 'height'));\n          }\n        }\n\n        if (height === false) {\n          KTUtil.scrollDestroy(element, true);\n          return;\n        }\n\n        height = parseInt(height); // Destroy scroll on table and mobile modes\n\n        if ((options.mobileNativeScroll || options.disableForMobile) && KTUtil.isMobileDevice() === true) {\n          ps = KTUtil.data(element).get('ps');\n\n          if (ps) {\n            if (options.resetHeightOnDestroy) {\n              KTUtil.css(element, 'height', 'auto');\n            } else {\n              KTUtil.css(element, 'overflow', 'auto');\n\n              if (height > 0) {\n                KTUtil.css(element, 'height', height + 'px');\n              }\n            }\n\n            ps.destroy();\n            ps = KTUtil.data(element).remove('ps');\n          } else if (height > 0) {\n            KTUtil.css(element, 'overflow', 'auto');\n            KTUtil.css(element, 'height', height + 'px');\n          }\n\n          return;\n        }\n\n        if (height > 0) {\n          KTUtil.css(element, 'height', height + 'px');\n        }\n\n        if (options.desktopNativeScroll) {\n          KTUtil.css(element, 'overflow', 'auto');\n          return;\n        } // Pass options via HTML Attributes\n\n\n        if (KTUtil.attr(element, 'data-window-scroll') == 'true') {\n          options.windowScroll = true;\n        } // Init scroll\n\n\n        ps = KTUtil.data(element).get('ps');\n\n        if (ps) {\n          ps.update();\n        } else {\n          KTUtil.css(element, 'overflow', 'hidden');\n          KTUtil.addClass(element, 'scroll');\n          ps = new PerfectScrollbar(element, options);\n          KTUtil.data(element).set('ps', ps);\n        } // Remember scroll position in cookie\n\n\n        var uid = KTUtil.attr(element, 'id'); // Todo:Consider using Localstorage\n\n        if (options.rememberPosition === true && KTCookie && uid) {\n          if (KTCookie.getCookie(uid)) {\n            var pos = parseInt(KTCookie.getCookie(uid));\n\n            if (pos > 0) {\n              element.scrollTop = pos;\n            }\n          }\n\n          element.addEventListener('ps-scroll-y', function () {\n            KTCookie.setCookie(uid, element.scrollTop);\n          });\n        }\n      } // Init\n\n\n      init(); // Handle window resize\n\n      if (options.handleWindowResize) {\n        KTUtil.addResizeHandler(function () {\n          init();\n        });\n      }\n    },\n    scrollUpdate: function scrollUpdate(element) {\n      var ps = KTUtil.data(element).get('ps');\n\n      if (ps) {\n        ps.update();\n      }\n    },\n    scrollUpdateAll: function scrollUpdateAll(parent) {\n      var scrollers = KTUtil.findAll(parent, '.ps');\n\n      for (var i = 0, len = scrollers.length; i < len; i++) {\n        KTUtil.scrollUpdate(scrollers[i]);\n      }\n    },\n    scrollDestroy: function scrollDestroy(element, resetAll) {\n      var ps = KTUtil.data(element).get('ps');\n\n      if (ps) {\n        ps.destroy();\n        ps = KTUtil.data(element).remove('ps');\n      }\n\n      if (element && resetAll) {\n        element.style.setProperty('overflow', '');\n        element.style.setProperty('height', '');\n      }\n    },\n    filterBoolean: function filterBoolean(val) {\n      // Convert string boolean\n      if (val === true || val === 'true') {\n        return true;\n      }\n\n      if (val === false || val === 'false') {\n        return false;\n      }\n\n      return val;\n    },\n    setHTML: function setHTML(el, html) {\n      el.innerHTML = html;\n    },\n    getHTML: function getHTML(el) {\n      if (el) {\n        return el.innerHTML;\n      }\n    },\n    getDocumentHeight: function getDocumentHeight() {\n      var body = document.body;\n      var html = document.documentElement;\n      return Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight);\n    },\n    getScrollTop: function getScrollTop() {\n      return (document.scrollingElement || document.documentElement).scrollTop;\n    },\n    changeColor: function changeColor(col, amt) {\n      var usePound = false;\n\n      if (col[0] == \"#\") {\n        col = col.slice(1);\n        usePound = true;\n      }\n\n      var num = parseInt(col, 16);\n      var r = (num >> 16) + amt;\n      if (r > 255) r = 255;else if (r < 0) r = 0;\n      var b = (num >> 8 & 0x00FF) + amt;\n      if (b > 255) b = 255;else if (b < 0) b = 0;\n      var g = (num & 0x0000FF) + amt;\n      if (g > 255) g = 255;else if (g < 0) g = 0;\n      return (usePound ? \"#\" : \"\") + (g | b << 8 | r << 16).toString(16);\n    },\n    // Throttle function: Input as function which needs to be throttled and delay is the time interval in milliseconds\n    throttle: function throttle(timer, func, delay) {\n      // If setTimeout is already scheduled, no need to do anything\n      if (timer) {\n        return;\n      } // Schedule a setTimeout after delay seconds\n\n\n      timer = setTimeout(function () {\n        func(); // Once setTimeout function execution is finished, timerId = undefined so that in <br>\n        // the next scroll event function execution can be scheduled by the setTimeout\n\n        timer = undefined;\n      }, delay);\n    },\n    // Debounce function: Input as function which needs to be debounced and delay is the debounced time in milliseconds\n    debounce: function debounce(timer, func, delay) {\n      // Cancels the setTimeout method execution\n      clearTimeout(timer); // Executes the func after delay time.\n\n      timer = setTimeout(func, delay);\n    },\n    btnWait: function btnWait(el, cls, message, disable) {\n      if (!el) {\n        return;\n      }\n\n      if (typeof disable !== 'undefined' && disable === true) {\n        KTUtil.attr(el, \"disabled\", true);\n      }\n\n      if (cls) {\n        KTUtil.addClass(el, cls);\n        KTUtil.attr(el, \"wait-class\", cls);\n      }\n\n      if (message) {\n        var caption = KTUtil.find(el, '.btn-caption');\n\n        if (caption) {\n          KTUtil.data(caption).set('caption', KTUtil.getHTML(caption));\n          KTUtil.setHTML(caption, message);\n        } else {\n          KTUtil.data(el).set('caption', KTUtil.getHTML(el));\n          KTUtil.setHTML(el, message);\n        }\n      }\n    },\n    btnRelease: function btnRelease(el) {\n      if (!el) {\n        return;\n      } /// Show loading state on button\n\n\n      KTUtil.removeAttr(el, \"disabled\");\n\n      if (KTUtil.hasAttr(el, \"wait-class\")) {\n        KTUtil.removeClass(el, KTUtil.attr(el, \"wait-class\"));\n      }\n\n      var caption = KTUtil.find(el, '.btn-caption');\n\n      if (caption && KTUtil.data(caption).has('caption')) {\n        KTUtil.setHTML(caption, KTUtil.data(caption).get('caption'));\n      } else if (KTUtil.data(el).has('caption')) {\n        KTUtil.setHTML(el, KTUtil.data(el).get('caption'));\n      }\n    },\n    isOffscreen: function isOffscreen(el, direction, offset) {\n      offset = offset || 0;\n      var windowWidth = KTUtil.getViewPort().width;\n      var windowHeight = KTUtil.getViewPort().height;\n      var top = KTUtil.offset(el).top;\n      var height = KTUtil.outerHeight(el) + offset;\n      var left = KTUtil.offset(el).left;\n      var width = KTUtil.outerWidth(el) + offset;\n\n      if (direction == 'bottom') {\n        if (windowHeight < top + height) {\n          return true;\n        } else if (windowHeight > top + height * 1.5) {\n          return true;\n        }\n      }\n\n      if (direction == 'top') {\n        if (top < 0) {\n          return true;\n        } else if (top > height) {\n          return true;\n        }\n      }\n\n      if (direction == 'left') {\n        if (left < 0) {\n          return true;\n        } else if (left * 2 > width) {//console.log('left 2');\n          //return true;\n        }\n      }\n\n      if (direction == 'right') {\n        if (windowWidth < left + width) {\n          return true;\n        } else {//console.log('right 2');\n          //return true;\n        }\n      }\n\n      return false;\n    }\n  };\n}(); // webpack support\n\n\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTUtil;\n} // Initialize KTUtil class on document ready\n\n\nKTUtil.ready(function () {\n  if (typeof KTAppSettings !== 'undefined') {\n    KTUtil.init(KTAppSettings);\n  } else {\n    KTUtil.init();\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/components/util.js\n");

/***/ }),

/***/ "./resources/metronic/js/components/wizard.js":
/*!****************************************************!*\
  !*** ./resources/metronic/js/components/wizard.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" // Component Definition\n\nvar KTWizard = function KTWizard(elementId, options) {\n  // Main object\n  var the = this;\n  var init = false; // Get element object\n\n  var element = KTUtil.getById(elementId);\n  var body = KTUtil.getBody();\n\n  if (!element) {\n    return;\n  } // Default options\n\n\n  var defaultOptions = {\n    startStep: 1,\n    clickableSteps: false // to make steps clickable this set value true and add data-wizard-clickable=\"true\" in HTML for class=\"wizard\" element\n\n  }; ////////////////////////////\n  // ** Private Methods  ** //\n  ////////////////////////////\n\n  var Plugin = {\n    /**\r\n     * Construct\r\n     */\n    construct: function construct(options) {\n      if (KTUtil.data(element).has('wizard')) {\n        the = KTUtil.data(element).get('wizard');\n      } else {\n        // reset menu\n        Plugin.init(options); // build menu\n\n        Plugin.build();\n        KTUtil.data(element).set('wizard', the);\n      }\n\n      return the;\n    },\n\n    /**\r\n     * Init wizard\r\n     */\n    init: function init(options) {\n      the.element = element;\n      the.events = []; // merge default and user defined options\n\n      the.options = KTUtil.deepExtend({}, defaultOptions, options); // Elements\n\n      the.steps = KTUtil.findAll(element, '[data-wizard-type=\"step\"]');\n      the.btnNext = KTUtil.find(element, '[data-wizard-type=\"action-next\"]');\n      the.btnPrev = KTUtil.find(element, '[data-wizard-type=\"action-prev\"]');\n      the.btnSubmit = KTUtil.find(element, '[data-wizard-type=\"action-submit\"]'); // Variables\n\n      the.events = [];\n      the.lastStep = 0;\n      the.currentStep = 1;\n      the.newStep = 0;\n      the.stopped = false;\n      the.totalSteps = the.steps.length; // Init current step\n\n      if (the.options.startStep > 1) {\n        Plugin.goTo(the.options.startStep);\n      } // Init UI\n\n\n      Plugin.updateUI();\n    },\n\n    /**\r\n     * Build Form Wizard\r\n     */\n    build: function build() {\n      // Next button event handler\n      KTUtil.addEvent(the.btnNext, 'click', function (e) {\n        e.preventDefault(); // Set new step number\n\n        Plugin.setNewStep(Plugin.getNextStep()); // Trigger change event\n\n        if (Plugin.eventTrigger('change') !== false) {\n          Plugin.goTo(Plugin.getNextStep());\n        }\n      }); // Prev button event handler\n\n      KTUtil.addEvent(the.btnPrev, 'click', function (e) {\n        e.preventDefault(); // Set new step number\n\n        Plugin.setNewStep(Plugin.getPrevStep()); // Trigger change event\n\n        if (Plugin.eventTrigger('change') !== false) {\n          Plugin.goTo(Plugin.getPrevStep());\n        }\n      });\n\n      if (the.options.clickableSteps === true) {\n        KTUtil.on(element, '[data-wizard-type=\"step\"]', 'click', function () {\n          var index = KTUtil.index(this) + 1;\n\n          if (index !== the.currentStep) {\n            Plugin.setNewStep(index); // Trigger change event\n\n            if (Plugin.eventTrigger('change') !== false) {\n              Plugin.goTo(index);\n            }\n          }\n        });\n      } // Submit button event handler\n\n\n      KTUtil.addEvent(the.btnSubmit, 'click', function (e) {\n        e.preventDefault();\n        Plugin.eventTrigger('submit');\n      });\n    },\n\n    /**\r\n     * Handles wizard click wizard\r\n     */\n    goTo: function goTo(number) {\n      // Skip if stopped\n      if (the.stopped === true) {\n        the.stopped = false;\n        return;\n      } // Skip if this step is already shown\n\n\n      if (number === the.currentStep || number > the.totalSteps || number < 0) {\n        return;\n      } // Validate step number\n\n\n      number = parseInt(number); // Set current step\n\n      the.lastStep = the.currentStep;\n      the.currentStep = number;\n      the.newStep = 0;\n      Plugin.updateUI();\n      Plugin.eventTrigger('changed');\n      return the;\n    },\n\n    /**\r\n     * Stop wizard\r\n     */\n    stop: function stop() {\n      the.stopped = true;\n    },\n\n    /**\r\n     * Resume wizard\r\n     */\n    resume: function resume() {\n      the.stopped = false;\n    },\n\n    /**\r\n     * Check last step\r\n     */\n    isLastStep: function isLastStep() {\n      return the.currentStep === the.totalSteps;\n    },\n\n    /**\r\n     * Check first step\r\n     */\n    isFirstStep: function isFirstStep() {\n      return the.currentStep === 1;\n    },\n\n    /**\r\n     * Check between step\r\n     */\n    isBetweenStep: function isBetweenStep() {\n      return Plugin.isLastStep() === false && Plugin.isFirstStep() === false;\n    },\n\n    /**\r\n     * Update wizard UI after step change\r\n     */\n    updateUI: function updateUI() {\n      var stepType = '';\n      var index = the.currentStep - 1;\n\n      if (Plugin.isLastStep()) {\n        stepType = 'last';\n      } else if (Plugin.isFirstStep()) {\n        stepType = 'first';\n      } else {\n        stepType = 'between';\n      }\n\n      KTUtil.attr(the.element, 'data-wizard-state', stepType); // Steps\n\n      var steps = KTUtil.findAll(the.element, '[data-wizard-type=\"step\"]');\n\n      if (steps && steps.length > 0) {\n        for (var i = 0, len = steps.length; i < len; i++) {\n          if (i == index) {\n            KTUtil.attr(steps[i], 'data-wizard-state', 'current');\n          } else {\n            if (i < index) {\n              KTUtil.attr(steps[i], 'data-wizard-state', 'done');\n            } else {\n              KTUtil.attr(steps[i], 'data-wizard-state', 'pending');\n            }\n          }\n        }\n      } // Steps Info\n\n\n      var stepsInfo = KTUtil.findAll(the.element, '[data-wizard-type=\"step-info\"]');\n\n      if (stepsInfo && stepsInfo.length > 0) {\n        for (var i = 0, len = stepsInfo.length; i < len; i++) {\n          if (i == index) {\n            KTUtil.attr(stepsInfo[i], 'data-wizard-state', 'current');\n          } else {\n            KTUtil.removeAttr(stepsInfo[i], 'data-wizard-state');\n          }\n        }\n      } // Steps Content\n\n\n      var stepsContent = KTUtil.findAll(the.element, '[data-wizard-type=\"step-content\"]');\n\n      if (stepsContent && stepsContent.length > 0) {\n        for (var i = 0, len = stepsContent.length; i < len; i++) {\n          if (i == index) {\n            KTUtil.attr(stepsContent[i], 'data-wizard-state', 'current');\n          } else {\n            KTUtil.removeAttr(stepsContent[i], 'data-wizard-state');\n          }\n        }\n      }\n    },\n\n    /**\r\n     * Get next step number\r\n     */\n    getNextStep: function getNextStep() {\n      if (the.totalSteps >= the.currentStep + 1) {\n        return the.currentStep + 1;\n      } else {\n        return the.totalSteps;\n      }\n    },\n\n    /**\r\n     * Get prev step number\r\n     */\n    getPrevStep: function getPrevStep() {\n      if (the.currentStep - 1 >= 1) {\n        return the.currentStep - 1;\n      } else {\n        return 1;\n      }\n    },\n\n    /**\r\n     * Get new step number\r\n     */\n    getNewStep: function getNewStep() {\n      return the.newStep;\n    },\n\n    /**\r\n     * Set new step\r\n     */\n    setNewStep: function setNewStep(step) {\n      the.newStep = step;\n    },\n\n    /**\r\n     * Trigger events\r\n     */\n    eventTrigger: function eventTrigger(name, nested) {\n      //KTUtil.triggerCustomEvent(name);\n      for (var i = 0; i < the.events.length; i++) {\n        var event = the.events[i];\n\n        if (event.name == name) {\n          if (event.one == true) {\n            if (event.fired == false) {\n              the.events[i].fired = true;\n              return event.handler.call(this, the);\n            }\n          } else {\n            return event.handler.call(this, the);\n          }\n        }\n      }\n    },\n    addEvent: function addEvent(name, handler, one) {\n      the.events.push({\n        name: name,\n        handler: handler,\n        one: one,\n        fired: false\n      });\n      return the;\n    }\n  }; //////////////////////////\n  // ** Public Methods ** //\n  //////////////////////////\n\n  /**\r\n   * Set default options\r\n   */\n\n  the.setDefaults = function (options) {\n    defaultOptions = options;\n  };\n  /**\r\n   * Go to the next step\r\n   */\n\n\n  the.goNext = function () {\n    return Plugin.goTo(Plugin.getNextStep());\n  };\n  /**\r\n   * Go to the prev step\r\n   */\n\n\n  the.goPrev = function () {\n    return Plugin.goTo(Plugin.getPrevStep());\n  };\n  /**\r\n   * Go to the last step\r\n   */\n\n\n  the.goLast = function () {\n    return Plugin.goTo(Plugin.getLastStep());\n  };\n  /**\r\n   * Go to the first step\r\n   */\n\n\n  the.goFirst = function () {\n    return Plugin.goTo(Plugin.getFirstStep());\n  };\n  /**\r\n   * Go to a step\r\n   */\n\n\n  the.goTo = function (number) {\n    return Plugin.goTo(number);\n  };\n  /**\r\n   * Stop wizard\r\n   */\n\n\n  the.stop = function () {\n    return Plugin.stop();\n  };\n  /**\r\n   * Resume wizard\r\n   */\n\n\n  the.resume = function () {\n    return Plugin.resume();\n  };\n  /**\r\n   * Get current step number\r\n   */\n\n\n  the.getStep = function () {\n    return the.currentStep;\n  };\n  /**\r\n   * Get new step number\r\n   */\n\n\n  the.getNewStep = function () {\n    return Plugin.getNewStep();\n  };\n  /**\r\n   * Set new step number\r\n   */\n\n\n  the.setNewStep = function (number) {\n    Plugin.setNewStep(number);\n  };\n  /**\r\n   * Check last step\r\n   */\n\n\n  the.isLastStep = function () {\n    return Plugin.isLastStep();\n  };\n  /**\r\n   * Check first step\r\n   */\n\n\n  the.isFirstStep = function () {\n    return Plugin.isFirstStep();\n  };\n  /**\r\n   * Attach event(\"change\", \"changed\", \"submit\")\r\n   */\n\n\n  the.on = function (name, handler) {\n    return Plugin.addEvent(name, handler);\n  };\n  /**\r\n   * Attach event that will be fired once\r\n   */\n\n\n  the.one = function (name, handler) {\n    return Plugin.addEvent(name, handler, true);\n  }; // Construct plugin\n\n\n  Plugin.construct.apply(the, [options]);\n  return the;\n}; // webpack support\n\n\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTWizard;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/components/wizard.js\n");

/***/ }),

/***/ "./resources/metronic/js/layout/base/aside-menu.js":
/*!*********************************************************!*\
  !*** ./resources/metronic/js/layout/base/aside-menu.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar KTLayoutAsideMenu = function () {\n  // Private properties\n  var _body;\n\n  var _element;\n\n  var _menuObject; // Initialize\n\n\n  var _init = function _init() {\n    var menuDesktopMode = KTUtil.attr(_element, 'data-menu-dropdown') === '1' ? 'dropdown' : 'accordion';\n    var scroll;\n\n    if (KTUtil.attr(_element, 'data-menu-scroll') === '1') {\n      scroll = {\n        rememberPosition: true,\n        // remember position on page reload\n        height: function height() {\n          // calculate available scrollable area height\n          var height = parseInt(KTUtil.getViewPort().height);\n\n          if (KTUtil.isBreakpointUp('lg')) {\n            height = height - KTLayoutBrand.getHeight();\n          }\n\n          height = height - (parseInt(KTUtil.css(_element, 'marginBottom')) + parseInt(KTUtil.css(_element, 'marginTop')));\n          return height;\n        }\n      };\n    }\n\n    _menuObject = new KTMenu(_element, {\n      // Vertical scroll\n      scroll: scroll,\n      // Submenu setup\n      submenu: {\n        desktop: menuDesktopMode,\n        tablet: 'accordion',\n        // menu set to accordion in tablet mode\n        mobile: 'accordion' // menu set to accordion in mobile mode\n\n      },\n      // Accordion setup\n      accordion: {\n        expandAll: false // allow having multiple expanded accordions in the menu\n\n      }\n    });\n  };\n\n  var _initHover = function _initHover() {\n    // Handle Minimized Aside Hover\n    if (KTUtil.hasClass(_body, 'aside-fixed') && KTUtil.hasClass(_body, 'aside-minimize-hoverable')) {\n      var insideTm;\n      var outsideTm; // Handle Aside Hover Mode\n\n      KTUtil.addEvent(_element, 'mouseenter', function (e) {\n        e.preventDefault();\n\n        if (KTUtil.isBreakpointUp('lg') === false) {\n          return;\n        }\n\n        if (outsideTm) {\n          clearTimeout(outsideTm);\n          outsideTm = null;\n        }\n\n        if (insideTm) {\n          clearTimeout(insideTm);\n          insideTm = null;\n        }\n\n        insideTm = setTimeout(function () {\n          if (KTUtil.hasClass(_body, 'aside-minimize') && KTUtil.isBreakpointUp('lg')) {\n            // Hover class\n            KTUtil.addClass(_body, 'aside-minimize-hover');\n            KTLayoutAsideMenu.getMenu().scrollUpdate();\n            KTLayoutAsideMenu.getMenu().scrollTop();\n          }\n        }, 50);\n      });\n      KTUtil.addEvent(KTLayoutAside.getElement(), 'mouseleave', function (e) {\n        e.preventDefault();\n\n        if (KTUtil.isBreakpointUp('lg') === false) {\n          return;\n        }\n\n        if (insideTm) {\n          clearTimeout(insideTm);\n          insideTm = null;\n        }\n\n        if (outsideTm) {\n          clearTimeout(outsideTm);\n          outsideTm = null;\n        }\n\n        outsideTm = setTimeout(function () {\n          if (KTUtil.hasClass(_body, 'aside-minimize-hover') && KTUtil.isBreakpointUp('lg')) {\n            KTUtil.removeClass(_body, 'aside-minimize-hover'); // Hover class\n\n            KTLayoutAsideMenu.getMenu().scrollUpdate();\n            KTLayoutAsideMenu.getMenu().scrollTop();\n          }\n        }, 100);\n      });\n    }\n  }; // Public methods\n\n\n  return {\n    init: function init(id) {\n      _body = KTUtil.getBody();\n      _element = KTUtil.getById(id);\n\n      if (!_element) {\n        return;\n      } // Initialize menu\n\n\n      _init();\n\n      _initHover();\n    },\n    getElement: function getElement() {\n      return _element;\n    },\n    getMenu: function getMenu() {\n      return _menuObject;\n    },\n    pauseDropdownHover: function pauseDropdownHover(time) {\n      if (_menuObject) {\n        _menuObject.pauseDropdownHover(time);\n      }\n    },\n    closeMobileOffcanvas: function closeMobileOffcanvas() {\n      if (_menuObject && KTUtil.isMobileDevice()) {\n        _menuObject.hide();\n      }\n    }\n  };\n}(); // Webpack support\n\n\nif (true) {\n  module.exports = KTLayoutAsideMenu;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/layout/base/aside-menu.js\n");

/***/ }),

/***/ "./resources/metronic/js/layout/base/aside-toggle.js":
/*!***********************************************************!*\
  !*** ./resources/metronic/js/layout/base/aside-toggle.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar KTLayoutAsideToggle = function () {\n  // Private properties\n  var _body;\n\n  var _element;\n\n  var _toggleObject; // Initialize\n\n\n  var _init = function _init() {\n    _toggleObject = new KTToggle(_element, _body, {\n      targetState: 'aside-minimize',\n      toggleState: 'active'\n    });\n\n    _toggleObject.on('toggle', function (toggle) {\n      // Update sticky card\n      if (typeof KTLayoutStickyCard !== 'undefined') {\n        KTLayoutStickyCard.update();\n      } // Pause header menu dropdowns\n\n\n      if (typeof KTLayoutHeaderMenu !== 'undefined') {\n        KTLayoutHeaderMenu.pauseDropdownHover(800);\n      } // Pause aside menu dropdowns\n\n\n      if (typeof KTLayoutAsideMenu !== 'undefined') {\n        KTLayoutAsideMenu.pauseDropdownHover(800);\n      } // Remember state in cookie\n\n\n      KTCookie.setCookie('kt_aside_toggle_state', toggle.getState()); // to set default minimized left aside use this cookie value in your\n      // server side code and add \"kt-primary--minimize aside-minimize\" classes to\n      // the body tag in order to initialize the minimized left aside mode during page loading.\n    });\n\n    _toggleObject.on('beforeToggle', function (toggle) {\n      if (KTUtil.hasClass(_body, 'aside-minimize') === false && KTUtil.hasClass(_body, 'aside-minimize-hover')) {\n        KTUtil.removeClass(_body, 'aside-minimize-hover');\n      }\n    });\n  }; // Public methods\n\n\n  return {\n    init: function init(id) {\n      _element = KTUtil.getById(id);\n      _body = KTUtil.getBody();\n\n      if (!_element) {\n        return;\n      } // Initialize\n\n\n      _init();\n    },\n    getElement: function getElement() {\n      return _element;\n    },\n    getToggle: function getToggle() {\n      return _toggleObject;\n    },\n    onToggle: function onToggle(handler) {\n      if (typeof _toggleObject.element !== 'undefined') {\n        _toggleObject.on('toggle', handler);\n      }\n    }\n  };\n}(); // Webpack support\n\n\nif (true) {\n  module.exports = KTLayoutAsideToggle;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvbGF5b3V0L2Jhc2UvYXNpZGUtdG9nZ2xlLmpzPzA2NWQiXSwibmFtZXMiOlsiS1RMYXlvdXRBc2lkZVRvZ2dsZSIsIl9ib2R5IiwiX2VsZW1lbnQiLCJfdG9nZ2xlT2JqZWN0IiwiX2luaXQiLCJLVFRvZ2dsZSIsInRhcmdldFN0YXRlIiwidG9nZ2xlU3RhdGUiLCJvbiIsInRvZ2dsZSIsIktUTGF5b3V0U3RpY2t5Q2FyZCIsInVwZGF0ZSIsIktUTGF5b3V0SGVhZGVyTWVudSIsInBhdXNlRHJvcGRvd25Ib3ZlciIsIktUTGF5b3V0QXNpZGVNZW51IiwiS1RDb29raWUiLCJzZXRDb29raWUiLCJnZXRTdGF0ZSIsIktUVXRpbCIsImhhc0NsYXNzIiwicmVtb3ZlQ2xhc3MiLCJpbml0IiwiaWQiLCJnZXRCeUlkIiwiZ2V0Qm9keSIsImdldEVsZW1lbnQiLCJnZXRUb2dnbGUiLCJvblRvZ2dsZSIsImhhbmRsZXIiLCJlbGVtZW50IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSUEsbUJBQW1CLEdBQUcsWUFBVztBQUNqQztBQUNBLE1BQUlDLEtBQUo7O0FBQ0EsTUFBSUMsUUFBSjs7QUFDQSxNQUFJQyxhQUFKLENBSmlDLENBTXBDOzs7QUFDQSxNQUFJQyxLQUFLLEdBQUcsU0FBUkEsS0FBUSxHQUFXO0FBQ3RCRCxpQkFBYSxHQUFHLElBQUlFLFFBQUosQ0FBYUgsUUFBYixFQUF1QkQsS0FBdkIsRUFBOEI7QUFDN0NLLGlCQUFXLEVBQUUsZ0JBRGdDO0FBRTdDQyxpQkFBVyxFQUFFO0FBRmdDLEtBQTlCLENBQWhCOztBQUtBSixpQkFBYSxDQUFDSyxFQUFkLENBQWlCLFFBQWpCLEVBQTJCLFVBQVNDLE1BQVQsRUFBaUI7QUFDbEM7QUFDQSxVQUFJLE9BQU9DLGtCQUFQLEtBQThCLFdBQWxDLEVBQStDO0FBQzNDQSwwQkFBa0IsQ0FBQ0MsTUFBbkI7QUFDSCxPQUppQyxDQU1sQzs7O0FBQ0EsVUFBSSxPQUFPQyxrQkFBUCxLQUE4QixXQUFsQyxFQUErQztBQUMzQ0EsMEJBQWtCLENBQUNDLGtCQUFuQixDQUFzQyxHQUF0QztBQUNILE9BVGlDLENBV2xDOzs7QUFDQSxVQUFJLE9BQU9DLGlCQUFQLEtBQTZCLFdBQWpDLEVBQThDO0FBQzFDQSx5QkFBaUIsQ0FBQ0Qsa0JBQWxCLENBQXFDLEdBQXJDO0FBQ0gsT0FkaUMsQ0FnQmxDOzs7QUFDVEUsY0FBUSxDQUFDQyxTQUFULENBQW1CLHVCQUFuQixFQUE0Q1AsTUFBTSxDQUFDUSxRQUFQLEVBQTVDLEVBakIyQyxDQWtCM0M7QUFDQTtBQUNBO0FBQ0EsS0FyQkQ7O0FBdUJBZCxpQkFBYSxDQUFDSyxFQUFkLENBQWlCLGNBQWpCLEVBQWlDLFVBQVNDLE1BQVQsRUFBaUI7QUFDakQsVUFBSVMsTUFBTSxDQUFDQyxRQUFQLENBQWdCbEIsS0FBaEIsRUFBdUIsZ0JBQXZCLE1BQTZDLEtBQTdDLElBQXNEaUIsTUFBTSxDQUFDQyxRQUFQLENBQWdCbEIsS0FBaEIsRUFBdUIsc0JBQXZCLENBQTFELEVBQTBHO0FBQ3pHaUIsY0FBTSxDQUFDRSxXQUFQLENBQW1CbkIsS0FBbkIsRUFBMEIsc0JBQTFCO0FBQ0E7QUFDRCxLQUpEO0FBS0EsR0FsQ0QsQ0FQb0MsQ0EyQ2pDOzs7QUFDSCxTQUFPO0FBQ05vQixRQUFJLEVBQUUsY0FBU0MsRUFBVCxFQUFhO0FBQ1RwQixjQUFRLEdBQUdnQixNQUFNLENBQUNLLE9BQVAsQ0FBZUQsRUFBZixDQUFYO0FBQ0FyQixXQUFLLEdBQUdpQixNQUFNLENBQUNNLE9BQVAsRUFBUjs7QUFFQSxVQUFJLENBQUN0QixRQUFMLEVBQWU7QUFDWDtBQUNILE9BTlEsQ0FRVDs7O0FBQ0FFLFdBQUs7QUFDZCxLQVhLO0FBYUFxQixjQUFVLEVBQUUsc0JBQVc7QUFDbkIsYUFBT3ZCLFFBQVA7QUFDSCxLQWZEO0FBaUJBd0IsYUFBUyxFQUFFLHFCQUFXO0FBQzNCLGFBQU92QixhQUFQO0FBQ0EsS0FuQks7QUFxQk53QixZQUFRLEVBQUUsa0JBQVNDLE9BQVQsRUFBa0I7QUFDM0IsVUFBSSxPQUFPekIsYUFBYSxDQUFDMEIsT0FBckIsS0FBaUMsV0FBckMsRUFBa0Q7QUFDakQxQixxQkFBYSxDQUFDSyxFQUFkLENBQWlCLFFBQWpCLEVBQTJCb0IsT0FBM0I7QUFDQTtBQUNEO0FBekJLLEdBQVA7QUEyQkEsQ0F2RXlCLEVBQTFCLEMsQ0F5RUE7OztBQUNBLElBQUksSUFBSixFQUFtQztBQUNsQ0UsUUFBTSxDQUFDQyxPQUFQLEdBQWlCL0IsbUJBQWpCO0FBQ0EiLCJmaWxlIjoiLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvbGF5b3V0L2Jhc2UvYXNpZGUtdG9nZ2xlLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG52YXIgS1RMYXlvdXRBc2lkZVRvZ2dsZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgLy8gUHJpdmF0ZSBwcm9wZXJ0aWVzXHJcbiAgICB2YXIgX2JvZHk7XHJcbiAgICB2YXIgX2VsZW1lbnQ7XHJcbiAgICB2YXIgX3RvZ2dsZU9iamVjdDtcclxuXHJcblx0Ly8gSW5pdGlhbGl6ZVxyXG5cdHZhciBfaW5pdCA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0X3RvZ2dsZU9iamVjdCA9IG5ldyBLVFRvZ2dsZShfZWxlbWVudCwgX2JvZHksIHtcclxuXHRcdFx0dGFyZ2V0U3RhdGU6ICdhc2lkZS1taW5pbWl6ZScsXHJcblx0XHRcdHRvZ2dsZVN0YXRlOiAnYWN0aXZlJ1xyXG5cdFx0fSk7XHJcblxyXG5cdFx0X3RvZ2dsZU9iamVjdC5vbigndG9nZ2xlJywgZnVuY3Rpb24odG9nZ2xlKSB7XHJcbiAgICAgICAgICAgIC8vIFVwZGF0ZSBzdGlja3kgY2FyZFxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIEtUTGF5b3V0U3RpY2t5Q2FyZCAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgIEtUTGF5b3V0U3RpY2t5Q2FyZC51cGRhdGUoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gUGF1c2UgaGVhZGVyIG1lbnUgZHJvcGRvd25zXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgS1RMYXlvdXRIZWFkZXJNZW51ICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgS1RMYXlvdXRIZWFkZXJNZW51LnBhdXNlRHJvcGRvd25Ib3Zlcig4MDApO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBQYXVzZSBhc2lkZSBtZW51IGRyb3Bkb3duc1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIEtUTGF5b3V0QXNpZGVNZW51ICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgS1RMYXlvdXRBc2lkZU1lbnUucGF1c2VEcm9wZG93bkhvdmVyKDgwMCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIFJlbWVtYmVyIHN0YXRlIGluIGNvb2tpZVxyXG5cdFx0XHRLVENvb2tpZS5zZXRDb29raWUoJ2t0X2FzaWRlX3RvZ2dsZV9zdGF0ZScsIHRvZ2dsZS5nZXRTdGF0ZSgpKTtcclxuXHRcdFx0Ly8gdG8gc2V0IGRlZmF1bHQgbWluaW1pemVkIGxlZnQgYXNpZGUgdXNlIHRoaXMgY29va2llIHZhbHVlIGluIHlvdXJcclxuXHRcdFx0Ly8gc2VydmVyIHNpZGUgY29kZSBhbmQgYWRkIFwia3QtcHJpbWFyeS0tbWluaW1pemUgYXNpZGUtbWluaW1pemVcIiBjbGFzc2VzIHRvXHJcblx0XHRcdC8vIHRoZSBib2R5IHRhZyBpbiBvcmRlciB0byBpbml0aWFsaXplIHRoZSBtaW5pbWl6ZWQgbGVmdCBhc2lkZSBtb2RlIGR1cmluZyBwYWdlIGxvYWRpbmcuXHJcblx0XHR9KTtcclxuXHJcblx0XHRfdG9nZ2xlT2JqZWN0Lm9uKCdiZWZvcmVUb2dnbGUnLCBmdW5jdGlvbih0b2dnbGUpIHtcclxuXHRcdFx0aWYgKEtUVXRpbC5oYXNDbGFzcyhfYm9keSwgJ2FzaWRlLW1pbmltaXplJykgPT09IGZhbHNlICYmIEtUVXRpbC5oYXNDbGFzcyhfYm9keSwgJ2FzaWRlLW1pbmltaXplLWhvdmVyJykpIHtcclxuXHRcdFx0XHRLVFV0aWwucmVtb3ZlQ2xhc3MoX2JvZHksICdhc2lkZS1taW5pbWl6ZS1ob3ZlcicpO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHR9XHJcblxyXG4gICAgLy8gUHVibGljIG1ldGhvZHNcclxuXHRyZXR1cm4ge1xyXG5cdFx0aW5pdDogZnVuY3Rpb24oaWQpIHtcclxuICAgICAgICAgICAgX2VsZW1lbnQgPSBLVFV0aWwuZ2V0QnlJZChpZCk7XHJcbiAgICAgICAgICAgIF9ib2R5ID0gS1RVdGlsLmdldEJvZHkoKTtcclxuXHJcbiAgICAgICAgICAgIGlmICghX2VsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gSW5pdGlhbGl6ZVxyXG4gICAgICAgICAgICBfaW5pdCgpO1xyXG5cdFx0fSxcclxuXHJcbiAgICAgICAgZ2V0RWxlbWVudDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfZWxlbWVudDtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBnZXRUb2dnbGU6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRyZXR1cm4gX3RvZ2dsZU9iamVjdDtcclxuXHRcdH0sXHJcblxyXG5cdFx0b25Ub2dnbGU6IGZ1bmN0aW9uKGhhbmRsZXIpIHtcclxuXHRcdFx0aWYgKHR5cGVvZiBfdG9nZ2xlT2JqZWN0LmVsZW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XHJcblx0XHRcdFx0X3RvZ2dsZU9iamVjdC5vbigndG9nZ2xlJywgaGFuZGxlcik7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9O1xyXG59KCk7XHJcblxyXG4vLyBXZWJwYWNrIHN1cHBvcnRcclxuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XHJcblx0bW9kdWxlLmV4cG9ydHMgPSBLVExheW91dEFzaWRlVG9nZ2xlO1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/metronic/js/layout/base/aside-toggle.js\n");

/***/ }),

/***/ "./resources/metronic/js/layout/base/aside.js":
/*!****************************************************!*\
  !*** ./resources/metronic/js/layout/base/aside.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar KTLayoutAside = function () {\n  // Private properties\n  var _body;\n\n  var _element;\n\n  var _offcanvasObject; // Private functions\n  // Initialize\n\n\n  var _init = function _init() {\n    var offcanvasClass = KTUtil.hasClass(_element, 'aside-offcanvas-default') ? 'aside-offcanvas-default' : 'aside'; // Initialize mobile aside offcanvas\n\n    _offcanvasObject = new KTOffcanvas(_element, {\n      baseClass: offcanvasClass,\n      overlay: true,\n      closeBy: 'kt_aside_close_btn',\n      toggleBy: {\n        target: 'kt_aside_mobile_toggle',\n        state: 'mobile-toggle-active'\n      }\n    });\n  }; // Public methods\n\n\n  return {\n    init: function init(id) {\n      _element = KTUtil.getById(id);\n      _body = KTUtil.getBody();\n\n      if (!_element) {\n        return;\n      } // Initialize\n\n\n      _init();\n    },\n    getElement: function getElement() {\n      return _element;\n    },\n    getOffcanvas: function getOffcanvas() {\n      return _offcanvasObject;\n    },\n    isFixed: function isFixed() {\n      return KTUtil.hasClass(_body, 'aside-fixed');\n    },\n    isMinimized: function isMinimized() {\n      return KTUtil.hasClass(_body, 'aside-fixed') && KTUtil.hasClass(_body, 'aside-minimize');\n    },\n    isHoverable: function isHoverable() {\n      return KTUtil.hasClass(_body, 'aside-fixed') && KTUtil.hasClass(_body, 'aside-minimize-hoverable');\n    }\n  };\n}(); // Webpack support\n\n\nif (true) {\n  module.exports = KTLayoutAside;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvbGF5b3V0L2Jhc2UvYXNpZGUuanM/ZWIxMSJdLCJuYW1lcyI6WyJLVExheW91dEFzaWRlIiwiX2JvZHkiLCJfZWxlbWVudCIsIl9vZmZjYW52YXNPYmplY3QiLCJfaW5pdCIsIm9mZmNhbnZhc0NsYXNzIiwiS1RVdGlsIiwiaGFzQ2xhc3MiLCJLVE9mZmNhbnZhcyIsImJhc2VDbGFzcyIsIm92ZXJsYXkiLCJjbG9zZUJ5IiwidG9nZ2xlQnkiLCJ0YXJnZXQiLCJzdGF0ZSIsImluaXQiLCJpZCIsImdldEJ5SWQiLCJnZXRCb2R5IiwiZ2V0RWxlbWVudCIsImdldE9mZmNhbnZhcyIsImlzRml4ZWQiLCJpc01pbmltaXplZCIsImlzSG92ZXJhYmxlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSUEsYUFBYSxHQUFHLFlBQVc7QUFDM0I7QUFDQSxNQUFJQyxLQUFKOztBQUNBLE1BQUlDLFFBQUo7O0FBQ0EsTUFBSUMsZ0JBQUosQ0FKMkIsQ0FNM0I7QUFDSDs7O0FBQ0EsTUFBSUMsS0FBSyxHQUFHLFNBQVJBLEtBQVEsR0FBVztBQUN0QixRQUFJQyxjQUFjLEdBQUdDLE1BQU0sQ0FBQ0MsUUFBUCxDQUFnQkwsUUFBaEIsRUFBMEIseUJBQTFCLElBQXVELHlCQUF2RCxHQUFtRixPQUF4RyxDQURzQixDQUdoQjs7QUFDTkMsb0JBQWdCLEdBQUcsSUFBSUssV0FBSixDQUFnQk4sUUFBaEIsRUFBMEI7QUFDNUNPLGVBQVMsRUFBRUosY0FEaUM7QUFFNUNLLGFBQU8sRUFBRSxJQUZtQztBQUc1Q0MsYUFBTyxFQUFFLG9CQUhtQztBQUk1Q0MsY0FBUSxFQUFFO0FBQ1RDLGNBQU0sRUFBRSx3QkFEQztBQUVUQyxhQUFLLEVBQUU7QUFGRTtBQUprQyxLQUExQixDQUFuQjtBQVNBLEdBYkQsQ0FSOEIsQ0F1QjNCOzs7QUFDSCxTQUFPO0FBQ05DLFFBQUksRUFBRSxjQUFTQyxFQUFULEVBQWE7QUFDVGQsY0FBUSxHQUFHSSxNQUFNLENBQUNXLE9BQVAsQ0FBZUQsRUFBZixDQUFYO0FBQ0FmLFdBQUssR0FBR0ssTUFBTSxDQUFDWSxPQUFQLEVBQVI7O0FBRUEsVUFBSSxDQUFDaEIsUUFBTCxFQUFlO0FBQ1g7QUFDSCxPQU5RLENBUVQ7OztBQUNBRSxXQUFLO0FBQ1IsS0FYRDtBQWFBZSxjQUFVLEVBQUUsc0JBQVc7QUFDbkIsYUFBT2pCLFFBQVA7QUFDSCxLQWZEO0FBaUJBa0IsZ0JBQVksRUFBRSx3QkFBVztBQUNyQixhQUFPakIsZ0JBQVA7QUFDSCxLQW5CRDtBQXFCQWtCLFdBQU8sRUFBRSxtQkFBVztBQUNoQixhQUFPZixNQUFNLENBQUNDLFFBQVAsQ0FBZ0JOLEtBQWhCLEVBQXVCLGFBQXZCLENBQVA7QUFDSCxLQXZCRDtBQXlCQXFCLGVBQVcsRUFBRSx1QkFBVztBQUNwQixhQUFRaEIsTUFBTSxDQUFDQyxRQUFQLENBQWdCTixLQUFoQixFQUF1QixhQUF2QixLQUF5Q0ssTUFBTSxDQUFDQyxRQUFQLENBQWdCTixLQUFoQixFQUF1QixnQkFBdkIsQ0FBakQ7QUFDSCxLQTNCRDtBQTZCQXNCLGVBQVcsRUFBRSx1QkFBVztBQUNwQixhQUFRakIsTUFBTSxDQUFDQyxRQUFQLENBQWdCTixLQUFoQixFQUF1QixhQUF2QixLQUF5Q0ssTUFBTSxDQUFDQyxRQUFQLENBQWdCTixLQUFoQixFQUF1QiwwQkFBdkIsQ0FBakQ7QUFDSDtBQS9CRCxHQUFQO0FBaUNBLENBekRtQixFQUFwQixDLENBMkRBOzs7QUFDQSxJQUFJLElBQUosRUFBbUM7QUFDbEN1QixRQUFNLENBQUNDLE9BQVAsR0FBaUJ6QixhQUFqQjtBQUNBIiwiZmlsZSI6Ii4vcmVzb3VyY2VzL21ldHJvbmljL2pzL2xheW91dC9iYXNlL2FzaWRlLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG52YXIgS1RMYXlvdXRBc2lkZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgLy8gUHJpdmF0ZSBwcm9wZXJ0aWVzXHJcbiAgICB2YXIgX2JvZHk7XHJcbiAgICB2YXIgX2VsZW1lbnQ7XHJcbiAgICB2YXIgX29mZmNhbnZhc09iamVjdDtcclxuXHJcbiAgICAvLyBQcml2YXRlIGZ1bmN0aW9uc1xyXG5cdC8vIEluaXRpYWxpemVcclxuXHR2YXIgX2luaXQgPSBmdW5jdGlvbigpIHtcclxuXHRcdHZhciBvZmZjYW52YXNDbGFzcyA9IEtUVXRpbC5oYXNDbGFzcyhfZWxlbWVudCwgJ2FzaWRlLW9mZmNhbnZhcy1kZWZhdWx0JykgPyAnYXNpZGUtb2ZmY2FudmFzLWRlZmF1bHQnIDogJ2FzaWRlJztcclxuXHJcbiAgICAgICAgLy8gSW5pdGlhbGl6ZSBtb2JpbGUgYXNpZGUgb2ZmY2FudmFzXHJcblx0XHRfb2ZmY2FudmFzT2JqZWN0ID0gbmV3IEtUT2ZmY2FudmFzKF9lbGVtZW50LCB7XHJcblx0XHRcdGJhc2VDbGFzczogb2ZmY2FudmFzQ2xhc3MsXHJcblx0XHRcdG92ZXJsYXk6IHRydWUsXHJcblx0XHRcdGNsb3NlQnk6ICdrdF9hc2lkZV9jbG9zZV9idG4nLFxyXG5cdFx0XHR0b2dnbGVCeToge1xyXG5cdFx0XHRcdHRhcmdldDogJ2t0X2FzaWRlX21vYmlsZV90b2dnbGUnLFxyXG5cdFx0XHRcdHN0YXRlOiAnbW9iaWxlLXRvZ2dsZS1hY3RpdmUnXHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdH1cclxuXHJcbiAgICAvLyBQdWJsaWMgbWV0aG9kc1xyXG5cdHJldHVybiB7XHJcblx0XHRpbml0OiBmdW5jdGlvbihpZCkge1xyXG4gICAgICAgICAgICBfZWxlbWVudCA9IEtUVXRpbC5nZXRCeUlkKGlkKTtcclxuICAgICAgICAgICAgX2JvZHkgPSBLVFV0aWwuZ2V0Qm9keSgpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFfZWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplXHJcbiAgICAgICAgICAgIF9pbml0KCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZ2V0RWxlbWVudDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfZWxlbWVudDtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBnZXRPZmZjYW52YXM6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX29mZmNhbnZhc09iamVjdDtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBpc0ZpeGVkOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIEtUVXRpbC5oYXNDbGFzcyhfYm9keSwgJ2FzaWRlLWZpeGVkJyk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgaXNNaW5pbWl6ZWQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKEtUVXRpbC5oYXNDbGFzcyhfYm9keSwgJ2FzaWRlLWZpeGVkJykgJiYgS1RVdGlsLmhhc0NsYXNzKF9ib2R5LCAnYXNpZGUtbWluaW1pemUnKSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgaXNIb3ZlcmFibGU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKEtUVXRpbC5oYXNDbGFzcyhfYm9keSwgJ2FzaWRlLWZpeGVkJykgJiYgS1RVdGlsLmhhc0NsYXNzKF9ib2R5LCAnYXNpZGUtbWluaW1pemUtaG92ZXJhYmxlJykpO1xyXG4gICAgICAgIH1cclxuXHR9O1xyXG59KCk7XHJcblxyXG4vLyBXZWJwYWNrIHN1cHBvcnRcclxuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XHJcblx0bW9kdWxlLmV4cG9ydHMgPSBLVExheW91dEFzaWRlO1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/metronic/js/layout/base/aside.js\n");

/***/ }),

/***/ "./resources/metronic/js/layout/base/brand.js":
/*!****************************************************!*\
  !*** ./resources/metronic/js/layout/base/brand.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar KTLayoutBrand = function () {\n  // Private properties\n  var _element; // Private functions\n\n\n  var _getHeight = function _getHeight() {\n    var height = 0;\n\n    if (_element) {\n      height = KTUtil.actualHeight(_element);\n    }\n\n    return height;\n  }; // Public methods\n\n\n  return {\n    init: function init(id) {\n      _element = KTUtil.getById(id);\n\n      if (!_element) {\n        return;\n      }\n    },\n    getElement: function getElement() {\n      return _element;\n    },\n    getHeight: function getHeight() {\n      return _getHeight();\n    }\n  };\n}(); // Webpack support\n\n\nif (true) {\n  module.exports = KTLayoutBrand;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvbGF5b3V0L2Jhc2UvYnJhbmQuanM/NWM5OSJdLCJuYW1lcyI6WyJLVExheW91dEJyYW5kIiwiX2VsZW1lbnQiLCJfZ2V0SGVpZ2h0IiwiaGVpZ2h0IiwiS1RVdGlsIiwiYWN0dWFsSGVpZ2h0IiwiaW5pdCIsImlkIiwiZ2V0QnlJZCIsImdldEVsZW1lbnQiLCJnZXRIZWlnaHQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJQSxhQUFhLEdBQUcsWUFBVztBQUMzQjtBQUNBLE1BQUlDLFFBQUosQ0FGMkIsQ0FJM0I7OztBQUNBLE1BQUlDLFVBQVUsR0FBRyxTQUFiQSxVQUFhLEdBQVc7QUFDeEIsUUFBSUMsTUFBTSxHQUFHLENBQWI7O0FBRUEsUUFBSUYsUUFBSixFQUFjO0FBQ1ZFLFlBQU0sR0FBR0MsTUFBTSxDQUFDQyxZQUFQLENBQW9CSixRQUFwQixDQUFUO0FBQ0g7O0FBRUQsV0FBT0UsTUFBUDtBQUNILEdBUkQsQ0FMMkIsQ0FlM0I7OztBQUNILFNBQU87QUFDTkcsUUFBSSxFQUFFLGNBQVNDLEVBQVQsRUFBYTtBQUNUTixjQUFRLEdBQUdHLE1BQU0sQ0FBQ0ksT0FBUCxDQUFlRCxFQUFmLENBQVg7O0FBRUEsVUFBSSxDQUFDTixRQUFMLEVBQWU7QUFDWDtBQUNIO0FBQ1YsS0FQSztBQVNBUSxjQUFVLEVBQUUsc0JBQVc7QUFDbkIsYUFBT1IsUUFBUDtBQUNILEtBWEQ7QUFhQVMsYUFBUyxFQUFFLHFCQUFXO0FBQ2xCLGFBQU9SLFVBQVUsRUFBakI7QUFDSDtBQWZELEdBQVA7QUFpQkEsQ0FqQ21CLEVBQXBCLEMsQ0FtQ0E7OztBQUNBLElBQUksSUFBSixFQUFtQztBQUNsQ1MsUUFBTSxDQUFDQyxPQUFQLEdBQWlCWixhQUFqQjtBQUNBIiwiZmlsZSI6Ii4vcmVzb3VyY2VzL21ldHJvbmljL2pzL2xheW91dC9iYXNlL2JyYW5kLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG52YXIgS1RMYXlvdXRCcmFuZCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgLy8gUHJpdmF0ZSBwcm9wZXJ0aWVzXHJcbiAgICB2YXIgX2VsZW1lbnQ7XHJcblxyXG4gICAgLy8gUHJpdmF0ZSBmdW5jdGlvbnNcclxuICAgIHZhciBfZ2V0SGVpZ2h0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIGhlaWdodCA9IDA7XHJcblxyXG4gICAgICAgIGlmIChfZWxlbWVudCkge1xyXG4gICAgICAgICAgICBoZWlnaHQgPSBLVFV0aWwuYWN0dWFsSGVpZ2h0KF9lbGVtZW50KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBoZWlnaHQ7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUHVibGljIG1ldGhvZHNcclxuXHRyZXR1cm4ge1xyXG5cdFx0aW5pdDogZnVuY3Rpb24oaWQpIHtcclxuICAgICAgICAgICAgX2VsZW1lbnQgPSBLVFV0aWwuZ2V0QnlJZChpZCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIV9lbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHRcdH0sXHJcblxyXG4gICAgICAgIGdldEVsZW1lbnQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX2VsZW1lbnQ7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZ2V0SGVpZ2h0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9nZXRIZWlnaHQoKTtcclxuICAgICAgICB9XHJcblx0fTtcclxufSgpO1xyXG5cclxuLy8gV2VicGFjayBzdXBwb3J0XHJcbmlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykge1xyXG5cdG1vZHVsZS5leHBvcnRzID0gS1RMYXlvdXRCcmFuZDtcclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/metronic/js/layout/base/brand.js\n");

/***/ }),

/***/ "./resources/metronic/js/layout/base/content.js":
/*!******************************************************!*\
  !*** ./resources/metronic/js/layout/base/content.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar KTLayoutContent = function () {\n  // Private properties\n  var _element; // Private functions\n\n\n  var _getHeight = function _getHeight() {\n    var height;\n    height = KTUtil.getViewPort().height;\n\n    if (_element) {\n      height = height - parseInt(KTUtil.css(_element, 'paddingTop')) - parseInt(KTUtil.css(_element, 'paddingBottom'));\n    }\n\n    height = height - KTLayoutHeader.getHeight();\n    height = height - KTLayoutSubheader.getHeight();\n    height = height - KTLayoutFooter.getHeight();\n    return height;\n  }; // Public methods\n\n\n  return {\n    init: function init(id) {\n      _element = KTUtil.getById(id);\n    },\n    getHeight: function getHeight() {\n      return _getHeight();\n    },\n    getElement: function getElement() {\n      return _element;\n    }\n  };\n}(); // Webpack support\n\n\nif (true) {\n  module.exports = KTLayoutContent;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvbGF5b3V0L2Jhc2UvY29udGVudC5qcz9hNTFjIl0sIm5hbWVzIjpbIktUTGF5b3V0Q29udGVudCIsIl9lbGVtZW50IiwiX2dldEhlaWdodCIsImhlaWdodCIsIktUVXRpbCIsImdldFZpZXdQb3J0IiwicGFyc2VJbnQiLCJjc3MiLCJLVExheW91dEhlYWRlciIsImdldEhlaWdodCIsIktUTGF5b3V0U3ViaGVhZGVyIiwiS1RMYXlvdXRGb290ZXIiLCJpbml0IiwiaWQiLCJnZXRCeUlkIiwiZ2V0RWxlbWVudCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUlBLGVBQWUsR0FBRyxZQUFXO0FBQzdCO0FBQ0EsTUFBSUMsUUFBSixDQUY2QixDQUloQzs7O0FBQ0EsTUFBSUMsVUFBVSxHQUFHLFNBQWJBLFVBQWEsR0FBVztBQUMzQixRQUFJQyxNQUFKO0FBRUFBLFVBQU0sR0FBR0MsTUFBTSxDQUFDQyxXQUFQLEdBQXFCRixNQUE5Qjs7QUFFTSxRQUFJRixRQUFKLEVBQWM7QUFDVkUsWUFBTSxHQUFHQSxNQUFNLEdBQUdHLFFBQVEsQ0FBQ0YsTUFBTSxDQUFDRyxHQUFQLENBQVdOLFFBQVgsRUFBcUIsWUFBckIsQ0FBRCxDQUFqQixHQUF3REssUUFBUSxDQUFDRixNQUFNLENBQUNHLEdBQVAsQ0FBV04sUUFBWCxFQUFxQixlQUFyQixDQUFELENBQXpFO0FBQ0g7O0FBRURFLFVBQU0sR0FBR0EsTUFBTSxHQUFHSyxjQUFjLENBQUNDLFNBQWYsRUFBbEI7QUFDQU4sVUFBTSxHQUFHQSxNQUFNLEdBQUdPLGlCQUFpQixDQUFDRCxTQUFsQixFQUFsQjtBQUNBTixVQUFNLEdBQUdBLE1BQU0sR0FBR1EsY0FBYyxDQUFDRixTQUFmLEVBQWxCO0FBRU4sV0FBT04sTUFBUDtBQUNBLEdBZEQsQ0FMZ0MsQ0FxQjdCOzs7QUFDSCxTQUFPO0FBQ05TLFFBQUksRUFBRSxjQUFTQyxFQUFULEVBQWE7QUFDVFosY0FBUSxHQUFHRyxNQUFNLENBQUNVLE9BQVAsQ0FBZUQsRUFBZixDQUFYO0FBQ1QsS0FISztBQUtOSixhQUFTLEVBQUUscUJBQVc7QUFDckIsYUFBT1AsVUFBVSxFQUFqQjtBQUNBLEtBUEs7QUFTQWEsY0FBVSxFQUFFLHNCQUFXO0FBQ25CLGFBQU9kLFFBQVA7QUFDSDtBQVhELEdBQVA7QUFhQSxDQW5DcUIsRUFBdEIsQyxDQXFDQTs7O0FBQ0EsSUFBSSxJQUFKLEVBQW1DO0FBQ2xDZSxRQUFNLENBQUNDLE9BQVAsR0FBaUJqQixlQUFqQjtBQUNBIiwiZmlsZSI6Ii4vcmVzb3VyY2VzL21ldHJvbmljL2pzL2xheW91dC9iYXNlL2NvbnRlbnQuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuXHJcbnZhciBLVExheW91dENvbnRlbnQgPSBmdW5jdGlvbigpIHtcclxuICAgIC8vIFByaXZhdGUgcHJvcGVydGllc1xyXG4gICAgdmFyIF9lbGVtZW50O1xyXG5cclxuXHQvLyBQcml2YXRlIGZ1bmN0aW9uc1xyXG5cdHZhciBfZ2V0SGVpZ2h0ID0gZnVuY3Rpb24oKSB7XHJcblx0XHR2YXIgaGVpZ2h0O1xyXG5cclxuXHRcdGhlaWdodCA9IEtUVXRpbC5nZXRWaWV3UG9ydCgpLmhlaWdodDtcclxuXHJcbiAgICAgICAgaWYgKF9lbGVtZW50KSB7XHJcbiAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KEtUVXRpbC5jc3MoX2VsZW1lbnQsICdwYWRkaW5nVG9wJykpIC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhfZWxlbWVudCwgJ3BhZGRpbmdCb3R0b20nKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBLVExheW91dEhlYWRlci5nZXRIZWlnaHQoKTtcclxuICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBLVExheW91dFN1YmhlYWRlci5nZXRIZWlnaHQoKTtcclxuICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBLVExheW91dEZvb3Rlci5nZXRIZWlnaHQoKTtcclxuXHJcblx0XHRyZXR1cm4gaGVpZ2h0O1xyXG5cdH1cclxuXHJcbiAgICAvLyBQdWJsaWMgbWV0aG9kc1xyXG5cdHJldHVybiB7XHJcblx0XHRpbml0OiBmdW5jdGlvbihpZCkge1xyXG4gICAgICAgICAgICBfZWxlbWVudCA9IEtUVXRpbC5nZXRCeUlkKGlkKTtcclxuXHRcdH0sXHJcblxyXG5cdFx0Z2V0SGVpZ2h0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0cmV0dXJuIF9nZXRIZWlnaHQoKTtcclxuXHRcdH0sXHJcblxyXG4gICAgICAgIGdldEVsZW1lbnQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX2VsZW1lbnQ7XHJcbiAgICAgICAgfVxyXG5cdH07XHJcbn0oKTtcclxuXHJcbi8vIFdlYnBhY2sgc3VwcG9ydFxyXG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRtb2R1bGUuZXhwb3J0cyA9IEtUTGF5b3V0Q29udGVudDtcclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/metronic/js/layout/base/content.js\n");

/***/ }),

/***/ "./resources/metronic/js/layout/base/footer.js":
/*!*****************************************************!*\
  !*** ./resources/metronic/js/layout/base/footer.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar KTLayoutFooter = function () {\n  // Private properties\n  var _element; // Private functions\n\n\n  var _getHeight = function _getHeight() {\n    var height = 0;\n\n    if (_element) {\n      height = KTUtil.actualHeight(_element);\n    }\n\n    return height;\n  }; // Public methods\n\n\n  return {\n    init: function init(id) {\n      _element = KTUtil.getById(id);\n    },\n    getHeight: function getHeight() {\n      return _getHeight();\n    },\n    getElement: function getElement() {\n      return _element;\n    }\n  };\n}(); // Webpack support\n\n\nif (true) {\n  module.exports = KTLayoutFooter;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvbGF5b3V0L2Jhc2UvZm9vdGVyLmpzPzQ5ZTUiXSwibmFtZXMiOlsiS1RMYXlvdXRGb290ZXIiLCJfZWxlbWVudCIsIl9nZXRIZWlnaHQiLCJoZWlnaHQiLCJLVFV0aWwiLCJhY3R1YWxIZWlnaHQiLCJpbml0IiwiaWQiLCJnZXRCeUlkIiwiZ2V0SGVpZ2h0IiwiZ2V0RWxlbWVudCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUlBLGNBQWMsR0FBRyxZQUFXO0FBQzVCO0FBQ0EsTUFBSUMsUUFBSixDQUY0QixDQUkvQjs7O0FBQ0EsTUFBSUMsVUFBVSxHQUFHLFNBQWJBLFVBQWEsR0FBVztBQUMzQixRQUFJQyxNQUFNLEdBQUcsQ0FBYjs7QUFFTSxRQUFJRixRQUFKLEVBQWM7QUFDVkUsWUFBTSxHQUFHQyxNQUFNLENBQUNDLFlBQVAsQ0FBb0JKLFFBQXBCLENBQVQ7QUFDSDs7QUFFUCxXQUFPRSxNQUFQO0FBQ0EsR0FSRCxDQUwrQixDQWU1Qjs7O0FBQ0gsU0FBTztBQUNORyxRQUFJLEVBQUUsY0FBU0MsRUFBVCxFQUFhO0FBQ1ROLGNBQVEsR0FBR0csTUFBTSxDQUFDSSxPQUFQLENBQWVELEVBQWYsQ0FBWDtBQUNULEtBSEs7QUFLTkUsYUFBUyxFQUFFLHFCQUFXO0FBQ3JCLGFBQU9QLFVBQVUsRUFBakI7QUFDQSxLQVBLO0FBU0FRLGNBQVUsRUFBRSxzQkFBVztBQUNuQixhQUFPVCxRQUFQO0FBQ0g7QUFYRCxHQUFQO0FBYUEsQ0E3Qm9CLEVBQXJCLEMsQ0ErQkE7OztBQUNBLElBQUksSUFBSixFQUFtQztBQUNsQ1UsUUFBTSxDQUFDQyxPQUFQLEdBQWlCWixjQUFqQjtBQUNBIiwiZmlsZSI6Ii4vcmVzb3VyY2VzL21ldHJvbmljL2pzL2xheW91dC9iYXNlL2Zvb3Rlci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5cclxudmFyIEtUTGF5b3V0Rm9vdGVyID0gZnVuY3Rpb24oKSB7XHJcbiAgICAvLyBQcml2YXRlIHByb3BlcnRpZXNcclxuICAgIHZhciBfZWxlbWVudDtcclxuXHJcblx0Ly8gUHJpdmF0ZSBmdW5jdGlvbnNcclxuXHR2YXIgX2dldEhlaWdodCA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIGhlaWdodCA9IDA7XHJcblxyXG4gICAgICAgIGlmIChfZWxlbWVudCkge1xyXG4gICAgICAgICAgICBoZWlnaHQgPSBLVFV0aWwuYWN0dWFsSGVpZ2h0KF9lbGVtZW50KTtcclxuICAgICAgICB9XHJcblxyXG5cdFx0cmV0dXJuIGhlaWdodDtcclxuXHR9XHJcblxyXG4gICAgLy8gUHVibGljIG1ldGhvZHNcclxuXHRyZXR1cm4ge1xyXG5cdFx0aW5pdDogZnVuY3Rpb24oaWQpIHtcclxuICAgICAgICAgICAgX2VsZW1lbnQgPSBLVFV0aWwuZ2V0QnlJZChpZCk7XHJcblx0XHR9LFxyXG5cclxuXHRcdGdldEhlaWdodDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdHJldHVybiBfZ2V0SGVpZ2h0KCk7XHJcblx0XHR9LFxyXG5cclxuICAgICAgICBnZXRFbGVtZW50OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9lbGVtZW50O1xyXG4gICAgICAgIH1cclxuXHR9O1xyXG59KCk7XHJcblxyXG4vLyBXZWJwYWNrIHN1cHBvcnRcclxuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XHJcblx0bW9kdWxlLmV4cG9ydHMgPSBLVExheW91dEZvb3RlcjtcclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/metronic/js/layout/base/footer.js\n");

/***/ }),

/***/ "./resources/metronic/js/layout/base/header-menu.js":
/*!**********************************************************!*\
  !*** ./resources/metronic/js/layout/base/header-menu.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar KTLayoutHeaderMenu = function () {\n  // Private properties\n  var _menuElement;\n\n  var _menuObject;\n\n  var _offcanvasElement;\n\n  var _offcanvasObject; // Private functions\n\n\n  var _init = function _init() {\n    _offcanvasObject = new KTOffcanvas(_offcanvasElement, {\n      overlay: true,\n      baseClass: 'header-menu-wrapper',\n      closeBy: 'kt_header_menu_mobile_close_btn',\n      toggleBy: {\n        target: 'kt_header_mobile_toggle',\n        state: 'mobile-toggle-active'\n      }\n    });\n    _menuObject = new KTMenu(_menuElement, {\n      submenu: {\n        desktop: 'dropdown',\n        tablet: 'accordion',\n        mobile: 'accordion'\n      },\n      accordion: {\n        slideSpeed: 200,\n        // accordion toggle slide speed in milliseconds\n        expandAll: false // allow having multiple expanded accordions in the menu\n\n      }\n    }); // Close aside offcanvas panel before page reload On tablet and mobile\n\n    _menuObject.on('linkClick', function (menu) {\n      if (KTUtil.isBreakpointDown('lg')) {\n        // Tablet and mobile mode\n        _offcanvasObject.hide(); // Hide offcanvas after general link click\n\n      }\n    });\n  }; // Public methods\n\n\n  return {\n    init: function init(menuId, offcanvasId) {\n      _menuElement = KTUtil.getById(menuId);\n      _offcanvasElement = KTUtil.getById(offcanvasId);\n\n      if (!_menuElement) {\n        return;\n      } // Initialize menu\n\n\n      _init();\n    },\n    getMenuElement: function getMenuElement() {\n      return _menuElement;\n    },\n    getOffcanvasElement: function getOffcanvasElement() {\n      return _offcanvasElement;\n    },\n    getMenu: function getMenu() {\n      return _menuObject;\n    },\n    pauseDropdownHover: function pauseDropdownHover(time) {\n      if (_menuObject) {\n        _menuObject.pauseDropdownHover(time);\n      }\n    },\n    getOffcanvas: function getOffcanvas() {\n      return _offcanvasObject;\n    },\n    closeMobileOffcanvas: function closeMobileOffcanvas() {\n      if (_menuObject && KTUtil.isMobileDevice()) {\n        _offcanvasObject.hide();\n      }\n    }\n  };\n}(); // Webpack support\n\n\nif (true) {\n  module.exports = KTLayoutHeaderMenu;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvbGF5b3V0L2Jhc2UvaGVhZGVyLW1lbnUuanM/NjRkYiJdLCJuYW1lcyI6WyJLVExheW91dEhlYWRlck1lbnUiLCJfbWVudUVsZW1lbnQiLCJfbWVudU9iamVjdCIsIl9vZmZjYW52YXNFbGVtZW50IiwiX29mZmNhbnZhc09iamVjdCIsIl9pbml0IiwiS1RPZmZjYW52YXMiLCJvdmVybGF5IiwiYmFzZUNsYXNzIiwiY2xvc2VCeSIsInRvZ2dsZUJ5IiwidGFyZ2V0Iiwic3RhdGUiLCJLVE1lbnUiLCJzdWJtZW51IiwiZGVza3RvcCIsInRhYmxldCIsIm1vYmlsZSIsImFjY29yZGlvbiIsInNsaWRlU3BlZWQiLCJleHBhbmRBbGwiLCJvbiIsIm1lbnUiLCJLVFV0aWwiLCJpc0JyZWFrcG9pbnREb3duIiwiaGlkZSIsImluaXQiLCJtZW51SWQiLCJvZmZjYW52YXNJZCIsImdldEJ5SWQiLCJnZXRNZW51RWxlbWVudCIsImdldE9mZmNhbnZhc0VsZW1lbnQiLCJnZXRNZW51IiwicGF1c2VEcm9wZG93bkhvdmVyIiwidGltZSIsImdldE9mZmNhbnZhcyIsImNsb3NlTW9iaWxlT2ZmY2FudmFzIiwiaXNNb2JpbGVEZXZpY2UiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJQSxrQkFBa0IsR0FBRyxZQUFXO0FBQ2hDO0FBQ0gsTUFBSUMsWUFBSjs7QUFDRyxNQUFJQyxXQUFKOztBQUNBLE1BQUlDLGlCQUFKOztBQUNBLE1BQUlDLGdCQUFKLENBTGdDLENBT2hDOzs7QUFDSCxNQUFJQyxLQUFLLEdBQUcsU0FBUkEsS0FBUSxHQUFXO0FBQ3RCRCxvQkFBZ0IsR0FBRyxJQUFJRSxXQUFKLENBQWdCSCxpQkFBaEIsRUFBbUM7QUFDckRJLGFBQU8sRUFBRSxJQUQ0QztBQUVyREMsZUFBUyxFQUFFLHFCQUYwQztBQUdyREMsYUFBTyxFQUFFLGlDQUg0QztBQUlyREMsY0FBUSxFQUFFO0FBQ1RDLGNBQU0sRUFBRSx5QkFEQztBQUVUQyxhQUFLLEVBQUU7QUFGRTtBQUoyQyxLQUFuQyxDQUFuQjtBQVVBVixlQUFXLEdBQUcsSUFBSVcsTUFBSixDQUFXWixZQUFYLEVBQXlCO0FBQ3RDYSxhQUFPLEVBQUU7QUFDUkMsZUFBTyxFQUFFLFVBREQ7QUFFUkMsY0FBTSxFQUFFLFdBRkE7QUFHUkMsY0FBTSxFQUFFO0FBSEEsT0FENkI7QUFNdENDLGVBQVMsRUFBRTtBQUNWQyxrQkFBVSxFQUFFLEdBREY7QUFDTztBQUNqQkMsaUJBQVMsRUFBRSxLQUZELENBRU87O0FBRlA7QUFOMkIsS0FBekIsQ0FBZCxDQVhzQixDQXVCdEI7O0FBQ01sQixlQUFXLENBQUNtQixFQUFaLENBQWUsV0FBZixFQUE0QixVQUFTQyxJQUFULEVBQWU7QUFDdkMsVUFBSUMsTUFBTSxDQUFDQyxnQkFBUCxDQUF3QixJQUF4QixDQUFKLEVBQW1DO0FBQUU7QUFDakNwQix3QkFBZ0IsQ0FBQ3FCLElBQWpCLEdBRCtCLENBQ047O0FBQzVCO0FBQ0osS0FKRDtBQUtOLEdBN0JELENBUm1DLENBdUNoQzs7O0FBQ0gsU0FBTztBQUNBQyxRQUFJLEVBQUUsY0FBU0MsTUFBVCxFQUFpQkMsV0FBakIsRUFBOEI7QUFDaEMzQixrQkFBWSxHQUFHc0IsTUFBTSxDQUFDTSxPQUFQLENBQWVGLE1BQWYsQ0FBZjtBQUNBeEIsdUJBQWlCLEdBQUdvQixNQUFNLENBQUNNLE9BQVAsQ0FBZUQsV0FBZixDQUFwQjs7QUFFQSxVQUFJLENBQUMzQixZQUFMLEVBQW1CO0FBQ2Y7QUFDSCxPQU4rQixDQVFoQzs7O0FBQ0FJLFdBQUs7QUFDZCxLQVhLO0FBYU55QixrQkFBYyxFQUFFLDBCQUFXO0FBQzFCLGFBQU83QixZQUFQO0FBQ0EsS0FmSztBQWlCQThCLHVCQUFtQixFQUFFLCtCQUFXO0FBQ3JDLGFBQU81QixpQkFBUDtBQUNBLEtBbkJLO0FBcUJBNkIsV0FBTyxFQUFFLG1CQUFXO0FBQ3pCLGFBQU85QixXQUFQO0FBQ0EsS0F2Qks7QUF5Qk4rQixzQkFBa0IsRUFBRSw0QkFBU0MsSUFBVCxFQUFlO0FBQ2xDLFVBQUloQyxXQUFKLEVBQWlCO0FBQ2hCQSxtQkFBVyxDQUFDK0Isa0JBQVosQ0FBK0JDLElBQS9CO0FBQ0E7QUFDRCxLQTdCSztBQStCQUMsZ0JBQVksRUFBRSx3QkFBVztBQUM5QixhQUFPL0IsZ0JBQVA7QUFDQSxLQWpDSztBQW1DTmdDLHdCQUFvQixFQUFFLGdDQUFXO0FBQ2hDLFVBQUlsQyxXQUFXLElBQUlxQixNQUFNLENBQUNjLGNBQVAsRUFBbkIsRUFBNEM7QUFDM0NqQyx3QkFBZ0IsQ0FBQ3FCLElBQWpCO0FBQ0E7QUFDRDtBQXZDSyxHQUFQO0FBeUNBLENBakZ3QixFQUF6QixDLENBbUZBOzs7QUFDQSxJQUFJLElBQUosRUFBbUM7QUFDbENhLFFBQU0sQ0FBQ0MsT0FBUCxHQUFpQnZDLGtCQUFqQjtBQUNBIiwiZmlsZSI6Ii4vcmVzb3VyY2VzL21ldHJvbmljL2pzL2xheW91dC9iYXNlL2hlYWRlci1tZW51LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG52YXIgS1RMYXlvdXRIZWFkZXJNZW51ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAvLyBQcml2YXRlIHByb3BlcnRpZXNcclxuXHR2YXIgX21lbnVFbGVtZW50O1xyXG4gICAgdmFyIF9tZW51T2JqZWN0O1xyXG4gICAgdmFyIF9vZmZjYW52YXNFbGVtZW50O1xyXG4gICAgdmFyIF9vZmZjYW52YXNPYmplY3Q7XHJcblxyXG4gICAgLy8gUHJpdmF0ZSBmdW5jdGlvbnNcclxuXHR2YXIgX2luaXQgPSBmdW5jdGlvbigpIHtcclxuXHRcdF9vZmZjYW52YXNPYmplY3QgPSBuZXcgS1RPZmZjYW52YXMoX29mZmNhbnZhc0VsZW1lbnQsIHtcclxuXHRcdFx0b3ZlcmxheTogdHJ1ZSxcclxuXHRcdFx0YmFzZUNsYXNzOiAnaGVhZGVyLW1lbnUtd3JhcHBlcicsXHJcblx0XHRcdGNsb3NlQnk6ICdrdF9oZWFkZXJfbWVudV9tb2JpbGVfY2xvc2VfYnRuJyxcclxuXHRcdFx0dG9nZ2xlQnk6IHtcclxuXHRcdFx0XHR0YXJnZXQ6ICdrdF9oZWFkZXJfbW9iaWxlX3RvZ2dsZScsXHJcblx0XHRcdFx0c3RhdGU6ICdtb2JpbGUtdG9nZ2xlLWFjdGl2ZSdcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHRcclxuXHRcdF9tZW51T2JqZWN0ID0gbmV3IEtUTWVudShfbWVudUVsZW1lbnQsIHtcclxuXHRcdFx0c3VibWVudToge1xyXG5cdFx0XHRcdGRlc2t0b3A6ICdkcm9wZG93bicsXHJcblx0XHRcdFx0dGFibGV0OiAnYWNjb3JkaW9uJyxcclxuXHRcdFx0XHRtb2JpbGU6ICdhY2NvcmRpb24nXHJcblx0XHRcdH0sXHJcblx0XHRcdGFjY29yZGlvbjoge1xyXG5cdFx0XHRcdHNsaWRlU3BlZWQ6IDIwMCwgLy8gYWNjb3JkaW9uIHRvZ2dsZSBzbGlkZSBzcGVlZCBpbiBtaWxsaXNlY29uZHNcclxuXHRcdFx0XHRleHBhbmRBbGw6IGZhbHNlIC8vIGFsbG93IGhhdmluZyBtdWx0aXBsZSBleHBhbmRlZCBhY2NvcmRpb25zIGluIHRoZSBtZW51XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cclxuXHRcdC8vIENsb3NlIGFzaWRlIG9mZmNhbnZhcyBwYW5lbCBiZWZvcmUgcGFnZSByZWxvYWQgT24gdGFibGV0IGFuZCBtb2JpbGVcclxuICAgICAgICBfbWVudU9iamVjdC5vbignbGlua0NsaWNrJywgZnVuY3Rpb24obWVudSkge1xyXG4gICAgICAgICAgICBpZiAoS1RVdGlsLmlzQnJlYWtwb2ludERvd24oJ2xnJykpIHsgLy8gVGFibGV0IGFuZCBtb2JpbGUgbW9kZVxyXG4gICAgICAgICAgICAgICAgX29mZmNhbnZhc09iamVjdC5oaWRlKCk7IC8vIEhpZGUgb2ZmY2FudmFzIGFmdGVyIGdlbmVyYWwgbGluayBjbGlja1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblx0fVxyXG5cclxuICAgIC8vIFB1YmxpYyBtZXRob2RzXHJcblx0cmV0dXJuIHtcclxuICAgICAgICBpbml0OiBmdW5jdGlvbihtZW51SWQsIG9mZmNhbnZhc0lkKSB7XHJcbiAgICAgICAgICAgIF9tZW51RWxlbWVudCA9IEtUVXRpbC5nZXRCeUlkKG1lbnVJZCk7XHJcbiAgICAgICAgICAgIF9vZmZjYW52YXNFbGVtZW50ID0gS1RVdGlsLmdldEJ5SWQob2ZmY2FudmFzSWQpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFfbWVudUVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gSW5pdGlhbGl6ZSBtZW51XHJcbiAgICAgICAgICAgIF9pbml0KCk7XHJcblx0XHR9LFxyXG5cclxuXHRcdGdldE1lbnVFbGVtZW50OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0cmV0dXJuIF9tZW51RWxlbWVudDtcclxuXHRcdH0sXHJcblxyXG4gICAgICAgIGdldE9mZmNhbnZhc0VsZW1lbnQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRyZXR1cm4gX29mZmNhbnZhc0VsZW1lbnQ7XHJcblx0XHR9LFxyXG5cclxuICAgICAgICBnZXRNZW51OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0cmV0dXJuIF9tZW51T2JqZWN0O1xyXG5cdFx0fSxcclxuXHJcblx0XHRwYXVzZURyb3Bkb3duSG92ZXI6IGZ1bmN0aW9uKHRpbWUpIHtcclxuXHRcdFx0aWYgKF9tZW51T2JqZWN0KSB7XHJcblx0XHRcdFx0X21lbnVPYmplY3QucGF1c2VEcm9wZG93bkhvdmVyKHRpbWUpO1xyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cclxuICAgICAgICBnZXRPZmZjYW52YXM6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRyZXR1cm4gX29mZmNhbnZhc09iamVjdDtcclxuXHRcdH0sXHJcblxyXG5cdFx0Y2xvc2VNb2JpbGVPZmZjYW52YXM6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRpZiAoX21lbnVPYmplY3QgJiYgS1RVdGlsLmlzTW9iaWxlRGV2aWNlKCkpIHtcclxuXHRcdFx0XHRfb2ZmY2FudmFzT2JqZWN0LmhpZGUoKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH07XHJcbn0oKTtcclxuXHJcbi8vIFdlYnBhY2sgc3VwcG9ydFxyXG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRtb2R1bGUuZXhwb3J0cyA9IEtUTGF5b3V0SGVhZGVyTWVudTtcclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/metronic/js/layout/base/header-menu.js\n");

/***/ }),

/***/ "./resources/metronic/js/layout/base/header-topbar.js":
/*!************************************************************!*\
  !*** ./resources/metronic/js/layout/base/header-topbar.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar KTLayoutHeaderTopbar = function () {\n  // Private properties\n  var _toggleElement;\n\n  var _toggleObject; // Private functions\n\n\n  var _init = function _init() {\n    _toggleObject = new KTToggle(_toggleElement, KTUtil.getBody(), {\n      targetState: 'topbar-mobile-on',\n      toggleState: 'active'\n    });\n  }; // Public methods\n\n\n  return {\n    init: function init(id) {\n      _toggleElement = KTUtil.getById(id);\n\n      if (!_toggleElement) {\n        return;\n      } // Initialize\n\n\n      _init();\n    },\n    getToggleElement: function getToggleElement() {\n      return _toggleElement;\n    }\n  };\n}(); // Webpack support\n\n\nif (true) {\n  module.exports = KTLayoutHeaderTopbar;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvbGF5b3V0L2Jhc2UvaGVhZGVyLXRvcGJhci5qcz9iZmVmIl0sIm5hbWVzIjpbIktUTGF5b3V0SGVhZGVyVG9wYmFyIiwiX3RvZ2dsZUVsZW1lbnQiLCJfdG9nZ2xlT2JqZWN0IiwiX2luaXQiLCJLVFRvZ2dsZSIsIktUVXRpbCIsImdldEJvZHkiLCJ0YXJnZXRTdGF0ZSIsInRvZ2dsZVN0YXRlIiwiaW5pdCIsImlkIiwiZ2V0QnlJZCIsImdldFRvZ2dsZUVsZW1lbnQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJQSxvQkFBb0IsR0FBRyxZQUFXO0FBQ2xDO0FBQ0gsTUFBSUMsY0FBSjs7QUFDRyxNQUFJQyxhQUFKLENBSGtDLENBS2xDOzs7QUFDQSxNQUFJQyxLQUFLLEdBQUcsU0FBUkEsS0FBUSxHQUFXO0FBQ25CRCxpQkFBYSxHQUFHLElBQUlFLFFBQUosQ0FBYUgsY0FBYixFQUE2QkksTUFBTSxDQUFDQyxPQUFQLEVBQTdCLEVBQStDO0FBQzNEQyxpQkFBVyxFQUFFLGtCQUQ4QztBQUUzREMsaUJBQVcsRUFBRTtBQUY4QyxLQUEvQyxDQUFoQjtBQUlILEdBTEQsQ0FOa0MsQ0FhbEM7OztBQUNILFNBQU87QUFDTkMsUUFBSSxFQUFFLGNBQVNDLEVBQVQsRUFBYTtBQUNUVCxvQkFBYyxHQUFHSSxNQUFNLENBQUNNLE9BQVAsQ0FBZUQsRUFBZixDQUFqQjs7QUFFVCxVQUFJLENBQUNULGNBQUwsRUFBcUI7QUFDUjtBQUNILE9BTFEsQ0FPVDs7O0FBQ0FFLFdBQUs7QUFDZCxLQVZLO0FBWUFTLG9CQUFnQixFQUFFLDRCQUFXO0FBQ3pCLGFBQU9YLGNBQVA7QUFDSDtBQWRELEdBQVA7QUFnQkEsQ0E5QjBCLEVBQTNCLEMsQ0FnQ0E7OztBQUNBLElBQUksSUFBSixFQUFtQztBQUNsQ1ksUUFBTSxDQUFDQyxPQUFQLEdBQWlCZCxvQkFBakI7QUFDQSIsImZpbGUiOiIuL3Jlc291cmNlcy9tZXRyb25pYy9qcy9sYXlvdXQvYmFzZS9oZWFkZXItdG9wYmFyLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG52YXIgS1RMYXlvdXRIZWFkZXJUb3BiYXIgPSBmdW5jdGlvbigpIHtcclxuICAgIC8vIFByaXZhdGUgcHJvcGVydGllc1xyXG5cdHZhciBfdG9nZ2xlRWxlbWVudDtcclxuICAgIHZhciBfdG9nZ2xlT2JqZWN0O1xyXG5cclxuICAgIC8vIFByaXZhdGUgZnVuY3Rpb25zXHJcbiAgICB2YXIgX2luaXQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBfdG9nZ2xlT2JqZWN0ID0gbmV3IEtUVG9nZ2xlKF90b2dnbGVFbGVtZW50LCBLVFV0aWwuZ2V0Qm9keSgpLCB7XHJcbiAgICAgICAgICAgIHRhcmdldFN0YXRlOiAndG9wYmFyLW1vYmlsZS1vbicsXHJcbiAgICAgICAgICAgIHRvZ2dsZVN0YXRlOiAnYWN0aXZlJyxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBQdWJsaWMgbWV0aG9kc1xyXG5cdHJldHVybiB7XHJcblx0XHRpbml0OiBmdW5jdGlvbihpZCkge1xyXG4gICAgICAgICAgICBfdG9nZ2xlRWxlbWVudCA9IEtUVXRpbC5nZXRCeUlkKGlkKTtcclxuXHJcblx0XHRcdGlmICghX3RvZ2dsZUVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gSW5pdGlhbGl6ZVxyXG4gICAgICAgICAgICBfaW5pdCgpO1xyXG5cdFx0fSxcclxuXHJcbiAgICAgICAgZ2V0VG9nZ2xlRWxlbWVudDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfdG9nZ2xlRWxlbWVudDtcclxuICAgICAgICB9XHJcblx0fTtcclxufSgpO1xyXG5cclxuLy8gV2VicGFjayBzdXBwb3J0XHJcbmlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykge1xyXG5cdG1vZHVsZS5leHBvcnRzID0gS1RMYXlvdXRIZWFkZXJUb3BiYXI7XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/metronic/js/layout/base/header-topbar.js\n");

/***/ }),

/***/ "./resources/metronic/js/layout/base/header.js":
/*!*****************************************************!*\
  !*** ./resources/metronic/js/layout/base/header.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar KTLayoutHeader = function () {\n  // Private properties\n  var _element;\n\n  var _elementForMobile;\n\n  var _object; // Private functions\n  // Get Height\n\n\n  var _getHeight = function _getHeight() {\n    var height = 0;\n\n    if (_element) {\n      height = KTUtil.actualHeight(_element) + 1;\n    }\n\n    return height;\n  }; // Get Height\n\n\n  var _getHeightForMobile = function _getHeightForMobile() {\n    var height;\n    height = KTUtil.actualHeight(_elementForMobile);\n    return height;\n  }; // Public Methods\n\n\n  return {\n    init: function init(id, idForMobile) {\n      _element = KTUtil.getById(id);\n      _elementForMobile = KTUtil.getById(idForMobile);\n\n      if (!_element) {\n        return;\n      }\n    },\n    isFixed: function isFixed() {\n      return KTUtil.hasClass(KTUtil.getBody(), 'header-fixed');\n    },\n    isFixedForMobile: function isFixedForMobile() {\n      return KTUtil.hasClass(KTUtil.getBody(), 'header-mobile-fixed');\n    },\n    getElement: function getElement() {\n      return _element;\n    },\n    getElementForMobile: function getElementForMobile() {\n      return _elementForMobile;\n    },\n    getHeader: function getHeader() {\n      return _object;\n    },\n    getHeight: function getHeight() {\n      return _getHeight();\n    },\n    getHeightForMobile: function getHeightForMobile() {\n      return _getHeightForMobile();\n    }\n  };\n}(); // Webpack support\n\n\nif (true) {\n  module.exports = KTLayoutHeader;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvbGF5b3V0L2Jhc2UvaGVhZGVyLmpzPzUyODYiXSwibmFtZXMiOlsiS1RMYXlvdXRIZWFkZXIiLCJfZWxlbWVudCIsIl9lbGVtZW50Rm9yTW9iaWxlIiwiX29iamVjdCIsIl9nZXRIZWlnaHQiLCJoZWlnaHQiLCJLVFV0aWwiLCJhY3R1YWxIZWlnaHQiLCJfZ2V0SGVpZ2h0Rm9yTW9iaWxlIiwiaW5pdCIsImlkIiwiaWRGb3JNb2JpbGUiLCJnZXRCeUlkIiwiaXNGaXhlZCIsImhhc0NsYXNzIiwiZ2V0Qm9keSIsImlzRml4ZWRGb3JNb2JpbGUiLCJnZXRFbGVtZW50IiwiZ2V0RWxlbWVudEZvck1vYmlsZSIsImdldEhlYWRlciIsImdldEhlaWdodCIsImdldEhlaWdodEZvck1vYmlsZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUlBLGNBQWMsR0FBRyxZQUFXO0FBQzVCO0FBQ0EsTUFBSUMsUUFBSjs7QUFDQSxNQUFJQyxpQkFBSjs7QUFDQSxNQUFJQyxPQUFKLENBSjRCLENBTS9CO0FBQ0c7OztBQUNBLE1BQUlDLFVBQVUsR0FBRyxTQUFiQSxVQUFhLEdBQVc7QUFDeEIsUUFBSUMsTUFBTSxHQUFHLENBQWI7O0FBRUEsUUFBSUosUUFBSixFQUFjO0FBQ1ZJLFlBQU0sR0FBR0MsTUFBTSxDQUFDQyxZQUFQLENBQW9CTixRQUFwQixJQUFnQyxDQUF6QztBQUNIOztBQUVELFdBQU9JLE1BQVA7QUFDSCxHQVJELENBUjRCLENBa0I1Qjs7O0FBQ0EsTUFBSUcsbUJBQW1CLEdBQUcsU0FBdEJBLG1CQUFzQixHQUFXO0FBQ2pDLFFBQUlILE1BQUo7QUFFQUEsVUFBTSxHQUFHQyxNQUFNLENBQUNDLFlBQVAsQ0FBb0JMLGlCQUFwQixDQUFUO0FBRUEsV0FBT0csTUFBUDtBQUNILEdBTkQsQ0FuQjRCLENBMkI1Qjs7O0FBQ0gsU0FBTztBQUNOSSxRQUFJLEVBQUUsY0FBU0MsRUFBVCxFQUFhQyxXQUFiLEVBQTBCO0FBQ3RCVixjQUFRLEdBQUdLLE1BQU0sQ0FBQ00sT0FBUCxDQUFlRixFQUFmLENBQVg7QUFDQVIsdUJBQWlCLEdBQUdJLE1BQU0sQ0FBQ00sT0FBUCxDQUFlRCxXQUFmLENBQXBCOztBQUVBLFVBQUksQ0FBQ1YsUUFBTCxFQUFlO0FBQ1g7QUFDSDtBQUNWLEtBUks7QUFVQVksV0FBTyxFQUFFLG1CQUFXO0FBQ2hCLGFBQU9QLE1BQU0sQ0FBQ1EsUUFBUCxDQUFnQlIsTUFBTSxDQUFDUyxPQUFQLEVBQWhCLEVBQWtDLGNBQWxDLENBQVA7QUFDSCxLQVpEO0FBY0FDLG9CQUFnQixFQUFFLDRCQUFXO0FBQ3pCLGFBQU9WLE1BQU0sQ0FBQ1EsUUFBUCxDQUFnQlIsTUFBTSxDQUFDUyxPQUFQLEVBQWhCLEVBQWtDLHFCQUFsQyxDQUFQO0FBQ0gsS0FoQkQ7QUFrQkFFLGNBQVUsRUFBRSxzQkFBVztBQUNuQixhQUFPaEIsUUFBUDtBQUNILEtBcEJEO0FBc0JBaUIsdUJBQW1CLEVBQUUsK0JBQVc7QUFDNUIsYUFBT2hCLGlCQUFQO0FBQ0gsS0F4QkQ7QUEwQkFpQixhQUFTLEVBQUUscUJBQVc7QUFDbEIsYUFBT2hCLE9BQVA7QUFDSCxLQTVCRDtBQThCQWlCLGFBQVMsRUFBRSxxQkFBVztBQUNsQixhQUFPaEIsVUFBVSxFQUFqQjtBQUNILEtBaENEO0FBa0NBaUIsc0JBQWtCLEVBQUUsOEJBQVc7QUFDM0IsYUFBT2IsbUJBQW1CLEVBQTFCO0FBQ0g7QUFwQ0QsR0FBUDtBQXNDQSxDQWxFb0IsRUFBckIsQyxDQW9FQTs7O0FBQ0EsSUFBSSxJQUFKLEVBQW1DO0FBQ2xDYyxRQUFNLENBQUNDLE9BQVAsR0FBaUJ2QixjQUFqQjtBQUNBIiwiZmlsZSI6Ii4vcmVzb3VyY2VzL21ldHJvbmljL2pzL2xheW91dC9iYXNlL2hlYWRlci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5cclxudmFyIEtUTGF5b3V0SGVhZGVyID0gZnVuY3Rpb24oKSB7XHJcbiAgICAvLyBQcml2YXRlIHByb3BlcnRpZXNcclxuICAgIHZhciBfZWxlbWVudDtcclxuICAgIHZhciBfZWxlbWVudEZvck1vYmlsZTtcclxuICAgIHZhciBfb2JqZWN0O1xyXG5cclxuXHQvLyBQcml2YXRlIGZ1bmN0aW9uc1xyXG4gICAgLy8gR2V0IEhlaWdodFxyXG4gICAgdmFyIF9nZXRIZWlnaHQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgaGVpZ2h0ID0gMDtcclxuXHJcbiAgICAgICAgaWYgKF9lbGVtZW50KSB7XHJcbiAgICAgICAgICAgIGhlaWdodCA9IEtUVXRpbC5hY3R1YWxIZWlnaHQoX2VsZW1lbnQpICsgMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBoZWlnaHQ7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gR2V0IEhlaWdodFxyXG4gICAgdmFyIF9nZXRIZWlnaHRGb3JNb2JpbGUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgaGVpZ2h0O1xyXG5cclxuICAgICAgICBoZWlnaHQgPSBLVFV0aWwuYWN0dWFsSGVpZ2h0KF9lbGVtZW50Rm9yTW9iaWxlKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGhlaWdodDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBQdWJsaWMgTWV0aG9kc1xyXG5cdHJldHVybiB7XHJcblx0XHRpbml0OiBmdW5jdGlvbihpZCwgaWRGb3JNb2JpbGUpIHtcclxuICAgICAgICAgICAgX2VsZW1lbnQgPSBLVFV0aWwuZ2V0QnlJZChpZCk7XHJcbiAgICAgICAgICAgIF9lbGVtZW50Rm9yTW9iaWxlID0gS1RVdGlsLmdldEJ5SWQoaWRGb3JNb2JpbGUpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFfZWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblx0XHR9LFxyXG5cclxuICAgICAgICBpc0ZpeGVkOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIEtUVXRpbC5oYXNDbGFzcyhLVFV0aWwuZ2V0Qm9keSgpLCAnaGVhZGVyLWZpeGVkJylcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBpc0ZpeGVkRm9yTW9iaWxlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIEtUVXRpbC5oYXNDbGFzcyhLVFV0aWwuZ2V0Qm9keSgpLCAnaGVhZGVyLW1vYmlsZS1maXhlZCcpXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZ2V0RWxlbWVudDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfZWxlbWVudDtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBnZXRFbGVtZW50Rm9yTW9iaWxlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9lbGVtZW50Rm9yTW9iaWxlO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGdldEhlYWRlcjogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfb2JqZWN0O1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGdldEhlaWdodDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfZ2V0SGVpZ2h0KCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZ2V0SGVpZ2h0Rm9yTW9iaWxlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9nZXRIZWlnaHRGb3JNb2JpbGUoKTtcclxuICAgICAgICB9XHJcblx0fTtcclxufSgpO1xyXG5cclxuLy8gV2VicGFjayBzdXBwb3J0XHJcbmlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykge1xyXG5cdG1vZHVsZS5leHBvcnRzID0gS1RMYXlvdXRIZWFkZXI7XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/metronic/js/layout/base/header.js\n");

/***/ }),

/***/ "./resources/metronic/js/layout/base/sticky-card.js":
/*!**********************************************************!*\
  !*** ./resources/metronic/js/layout/base/sticky-card.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar KTLayoutStickyCard = function () {\n  // Private properties\n  var _element;\n\n  var _object; // Private functions\n\n\n  var _init = function _init() {\n    var offset = 300;\n\n    if (typeof KTLayoutHeader !== 'undefined') {\n      offset = KTLayoutHeader.getHeight();\n    }\n\n    _object = new KTCard(_element, {\n      sticky: {\n        offset: offset,\n        zIndex: 90,\n        position: {\n          top: function top() {\n            var pos = 0;\n            var body = KTUtil.getBody();\n\n            if (KTUtil.isBreakpointUp('lg')) {\n              if (typeof KTLayoutHeader !== 'undefined' && KTLayoutHeader.isFixed()) {\n                pos = pos + KTLayoutHeader.getHeight();\n              }\n\n              if (typeof KTLayoutSubheader !== 'undefined' && KTLayoutSubheader.isFixed()) {\n                pos = pos + KTLayoutSubheader.getHeight();\n              }\n            } else {\n              if (typeof KTLayoutHeader !== 'undefined' && KTLayoutHeader.isFixedForMobile()) {\n                pos = pos + KTLayoutHeader.getHeightForMobile();\n              }\n            }\n\n            pos = pos - 1; // remove header border width\n\n            return pos;\n          },\n          left: function left(card) {\n            return KTUtil.offset(_element).left;\n          },\n          right: function right(card) {\n            var body = KTUtil.getBody();\n            var cardWidth = parseInt(KTUtil.css(_element, 'width'));\n            var bodyWidth = parseInt(KTUtil.css(body, 'width'));\n            var cardOffsetLeft = KTUtil.offset(_element).left;\n            return bodyWidth - cardWidth - cardOffsetLeft;\n          }\n        }\n      }\n    });\n\n    _object.initSticky();\n\n    KTUtil.addResizeHandler(function () {\n      _object.updateSticky();\n    });\n  }; // Public methods\n\n\n  return {\n    init: function init(id) {\n      _element = KTUtil.getById(id);\n\n      if (!_element) {\n        return;\n      } // Initialize\n\n\n      _init();\n    },\n    update: function update() {\n      if (_object) {\n        _object.updateSticky();\n      }\n    }\n  };\n}(); // Webpack support\n\n\nif (true) {\n  module.exports = KTLayoutStickyCard;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvbGF5b3V0L2Jhc2Uvc3RpY2t5LWNhcmQuanM/ODdhMSJdLCJuYW1lcyI6WyJLVExheW91dFN0aWNreUNhcmQiLCJfZWxlbWVudCIsIl9vYmplY3QiLCJfaW5pdCIsIm9mZnNldCIsIktUTGF5b3V0SGVhZGVyIiwiZ2V0SGVpZ2h0IiwiS1RDYXJkIiwic3RpY2t5IiwiekluZGV4IiwicG9zaXRpb24iLCJ0b3AiLCJwb3MiLCJib2R5IiwiS1RVdGlsIiwiZ2V0Qm9keSIsImlzQnJlYWtwb2ludFVwIiwiaXNGaXhlZCIsIktUTGF5b3V0U3ViaGVhZGVyIiwiaXNGaXhlZEZvck1vYmlsZSIsImdldEhlaWdodEZvck1vYmlsZSIsImxlZnQiLCJjYXJkIiwicmlnaHQiLCJjYXJkV2lkdGgiLCJwYXJzZUludCIsImNzcyIsImJvZHlXaWR0aCIsImNhcmRPZmZzZXRMZWZ0IiwiaW5pdFN0aWNreSIsImFkZFJlc2l6ZUhhbmRsZXIiLCJ1cGRhdGVTdGlja3kiLCJpbml0IiwiaWQiLCJnZXRCeUlkIiwidXBkYXRlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSUEsa0JBQWtCLEdBQUcsWUFBVztBQUNoQztBQUNILE1BQUlDLFFBQUo7O0FBQ0csTUFBSUMsT0FBSixDQUhnQyxDQUtuQzs7O0FBQ0EsTUFBSUMsS0FBSyxHQUFHLFNBQVJBLEtBQVEsR0FBVztBQUN0QixRQUFJQyxNQUFNLEdBQUcsR0FBYjs7QUFFQSxRQUFJLE9BQU9DLGNBQVAsS0FBMEIsV0FBOUIsRUFBMkM7QUFDMUNELFlBQU0sR0FBR0MsY0FBYyxDQUFDQyxTQUFmLEVBQVQ7QUFDQTs7QUFFS0osV0FBTyxHQUFHLElBQUlLLE1BQUosQ0FBV04sUUFBWCxFQUFxQjtBQUNwQ08sWUFBTSxFQUFFO0FBQ1BKLGNBQU0sRUFBRUEsTUFERDtBQUVQSyxjQUFNLEVBQUUsRUFGRDtBQUdQQyxnQkFBUSxFQUFFO0FBQ1RDLGFBQUcsRUFBRSxlQUFXO0FBQ2YsZ0JBQUlDLEdBQUcsR0FBRyxDQUFWO0FBQ2tCLGdCQUFJQyxJQUFJLEdBQUdDLE1BQU0sQ0FBQ0MsT0FBUCxFQUFYOztBQUVsQixnQkFBSUQsTUFBTSxDQUFDRSxjQUFQLENBQXNCLElBQXRCLENBQUosRUFBaUM7QUFDaEMsa0JBQUksT0FBT1gsY0FBUCxLQUEwQixXQUExQixJQUF5Q0EsY0FBYyxDQUFDWSxPQUFmLEVBQTdDLEVBQXVFO0FBQ3RFTCxtQkFBRyxHQUFHQSxHQUFHLEdBQUdQLGNBQWMsQ0FBQ0MsU0FBZixFQUFaO0FBQ0E7O0FBRUQsa0JBQUksT0FBT1ksaUJBQVAsS0FBNkIsV0FBN0IsSUFBNENBLGlCQUFpQixDQUFDRCxPQUFsQixFQUFoRCxFQUE2RTtBQUM1RUwsbUJBQUcsR0FBR0EsR0FBRyxHQUFHTSxpQkFBaUIsQ0FBQ1osU0FBbEIsRUFBWjtBQUNBO0FBQ0QsYUFSRCxNQVFPO0FBQ04sa0JBQUksT0FBT0QsY0FBUCxLQUEwQixXQUExQixJQUF5Q0EsY0FBYyxDQUFDYyxnQkFBZixFQUE3QyxFQUFnRjtBQUMvRVAsbUJBQUcsR0FBR0EsR0FBRyxHQUFHUCxjQUFjLENBQUNlLGtCQUFmLEVBQVo7QUFDQTtBQUNEOztBQUVEUixlQUFHLEdBQUdBLEdBQUcsR0FBRyxDQUFaLENBbEJlLENBa0JBOztBQUVmLG1CQUFPQSxHQUFQO0FBQ0EsV0F0QlE7QUF1QlRTLGNBQUksRUFBRSxjQUFTQyxJQUFULEVBQWU7QUFDcEIsbUJBQU9SLE1BQU0sQ0FBQ1YsTUFBUCxDQUFjSCxRQUFkLEVBQXdCb0IsSUFBL0I7QUFDQSxXQXpCUTtBQTBCVEUsZUFBSyxFQUFFLGVBQVNELElBQVQsRUFBZTtBQUNyQixnQkFBSVQsSUFBSSxHQUFHQyxNQUFNLENBQUNDLE9BQVAsRUFBWDtBQUVBLGdCQUFJUyxTQUFTLEdBQUdDLFFBQVEsQ0FBQ1gsTUFBTSxDQUFDWSxHQUFQLENBQVd6QixRQUFYLEVBQXFCLE9BQXJCLENBQUQsQ0FBeEI7QUFDQSxnQkFBSTBCLFNBQVMsR0FBR0YsUUFBUSxDQUFDWCxNQUFNLENBQUNZLEdBQVAsQ0FBV2IsSUFBWCxFQUFpQixPQUFqQixDQUFELENBQXhCO0FBQ0EsZ0JBQUllLGNBQWMsR0FBR2QsTUFBTSxDQUFDVixNQUFQLENBQWNILFFBQWQsRUFBd0JvQixJQUE3QztBQUVBLG1CQUFPTSxTQUFTLEdBQUdILFNBQVosR0FBd0JJLGNBQS9CO0FBQ0E7QUFsQ1E7QUFISDtBQUQ0QixLQUFyQixDQUFWOztBQTJDTjFCLFdBQU8sQ0FBQzJCLFVBQVI7O0FBRUFmLFVBQU0sQ0FBQ2dCLGdCQUFQLENBQXdCLFlBQVc7QUFDbEM1QixhQUFPLENBQUM2QixZQUFSO0FBQ0EsS0FGRDtBQUdBLEdBdkRELENBTm1DLENBK0RoQzs7O0FBQ0gsU0FBTztBQUNOQyxRQUFJLEVBQUUsY0FBU0MsRUFBVCxFQUFhO0FBQ1RoQyxjQUFRLEdBQUdhLE1BQU0sQ0FBQ29CLE9BQVAsQ0FBZUQsRUFBZixDQUFYOztBQUVBLFVBQUksQ0FBQ2hDLFFBQUwsRUFBZTtBQUNYO0FBQ0gsT0FMUSxDQU9UOzs7QUFDVEUsV0FBSztBQUNMLEtBVks7QUFZTmdDLFVBQU0sRUFBRSxrQkFBVztBQUNsQixVQUFJakMsT0FBSixFQUFhO0FBQ1pBLGVBQU8sQ0FBQzZCLFlBQVI7QUFDQTtBQUNEO0FBaEJLLEdBQVA7QUFrQkEsQ0FsRndCLEVBQXpCLEMsQ0FvRkE7OztBQUNBLElBQUksSUFBSixFQUFtQztBQUNsQ0ssUUFBTSxDQUFDQyxPQUFQLEdBQWlCckMsa0JBQWpCO0FBQ0EiLCJmaWxlIjoiLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvbGF5b3V0L2Jhc2Uvc3RpY2t5LWNhcmQuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuXHJcbnZhciBLVExheW91dFN0aWNreUNhcmQgPSBmdW5jdGlvbigpIHtcclxuICAgIC8vIFByaXZhdGUgcHJvcGVydGllc1xyXG5cdHZhciBfZWxlbWVudDtcclxuICAgIHZhciBfb2JqZWN0O1xyXG5cclxuXHQvLyBQcml2YXRlIGZ1bmN0aW9uc1xyXG5cdHZhciBfaW5pdCA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIG9mZnNldCA9IDMwMDtcclxuXHJcblx0XHRpZiAodHlwZW9mIEtUTGF5b3V0SGVhZGVyICE9PSAndW5kZWZpbmVkJykge1xyXG5cdFx0XHRvZmZzZXQgPSBLVExheW91dEhlYWRlci5nZXRIZWlnaHQoKTtcclxuXHRcdH1cclxuXHJcbiAgICAgICAgX29iamVjdCA9IG5ldyBLVENhcmQoX2VsZW1lbnQsIHtcclxuXHRcdFx0c3RpY2t5OiB7XHJcblx0XHRcdFx0b2Zmc2V0OiBvZmZzZXQsXHJcblx0XHRcdFx0ekluZGV4OiA5MCxcclxuXHRcdFx0XHRwb3NpdGlvbjoge1xyXG5cdFx0XHRcdFx0dG9wOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdFx0dmFyIHBvcyA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBib2R5ID0gS1RVdGlsLmdldEJvZHkoKTtcclxuXHJcblx0XHRcdFx0XHRcdGlmIChLVFV0aWwuaXNCcmVha3BvaW50VXAoJ2xnJykpIHtcclxuXHRcdFx0XHRcdFx0XHRpZiAodHlwZW9mIEtUTGF5b3V0SGVhZGVyICE9PSAndW5kZWZpbmVkJyAmJiBLVExheW91dEhlYWRlci5pc0ZpeGVkKCkpIHtcclxuXHRcdFx0XHRcdFx0XHRcdHBvcyA9IHBvcyArIEtUTGF5b3V0SGVhZGVyLmdldEhlaWdodCgpO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdFx0aWYgKHR5cGVvZiBLVExheW91dFN1YmhlYWRlciAhPT0gJ3VuZGVmaW5lZCcgJiYgS1RMYXlvdXRTdWJoZWFkZXIuaXNGaXhlZCgpKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRwb3MgPSBwb3MgKyBLVExheW91dFN1YmhlYWRlci5nZXRIZWlnaHQoKTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0aWYgKHR5cGVvZiBLVExheW91dEhlYWRlciAhPT0gJ3VuZGVmaW5lZCcgJiYgS1RMYXlvdXRIZWFkZXIuaXNGaXhlZEZvck1vYmlsZSgpKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRwb3MgPSBwb3MgKyBLVExheW91dEhlYWRlci5nZXRIZWlnaHRGb3JNb2JpbGUoKTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdHBvcyA9IHBvcyAtIDE7IC8vIHJlbW92ZSBoZWFkZXIgYm9yZGVyIHdpZHRoXHJcblxyXG5cdFx0XHRcdFx0XHRyZXR1cm4gcG9zO1xyXG5cdFx0XHRcdFx0fSxcclxuXHRcdFx0XHRcdGxlZnQ6IGZ1bmN0aW9uKGNhcmQpIHtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIEtUVXRpbC5vZmZzZXQoX2VsZW1lbnQpLmxlZnQ7XHJcblx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdFx0cmlnaHQ6IGZ1bmN0aW9uKGNhcmQpIHtcclxuXHRcdFx0XHRcdFx0dmFyIGJvZHkgPSBLVFV0aWwuZ2V0Qm9keSgpO1xyXG5cclxuXHRcdFx0XHRcdFx0dmFyIGNhcmRXaWR0aCA9IHBhcnNlSW50KEtUVXRpbC5jc3MoX2VsZW1lbnQsICd3aWR0aCcpKTtcclxuXHRcdFx0XHRcdFx0dmFyIGJvZHlXaWR0aCA9IHBhcnNlSW50KEtUVXRpbC5jc3MoYm9keSwgJ3dpZHRoJykpO1xyXG5cdFx0XHRcdFx0XHR2YXIgY2FyZE9mZnNldExlZnQgPSBLVFV0aWwub2Zmc2V0KF9lbGVtZW50KS5sZWZ0O1xyXG5cclxuXHRcdFx0XHRcdFx0cmV0dXJuIGJvZHlXaWR0aCAtIGNhcmRXaWR0aCAtIGNhcmRPZmZzZXRMZWZ0O1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblxyXG5cdFx0X29iamVjdC5pbml0U3RpY2t5KCk7XHJcblxyXG5cdFx0S1RVdGlsLmFkZFJlc2l6ZUhhbmRsZXIoZnVuY3Rpb24oKSB7XHJcblx0XHRcdF9vYmplY3QudXBkYXRlU3RpY2t5KCk7XHJcblx0XHR9KTtcclxuXHR9XHJcblxyXG4gICAgLy8gUHVibGljIG1ldGhvZHNcclxuXHRyZXR1cm4ge1xyXG5cdFx0aW5pdDogZnVuY3Rpb24oaWQpIHtcclxuICAgICAgICAgICAgX2VsZW1lbnQgPSBLVFV0aWwuZ2V0QnlJZChpZCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIV9lbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIEluaXRpYWxpemVcclxuXHRcdFx0X2luaXQoKTtcclxuXHRcdH0sXHJcblxyXG5cdFx0dXBkYXRlOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0aWYgKF9vYmplY3QpIHtcclxuXHRcdFx0XHRfb2JqZWN0LnVwZGF0ZVN0aWNreSgpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fTtcclxufSgpO1xyXG5cclxuLy8gV2VicGFjayBzdXBwb3J0XHJcbmlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykge1xyXG5cdG1vZHVsZS5leHBvcnRzID0gS1RMYXlvdXRTdGlja3lDYXJkO1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/metronic/js/layout/base/sticky-card.js\n");

/***/ }),

/***/ "./resources/metronic/js/layout/base/stretched-card.js":
/*!*************************************************************!*\
  !*** ./resources/metronic/js/layout/base/stretched-card.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar KTLayoutStretchedCard = function () {\n  // Private properties\n  var _element; // Private functions\n\n\n  var _init = function _init() {\n    var scroll = KTUtil.find(_element, '.card-scroll');\n    var cardBody = KTUtil.find(_element, '.card-body');\n    var cardHeader = KTUtil.find(_element, '.card-header');\n    var height = KTLayoutContent.getHeight();\n    height = height - parseInt(KTUtil.actualHeight(cardHeader));\n    height = height - parseInt(KTUtil.css(_element, 'marginTop')) - parseInt(KTUtil.css(_element, 'marginBottom'));\n    height = height - parseInt(KTUtil.css(_element, 'paddingTop')) - parseInt(KTUtil.css(_element, 'paddingBottom'));\n    height = height - parseInt(KTUtil.css(cardBody, 'paddingTop')) - parseInt(KTUtil.css(cardBody, 'paddingBottom'));\n    height = height - parseInt(KTUtil.css(cardBody, 'marginTop')) - parseInt(KTUtil.css(cardBody, 'marginBottom'));\n    height = height - 3;\n    KTUtil.css(scroll, 'height', height + 'px');\n  }; // Public methods\n\n\n  return {\n    init: function init(id) {\n      _element = KTUtil.getById(id);\n\n      if (!_element) {\n        return;\n      } // Initialize\n\n\n      _init(); // Re-calculate on window resize\n\n\n      KTUtil.addResizeHandler(function () {\n        _init();\n      });\n    },\n    update: function update() {\n      _init();\n    }\n  };\n}(); // Webpack support\n\n\nif (true) {\n  module.exports = KTLayoutStretchedCard;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvbGF5b3V0L2Jhc2Uvc3RyZXRjaGVkLWNhcmQuanM/ZWQ4MiJdLCJuYW1lcyI6WyJLVExheW91dFN0cmV0Y2hlZENhcmQiLCJfZWxlbWVudCIsIl9pbml0Iiwic2Nyb2xsIiwiS1RVdGlsIiwiZmluZCIsImNhcmRCb2R5IiwiY2FyZEhlYWRlciIsImhlaWdodCIsIktUTGF5b3V0Q29udGVudCIsImdldEhlaWdodCIsInBhcnNlSW50IiwiYWN0dWFsSGVpZ2h0IiwiY3NzIiwiaW5pdCIsImlkIiwiZ2V0QnlJZCIsImFkZFJlc2l6ZUhhbmRsZXIiLCJ1cGRhdGUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJQSxxQkFBcUIsR0FBRyxZQUFXO0FBQ25DO0FBQ0gsTUFBSUMsUUFBSixDQUZzQyxDQUl0Qzs7O0FBQ0EsTUFBSUMsS0FBSyxHQUFHLFNBQVJBLEtBQVEsR0FBVztBQUN0QixRQUFJQyxNQUFNLEdBQUdDLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZSixRQUFaLEVBQXNCLGNBQXRCLENBQWI7QUFDQSxRQUFJSyxRQUFRLEdBQUdGLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZSixRQUFaLEVBQXNCLFlBQXRCLENBQWY7QUFDQSxRQUFJTSxVQUFVLEdBQUdILE1BQU0sQ0FBQ0MsSUFBUCxDQUFZSixRQUFaLEVBQXNCLGNBQXRCLENBQWpCO0FBRUEsUUFBSU8sTUFBTSxHQUFHQyxlQUFlLENBQUNDLFNBQWhCLEVBQWI7QUFFQUYsVUFBTSxHQUFHQSxNQUFNLEdBQUdHLFFBQVEsQ0FBQ1AsTUFBTSxDQUFDUSxZQUFQLENBQW9CTCxVQUFwQixDQUFELENBQTFCO0FBRUFDLFVBQU0sR0FBR0EsTUFBTSxHQUFHRyxRQUFRLENBQUNQLE1BQU0sQ0FBQ1MsR0FBUCxDQUFXWixRQUFYLEVBQXFCLFdBQXJCLENBQUQsQ0FBakIsR0FBdURVLFFBQVEsQ0FBQ1AsTUFBTSxDQUFDUyxHQUFQLENBQVdaLFFBQVgsRUFBcUIsY0FBckIsQ0FBRCxDQUF4RTtBQUNBTyxVQUFNLEdBQUdBLE1BQU0sR0FBR0csUUFBUSxDQUFDUCxNQUFNLENBQUNTLEdBQVAsQ0FBV1osUUFBWCxFQUFxQixZQUFyQixDQUFELENBQWpCLEdBQXdEVSxRQUFRLENBQUNQLE1BQU0sQ0FBQ1MsR0FBUCxDQUFXWixRQUFYLEVBQXFCLGVBQXJCLENBQUQsQ0FBekU7QUFFQU8sVUFBTSxHQUFHQSxNQUFNLEdBQUdHLFFBQVEsQ0FBQ1AsTUFBTSxDQUFDUyxHQUFQLENBQVdQLFFBQVgsRUFBcUIsWUFBckIsQ0FBRCxDQUFqQixHQUF3REssUUFBUSxDQUFDUCxNQUFNLENBQUNTLEdBQVAsQ0FBV1AsUUFBWCxFQUFxQixlQUFyQixDQUFELENBQXpFO0FBQ0FFLFVBQU0sR0FBR0EsTUFBTSxHQUFHRyxRQUFRLENBQUNQLE1BQU0sQ0FBQ1MsR0FBUCxDQUFXUCxRQUFYLEVBQXFCLFdBQXJCLENBQUQsQ0FBakIsR0FBdURLLFFBQVEsQ0FBQ1AsTUFBTSxDQUFDUyxHQUFQLENBQVdQLFFBQVgsRUFBcUIsY0FBckIsQ0FBRCxDQUF4RTtBQUVBRSxVQUFNLEdBQUdBLE1BQU0sR0FBRyxDQUFsQjtBQUVBSixVQUFNLENBQUNTLEdBQVAsQ0FBV1YsTUFBWCxFQUFtQixRQUFuQixFQUE2QkssTUFBTSxHQUFHLElBQXRDO0FBQ0EsR0FsQkQsQ0FMc0MsQ0F5Qm5DOzs7QUFDSCxTQUFPO0FBQ05NLFFBQUksRUFBRSxjQUFTQyxFQUFULEVBQWE7QUFDVGQsY0FBUSxHQUFHRyxNQUFNLENBQUNZLE9BQVAsQ0FBZUQsRUFBZixDQUFYOztBQUVBLFVBQUksQ0FBQ2QsUUFBTCxFQUFlO0FBQ1g7QUFDSCxPQUxRLENBT1Q7OztBQUNUQyxXQUFLLEdBUmEsQ0FVVDs7O0FBQ0FFLFlBQU0sQ0FBQ2EsZ0JBQVAsQ0FBd0IsWUFBVztBQUMzQ2YsYUFBSztBQUNMLE9BRlE7QUFHVCxLQWZLO0FBaUJOZ0IsVUFBTSxFQUFFLGtCQUFXO0FBQ2xCaEIsV0FBSztBQUNMO0FBbkJLLEdBQVA7QUFxQkEsQ0EvQzJCLEVBQTVCLEMsQ0FpREE7OztBQUNBLElBQUksSUFBSixFQUFtQztBQUNsQ2lCLFFBQU0sQ0FBQ0MsT0FBUCxHQUFpQnBCLHFCQUFqQjtBQUNBIiwiZmlsZSI6Ii4vcmVzb3VyY2VzL21ldHJvbmljL2pzL2xheW91dC9iYXNlL3N0cmV0Y2hlZC1jYXJkLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG52YXIgS1RMYXlvdXRTdHJldGNoZWRDYXJkID0gZnVuY3Rpb24oKSB7XHJcbiAgICAvLyBQcml2YXRlIHByb3BlcnRpZXNcclxuXHR2YXIgX2VsZW1lbnQ7XHJcblxyXG5cdC8vIFByaXZhdGUgZnVuY3Rpb25zXHJcblx0dmFyIF9pbml0ID0gZnVuY3Rpb24oKSB7XHJcblx0XHR2YXIgc2Nyb2xsID0gS1RVdGlsLmZpbmQoX2VsZW1lbnQsICcuY2FyZC1zY3JvbGwnKTtcclxuXHRcdHZhciBjYXJkQm9keSA9IEtUVXRpbC5maW5kKF9lbGVtZW50LCAnLmNhcmQtYm9keScpO1xyXG5cdFx0dmFyIGNhcmRIZWFkZXIgPSBLVFV0aWwuZmluZChfZWxlbWVudCwgJy5jYXJkLWhlYWRlcicpO1xyXG5cclxuXHRcdHZhciBoZWlnaHQgPSBLVExheW91dENvbnRlbnQuZ2V0SGVpZ2h0KCk7XHJcblxyXG5cdFx0aGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmFjdHVhbEhlaWdodChjYXJkSGVhZGVyKSk7XHJcblxyXG5cdFx0aGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhfZWxlbWVudCwgJ21hcmdpblRvcCcpKSAtIHBhcnNlSW50KEtUVXRpbC5jc3MoX2VsZW1lbnQsICdtYXJnaW5Cb3R0b20nKSk7XHJcblx0XHRoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKF9lbGVtZW50LCAncGFkZGluZ1RvcCcpKSAtIHBhcnNlSW50KEtUVXRpbC5jc3MoX2VsZW1lbnQsICdwYWRkaW5nQm90dG9tJykpO1xyXG5cclxuXHRcdGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KEtUVXRpbC5jc3MoY2FyZEJvZHksICdwYWRkaW5nVG9wJykpIC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhjYXJkQm9keSwgJ3BhZGRpbmdCb3R0b20nKSk7XHJcblx0XHRoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKGNhcmRCb2R5LCAnbWFyZ2luVG9wJykpIC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhjYXJkQm9keSwgJ21hcmdpbkJvdHRvbScpKTtcclxuXHJcblx0XHRoZWlnaHQgPSBoZWlnaHQgLSAzO1xyXG5cclxuXHRcdEtUVXRpbC5jc3Moc2Nyb2xsLCAnaGVpZ2h0JywgaGVpZ2h0ICsgJ3B4Jyk7XHJcblx0fVxyXG5cclxuICAgIC8vIFB1YmxpYyBtZXRob2RzXHJcblx0cmV0dXJuIHtcclxuXHRcdGluaXQ6IGZ1bmN0aW9uKGlkKSB7XHJcbiAgICAgICAgICAgIF9lbGVtZW50ID0gS1RVdGlsLmdldEJ5SWQoaWQpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFfZWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplXHJcblx0XHRcdF9pbml0KCk7XHJcblxyXG4gICAgICAgICAgICAvLyBSZS1jYWxjdWxhdGUgb24gd2luZG93IHJlc2l6ZVxyXG4gICAgICAgICAgICBLVFV0aWwuYWRkUmVzaXplSGFuZGxlcihmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRfaW5pdCgpO1xyXG5cdFx0XHR9KTtcclxuXHRcdH0sXHJcblxyXG5cdFx0dXBkYXRlOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0X2luaXQoKTtcclxuXHRcdH1cclxuXHR9O1xyXG59KCk7XHJcblxyXG4vLyBXZWJwYWNrIHN1cHBvcnRcclxuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XHJcblx0bW9kdWxlLmV4cG9ydHMgPSBLVExheW91dFN0cmV0Y2hlZENhcmQ7XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/metronic/js/layout/base/stretched-card.js\n");

/***/ }),

/***/ "./resources/metronic/js/layout/base/subheader.js":
/*!********************************************************!*\
  !*** ./resources/metronic/js/layout/base/subheader.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar KTLayoutSubheader = function () {\n  // Private properties\n  var _element; // Private functions\n\n\n  var _getHeight = function _getHeight() {\n    var height = 0;\n\n    if (_element) {\n      height = KTUtil.actualHeight(_element);\n    }\n\n    return height;\n  }; // Public methods\n\n\n  return {\n    init: function init(id) {\n      _element = KTUtil.getById(id);\n\n      if (!_element) {\n        return;\n      }\n    },\n    isFixed: function isFixed() {\n      return KTUtil.hasClass(KTUtil.getBody(), 'subheader-fixed');\n    },\n    getElement: function getElement() {\n      return _element;\n    },\n    getHeight: function getHeight() {\n      return _getHeight();\n    }\n  };\n}(); // Webpack support\n\n\nif (true) {\n  module.exports = KTLayoutSubheader;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvbGF5b3V0L2Jhc2Uvc3ViaGVhZGVyLmpzPzNhNTgiXSwibmFtZXMiOlsiS1RMYXlvdXRTdWJoZWFkZXIiLCJfZWxlbWVudCIsIl9nZXRIZWlnaHQiLCJoZWlnaHQiLCJLVFV0aWwiLCJhY3R1YWxIZWlnaHQiLCJpbml0IiwiaWQiLCJnZXRCeUlkIiwiaXNGaXhlZCIsImhhc0NsYXNzIiwiZ2V0Qm9keSIsImdldEVsZW1lbnQiLCJnZXRIZWlnaHQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJQSxpQkFBaUIsR0FBRyxZQUFXO0FBQy9CO0FBQ0EsTUFBSUMsUUFBSixDQUYrQixDQUkvQjs7O0FBQ0EsTUFBSUMsVUFBVSxHQUFHLFNBQWJBLFVBQWEsR0FBVztBQUN4QixRQUFJQyxNQUFNLEdBQUcsQ0FBYjs7QUFFQSxRQUFJRixRQUFKLEVBQWM7QUFDVkUsWUFBTSxHQUFHQyxNQUFNLENBQUNDLFlBQVAsQ0FBb0JKLFFBQXBCLENBQVQ7QUFDSDs7QUFFRCxXQUFPRSxNQUFQO0FBQ0gsR0FSRCxDQUwrQixDQWUvQjs7O0FBQ0gsU0FBTztBQUNORyxRQUFJLEVBQUUsY0FBU0MsRUFBVCxFQUFhO0FBQ1ROLGNBQVEsR0FBR0csTUFBTSxDQUFDSSxPQUFQLENBQWVELEVBQWYsQ0FBWDs7QUFFQSxVQUFJLENBQUNOLFFBQUwsRUFBZTtBQUNYO0FBQ0g7QUFDVixLQVBLO0FBU0FRLFdBQU8sRUFBRSxtQkFBVztBQUNoQixhQUFPTCxNQUFNLENBQUNNLFFBQVAsQ0FBZ0JOLE1BQU0sQ0FBQ08sT0FBUCxFQUFoQixFQUFrQyxpQkFBbEMsQ0FBUDtBQUNILEtBWEQ7QUFhQUMsY0FBVSxFQUFFLHNCQUFXO0FBQ25CLGFBQU9YLFFBQVA7QUFDSCxLQWZEO0FBaUJBWSxhQUFTLEVBQUUscUJBQVc7QUFDbEIsYUFBT1gsVUFBVSxFQUFqQjtBQUNIO0FBbkJELEdBQVA7QUFxQkEsQ0FyQ3VCLEVBQXhCLEMsQ0F1Q0E7OztBQUNBLElBQUksSUFBSixFQUFtQztBQUNsQ1ksUUFBTSxDQUFDQyxPQUFQLEdBQWlCZixpQkFBakI7QUFDQSIsImZpbGUiOiIuL3Jlc291cmNlcy9tZXRyb25pYy9qcy9sYXlvdXQvYmFzZS9zdWJoZWFkZXIuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuXHJcbnZhciBLVExheW91dFN1YmhlYWRlciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgLy8gUHJpdmF0ZSBwcm9wZXJ0aWVzXHJcbiAgICB2YXIgX2VsZW1lbnQ7XHJcblxyXG4gICAgLy8gUHJpdmF0ZSBmdW5jdGlvbnNcclxuICAgIHZhciBfZ2V0SGVpZ2h0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIGhlaWdodCA9IDA7XHJcblxyXG4gICAgICAgIGlmIChfZWxlbWVudCkge1xyXG4gICAgICAgICAgICBoZWlnaHQgPSBLVFV0aWwuYWN0dWFsSGVpZ2h0KF9lbGVtZW50KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBoZWlnaHQ7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUHVibGljIG1ldGhvZHNcclxuXHRyZXR1cm4ge1xyXG5cdFx0aW5pdDogZnVuY3Rpb24oaWQpIHtcclxuICAgICAgICAgICAgX2VsZW1lbnQgPSBLVFV0aWwuZ2V0QnlJZChpZCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIV9lbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHRcdH0sXHJcblxyXG4gICAgICAgIGlzRml4ZWQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gS1RVdGlsLmhhc0NsYXNzKEtUVXRpbC5nZXRCb2R5KCksICdzdWJoZWFkZXItZml4ZWQnKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBnZXRFbGVtZW50OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9lbGVtZW50O1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGdldEhlaWdodDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfZ2V0SGVpZ2h0KCk7XHJcbiAgICAgICAgfVxyXG5cdH07XHJcbn0oKTtcclxuXHJcbi8vIFdlYnBhY2sgc3VwcG9ydFxyXG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRtb2R1bGUuZXhwb3J0cyA9IEtUTGF5b3V0U3ViaGVhZGVyO1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/metronic/js/layout/base/subheader.js\n");

/***/ }),

/***/ "./resources/metronic/js/layout/extended/chat.js":
/*!*******************************************************!*\
  !*** ./resources/metronic/js/layout/extended/chat.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" // Class definition\n\nvar KTLayoutChat = function () {\n  // Private functions\n  var _init = function _init(element) {\n    var scrollEl = KTUtil.find(element, '.scroll');\n    var cardBodyEl = KTUtil.find(element, '.card-body');\n    var cardHeaderEl = KTUtil.find(element, '.card-header');\n    var cardFooterEl = KTUtil.find(element, '.card-footer');\n\n    if (!scrollEl) {\n      return;\n    } // initialize perfect scrollbar(see:  https://github.com/utatti/perfect-scrollbar)\n\n\n    KTUtil.scrollInit(scrollEl, {\n      windowScroll: false,\n      // allow browser scroll when the scroll reaches the end of the side\n      mobileNativeScroll: true,\n      // enable native scroll for mobile\n      desktopNativeScroll: false,\n      // disable native scroll and use custom scroll for desktop\n      resetHeightOnDestroy: true,\n      // reset css height on scroll feature destroyed\n      handleWindowResize: true,\n      // recalculate hight on window resize\n      rememberPosition: true,\n      // remember scroll position in cookie\n      height: function height() {\n        // calculate height\n        var height;\n\n        if (KTUtil.isBreakpointDown('lg')) {\n          // Mobile mode\n          return KTUtil.hasAttr(scrollEl, 'data-mobile-height') ? parseInt(KTUtil.attr(scrollEl, 'data-mobile-height')) : 400;\n        } else if (KTUtil.isBreakpointUp('lg') && KTUtil.hasAttr(scrollEl, 'data-height')) {\n          // Desktop Mode\n          return parseInt(KTUtil.attr(scrollEl, 'data-height'));\n        } else {\n          height = KTLayoutContent.getHeight();\n\n          if (scrollEl) {\n            height = height - parseInt(KTUtil.css(scrollEl, 'margin-top')) - parseInt(KTUtil.css(scrollEl, 'margin-bottom'));\n          }\n\n          if (cardHeaderEl) {\n            height = height - parseInt(KTUtil.css(cardHeaderEl, 'height'));\n            height = height - parseInt(KTUtil.css(cardHeaderEl, 'margin-top')) - parseInt(KTUtil.css(cardHeaderEl, 'margin-bottom'));\n          }\n\n          if (cardBodyEl) {\n            height = height - parseInt(KTUtil.css(cardBodyEl, 'padding-top')) - parseInt(KTUtil.css(cardBodyEl, 'padding-bottom'));\n          }\n\n          if (cardFooterEl) {\n            height = height - parseInt(KTUtil.css(cardFooterEl, 'height'));\n            height = height - parseInt(KTUtil.css(cardFooterEl, 'margin-top')) - parseInt(KTUtil.css(cardFooterEl, 'margin-bottom'));\n          }\n        } // Remove additional space\n\n\n        height = height - 2;\n        return height;\n      }\n    }); // attach events\n\n    KTUtil.on(element, '.card-footer textarea', 'keydown', function (e) {\n      if (e.keyCode == 13) {\n        _handeMessaging(element);\n\n        e.preventDefault();\n        return false;\n      }\n    });\n    KTUtil.on(element, '.card-footer .chat-send', 'click', function (e) {\n      _handeMessaging(element);\n    });\n  };\n\n  var _handeMessaging = function _handeMessaging(element) {\n    var messagesEl = KTUtil.find(element, '.messages');\n    var scrollEl = KTUtil.find(element, '.scroll');\n    var textarea = KTUtil.find(element, 'textarea');\n\n    if (textarea.value.length === 0) {\n      return;\n    }\n\n    var node = document.createElement(\"DIV\");\n    KTUtil.addClass(node, 'd-flex flex-column mb-5 align-items-end');\n    var html = '';\n    html += '<div class=\"d-flex align-items-center\">';\n    html += '\t<div>';\n    html += '\t\t<span class=\"text-muted font-size-sm\">2 Hours</span>';\n    html += '\t\t<a href=\"#\" class=\"text-dark-75 text-hover-primary font-weight-bold font-size-h6\">You</a>';\n    html += '\t</div>';\n    html += '\t<div class=\"symbol symbol-circle symbol-40 ml-3\">';\n    html += '\t\t<img alt=\"Pic\" src=\"assets/media/users/300_12.jpg\"/>';\n    html += '\t</div>';\n    html += '</div>';\n    html += '<div class=\"mt-2 rounded p-5 bg-light-primary text-dark-50 font-weight-bold font-size-lg text-right max-w-400px\">' + textarea.value + '</div>';\n    KTUtil.setHTML(node, html);\n    messagesEl.appendChild(node);\n    textarea.value = '';\n    scrollEl.scrollTop = parseInt(KTUtil.css(messagesEl, 'height'));\n    var ps;\n\n    if (ps = KTUtil.data(scrollEl).get('ps')) {\n      ps.update();\n    }\n\n    setTimeout(function () {\n      var node = document.createElement(\"DIV\");\n      KTUtil.addClass(node, 'd-flex flex-column mb-5 align-items-start');\n      var html = '';\n      html += '<div class=\"d-flex align-items-center\">';\n      html += '\t<div class=\"symbol symbol-circle symbol-40 mr-3\">';\n      html += '\t\t<img alt=\"Pic\" src=\"assets/media/users/300_12.jpg\"/>';\n      html += '\t</div>';\n      html += '\t<div>';\n      html += '\t\t<a href=\"#\" class=\"text-dark-75 text-hover-primary font-weight-bold font-size-h6\">Matt Pears</a>';\n      html += '\t\t<span class=\"text-muted font-size-sm\">Just now</span>';\n      html += '\t</div>';\n      html += '</div>';\n      html += '<div class=\"mt-2 rounded p-5 bg-light-success text-dark-50 font-weight-bold font-size-lg text-left max-w-400px\">';\n      html += 'Right before vacation season we have the next Big Deal for you.';\n      html += '</div>';\n      KTUtil.setHTML(node, html);\n      messagesEl.appendChild(node);\n      textarea.value = '';\n      scrollEl.scrollTop = parseInt(KTUtil.css(messagesEl, 'height'));\n      var ps;\n\n      if (ps = KTUtil.data(scrollEl).get('ps')) {\n        ps.update();\n      }\n    }, 2000);\n  }; // Public methods\n\n\n  return {\n    init: function init(id) {\n      // Init modal chat example\n      _init(KTUtil.getById(id)); // Trigger click to show popup modal chat on page load\n\n\n      if (encodeURI(window.location.hostname) == 'keenthemes.com' || encodeURI(window.location.hostname) == 'www.keenthemes.com') {\n        setTimeout(function () {\n          if (!KTCookie.getCookie('kt_app_chat_shown')) {\n            var expires = new Date(new Date().getTime() + 60 * 60 * 1000); // expire in 60 minutes from now\n\n            KTCookie.setCookie('kt_app_chat_shown', 1, {\n              expires: expires\n            });\n\n            if (KTUtil.getById('kt_app_chat_launch_btn')) {\n              KTUtil.getById('kt_app_chat_launch_btn').click();\n            }\n          }\n        }, 2000);\n      }\n    },\n    setup: function setup(element) {\n      _init(element);\n    }\n  };\n}(); // Webpack support\n\n\nif (true) {\n  module.exports = KTLayoutChat;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/layout/extended/chat.js\n");

/***/ }),

/***/ "./resources/metronic/js/layout/extended/demo-panel.js":
/*!*************************************************************!*\
  !*** ./resources/metronic/js/layout/extended/demo-panel.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar KTLayoutDemoPanel = function () {\n  // Private properties\n  var _element;\n\n  var _offcanvasObject; // Private functions\n\n\n  var _init = function _init() {\n    _offcanvasObject = new KTOffcanvas(_element, {\n      overlay: true,\n      baseClass: 'offcanvas',\n      placement: 'right',\n      closeBy: 'kt_demo_panel_close',\n      toggleBy: 'kt_demo_panel_toggle'\n    });\n    var header = KTUtil.find(_element, '.offcanvas-header');\n    var content = KTUtil.find(_element, '.offcanvas-content');\n    var wrapper = KTUtil.find(_element, '.offcanvas-wrapper');\n    var footer = KTUtil.find(_element, '.offcanvas-footer');\n    KTUtil.scrollInit(wrapper, {\n      disableForMobile: true,\n      resetHeightOnDestroy: true,\n      handleWindowResize: true,\n      height: function height() {\n        var height = parseInt(KTUtil.getViewPort().height);\n\n        if (header) {\n          height = height - parseInt(KTUtil.actualHeight(header));\n          height = height - parseInt(KTUtil.css(header, 'marginTop'));\n          height = height - parseInt(KTUtil.css(header, 'marginBottom'));\n        }\n\n        if (content) {\n          height = height - parseInt(KTUtil.css(content, 'marginTop'));\n          height = height - parseInt(KTUtil.css(content, 'marginBottom'));\n        }\n\n        if (wrapper) {\n          height = height - parseInt(KTUtil.css(wrapper, 'marginTop'));\n          height = height - parseInt(KTUtil.css(wrapper, 'marginBottom'));\n        }\n\n        if (footer) {\n          height = height - parseInt(KTUtil.actualHeight(footer));\n          height = height - parseInt(KTUtil.css(footer, 'marginTop'));\n          height = height - parseInt(KTUtil.css(footer, 'marginBottom'));\n        }\n\n        height = height - parseInt(KTUtil.css(_element, 'paddingTop'));\n        height = height - parseInt(KTUtil.css(_element, 'paddingBottom'));\n        height = height - 2;\n        return height;\n      }\n    });\n\n    if (typeof offcanvas !== 'undefined' && offcanvas.length === 0) {\n      offcanvas.on('hide', function () {\n        var expires = new Date(new Date().getTime() + 60 * 60 * 1000); // expire in 60 minutes from now\n\n        KTCookie.setCookie('kt_demo_panel_shown', 1, {\n          expires: expires\n        });\n      });\n    }\n  };\n\n  var _remind = function _remind() {\n    if (!(encodeURI(window.location.hostname) == 'keenthemes.com' || encodeURI(window.location.hostname) == 'www.keenthemes.com')) {\n      return;\n    }\n\n    setTimeout(function () {\n      if (!KTCookie.getCookie('kt_demo_panel_shown')) {\n        var expires = new Date(new Date().getTime() + 15 * 60 * 1000); // expire in 15 minutes from now\n\n        KTCookie.setCookie('kt_demo_panel_shown', 1, {\n          expires: expires\n        });\n\n        if (typeof _offcanvasObject !== 'undefined') {\n          _offcanvasObject.show();\n        }\n      }\n    }, 4000);\n  }; // Public methods\n\n\n  return {\n    init: function init(id) {\n      _element = KTUtil.getById(id);\n\n      if (!_element) {\n        return;\n      } // Initialize\n\n\n      _init(); // Remind\n\n\n      _remind();\n    }\n  };\n}(); // Webpack support\n\n\nif (true) {\n  module.exports = KTLayoutDemoPanel;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/layout/extended/demo-panel.js\n");

/***/ }),

/***/ "./resources/metronic/js/layout/extended/examples.js":
/*!***********************************************************!*\
  !*** ./resources/metronic/js/layout/extended/examples.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar KTLayoutExamples = function () {\n  var initDefaultMode = function initDefaultMode(element) {\n    var elements = element;\n\n    if (typeof elements === 'undefined') {\n      elements = document.querySelectorAll('.example:not(.example-compact):not(.example-hover):not(.example-basic)');\n    }\n\n    if (elements && elements.length > 0) {\n      for (var i = 0; i < elements.length; ++i) {\n        var example = elements[i];\n        var copy = KTUtil.find(example, '.example-copy');\n\n        if (copy) {\n          var clipboard = new ClipboardJS(copy, {\n            target: function target(trigger) {\n              var example = trigger.closest('.example');\n              var el = KTUtil.find(example, '.example-code .tab-pane.active');\n\n              if (!el) {\n                el = KTUtil.find(example, '.example-code');\n              }\n\n              return el;\n            }\n          });\n          clipboard.on('success', function (e) {\n            KTUtil.addClass(e.trigger, 'example-copied');\n            e.clearSelection();\n            setTimeout(function () {\n              KTUtil.removeClass(e.trigger, 'example-copied');\n            }, 2000);\n          });\n        }\n      }\n    }\n  };\n\n  var initCompactMode = function initCompactMode(element) {\n    var example, code, toggle, copy, clipboard;\n    var elements = element;\n\n    if (typeof elements === 'undefined') {\n      var elements = document.querySelectorAll('.example.example-compact');\n    }\n\n    if (elements && elements.length > 0) {\n      for (var i = 0; i < elements.length; ++i) {\n        var example = elements[i];\n        var toggle = KTUtil.find(example, '.example-toggle');\n        var copy = KTUtil.find(example, '.example-copy'); // Handle toggle\n\n        KTUtil.addEvent(toggle, 'click', function () {\n          var example = this.closest('.example');\n          var code = KTUtil.find(example, '.example-code');\n          var the = this;\n\n          if (KTUtil.hasClass(this, 'example-toggled')) {\n            KTUtil.slideUp(code, 300, function () {\n              KTUtil.removeClass(the, 'example-toggled');\n              KTUtil.removeClass(code, 'example-code-on');\n              KTUtil.hide(code);\n            });\n          } else {\n            KTUtil.addClass(code, 'example-code-on');\n            KTUtil.addClass(this, 'example-toggled');\n            KTUtil.slideDown(code, 300, function () {\n              KTUtil.show(code);\n            });\n          }\n        }); // Handle copy\n\n        if (copy) {\n          var clipboard = new ClipboardJS(copy, {\n            target: function target(trigger) {\n              var example = trigger.closest('.example');\n              var el = KTUtil.find(example, '.example-code .tab-pane.active');\n\n              if (!el) {\n                el = KTUtil.find(example, '.example-code');\n              }\n\n              return el;\n            }\n          });\n          clipboard.on('success', function (e) {\n            KTUtil.addClass(e.trigger, 'example-copied');\n            e.clearSelection();\n            setTimeout(function () {\n              KTUtil.removeClass(e.trigger, 'example-copied');\n            }, 2000);\n          });\n        }\n      }\n    }\n  };\n\n  return {\n    init: function init(element, options) {\n      initDefaultMode(element);\n      initCompactMode(element);\n    }\n  };\n}(); // webpack support\n\n\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTLayoutExamples;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/layout/extended/examples.js\n");

/***/ }),

/***/ "./resources/metronic/js/layout/extended/quick-actions.js":
/*!****************************************************************!*\
  !*** ./resources/metronic/js/layout/extended/quick-actions.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar KTLayoutQuickActions = function () {\n  // Private properties\n  var _element;\n\n  var _offcanvasObject; // Private functions\n\n\n  var _init = function _init() {\n    var header = KTUtil.find(_element, '.offcanvas-header');\n    var content = KTUtil.find(_element, '.offcanvas-content');\n    _offcanvasObject = new KTOffcanvas(_element, {\n      overlay: true,\n      baseClass: 'offcanvas',\n      placement: 'right',\n      closeBy: 'kt_quick_actions_close',\n      toggleBy: 'kt_quick_actions_toggle'\n    });\n    KTUtil.scrollInit(content, {\n      disableForMobile: true,\n      resetHeightOnDestroy: true,\n      handleWindowResize: true,\n      height: function height() {\n        var height = parseInt(KTUtil.getViewPort().height);\n\n        if (header) {\n          height = height - parseInt(KTUtil.actualHeight(header));\n          height = height - parseInt(KTUtil.css(header, 'marginTop'));\n          height = height - parseInt(KTUtil.css(header, 'marginBottom'));\n        }\n\n        if (content) {\n          height = height - parseInt(KTUtil.css(content, 'marginTop'));\n          height = height - parseInt(KTUtil.css(content, 'marginBottom'));\n        }\n\n        height = height - parseInt(KTUtil.css(_element, 'paddingTop'));\n        height = height - parseInt(KTUtil.css(_element, 'paddingBottom'));\n        height = height - 2;\n        return height;\n      }\n    });\n  }; // Public methods\n\n\n  return {\n    init: function init(id) {\n      _element = KTUtil.getById(id);\n\n      if (!_element) {\n        return;\n      } // Initialize\n\n\n      _init();\n    },\n    getElement: function getElement() {\n      return _element;\n    }\n  };\n}(); // Webpack support\n\n\nif (true) {\n  module.exports = KTLayoutQuickActions;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvbGF5b3V0L2V4dGVuZGVkL3F1aWNrLWFjdGlvbnMuanM/NzFlNyJdLCJuYW1lcyI6WyJLVExheW91dFF1aWNrQWN0aW9ucyIsIl9lbGVtZW50IiwiX29mZmNhbnZhc09iamVjdCIsIl9pbml0IiwiaGVhZGVyIiwiS1RVdGlsIiwiZmluZCIsImNvbnRlbnQiLCJLVE9mZmNhbnZhcyIsIm92ZXJsYXkiLCJiYXNlQ2xhc3MiLCJwbGFjZW1lbnQiLCJjbG9zZUJ5IiwidG9nZ2xlQnkiLCJzY3JvbGxJbml0IiwiZGlzYWJsZUZvck1vYmlsZSIsInJlc2V0SGVpZ2h0T25EZXN0cm95IiwiaGFuZGxlV2luZG93UmVzaXplIiwiaGVpZ2h0IiwicGFyc2VJbnQiLCJnZXRWaWV3UG9ydCIsImFjdHVhbEhlaWdodCIsImNzcyIsImluaXQiLCJpZCIsImdldEJ5SWQiLCJnZXRFbGVtZW50IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSUEsb0JBQW9CLEdBQUcsWUFBVztBQUNsQztBQUNBLE1BQUlDLFFBQUo7O0FBQ0EsTUFBSUMsZ0JBQUosQ0FIa0MsQ0FLbEM7OztBQUNBLE1BQUlDLEtBQUssR0FBRyxTQUFSQSxLQUFRLEdBQVc7QUFDbkIsUUFBSUMsTUFBTSxHQUFHQyxNQUFNLENBQUNDLElBQVAsQ0FBWUwsUUFBWixFQUFzQixtQkFBdEIsQ0FBYjtBQUNBLFFBQUlNLE9BQU8sR0FBR0YsTUFBTSxDQUFDQyxJQUFQLENBQVlMLFFBQVosRUFBc0Isb0JBQXRCLENBQWQ7QUFFQUMsb0JBQWdCLEdBQUcsSUFBSU0sV0FBSixDQUFnQlAsUUFBaEIsRUFBMEI7QUFDekNRLGFBQU8sRUFBRSxJQURnQztBQUV6Q0MsZUFBUyxFQUFFLFdBRjhCO0FBR3pDQyxlQUFTLEVBQUUsT0FIOEI7QUFJekNDLGFBQU8sRUFBRSx3QkFKZ0M7QUFLekNDLGNBQVEsRUFBRTtBQUwrQixLQUExQixDQUFuQjtBQVFBUixVQUFNLENBQUNTLFVBQVAsQ0FBa0JQLE9BQWxCLEVBQTJCO0FBQ3ZCUSxzQkFBZ0IsRUFBRSxJQURLO0FBRXZCQywwQkFBb0IsRUFBRSxJQUZDO0FBR3ZCQyx3QkFBa0IsRUFBRSxJQUhHO0FBSXZCQyxZQUFNLEVBQUUsa0JBQVc7QUFDZixZQUFJQSxNQUFNLEdBQUdDLFFBQVEsQ0FBQ2QsTUFBTSxDQUFDZSxXQUFQLEdBQXFCRixNQUF0QixDQUFyQjs7QUFFQSxZQUFJZCxNQUFKLEVBQVk7QUFDUmMsZ0JBQU0sR0FBR0EsTUFBTSxHQUFHQyxRQUFRLENBQUNkLE1BQU0sQ0FBQ2dCLFlBQVAsQ0FBb0JqQixNQUFwQixDQUFELENBQTFCO0FBQ0FjLGdCQUFNLEdBQUdBLE1BQU0sR0FBR0MsUUFBUSxDQUFDZCxNQUFNLENBQUNpQixHQUFQLENBQVdsQixNQUFYLEVBQW1CLFdBQW5CLENBQUQsQ0FBMUI7QUFDQWMsZ0JBQU0sR0FBR0EsTUFBTSxHQUFHQyxRQUFRLENBQUNkLE1BQU0sQ0FBQ2lCLEdBQVAsQ0FBV2xCLE1BQVgsRUFBbUIsY0FBbkIsQ0FBRCxDQUExQjtBQUNIOztBQUVELFlBQUlHLE9BQUosRUFBYTtBQUNUVyxnQkFBTSxHQUFHQSxNQUFNLEdBQUdDLFFBQVEsQ0FBQ2QsTUFBTSxDQUFDaUIsR0FBUCxDQUFXZixPQUFYLEVBQW9CLFdBQXBCLENBQUQsQ0FBMUI7QUFDQVcsZ0JBQU0sR0FBR0EsTUFBTSxHQUFHQyxRQUFRLENBQUNkLE1BQU0sQ0FBQ2lCLEdBQVAsQ0FBV2YsT0FBWCxFQUFvQixjQUFwQixDQUFELENBQTFCO0FBQ0g7O0FBRURXLGNBQU0sR0FBR0EsTUFBTSxHQUFHQyxRQUFRLENBQUNkLE1BQU0sQ0FBQ2lCLEdBQVAsQ0FBV3JCLFFBQVgsRUFBcUIsWUFBckIsQ0FBRCxDQUExQjtBQUNBaUIsY0FBTSxHQUFHQSxNQUFNLEdBQUdDLFFBQVEsQ0FBQ2QsTUFBTSxDQUFDaUIsR0FBUCxDQUFXckIsUUFBWCxFQUFxQixlQUFyQixDQUFELENBQTFCO0FBRUFpQixjQUFNLEdBQUdBLE1BQU0sR0FBRyxDQUFsQjtBQUVBLGVBQU9BLE1BQVA7QUFDSDtBQXhCc0IsS0FBM0I7QUEwQkgsR0F0Q0QsQ0FOa0MsQ0E4Q2xDOzs7QUFDQSxTQUFPO0FBQ0hLLFFBQUksRUFBRSxjQUFTQyxFQUFULEVBQWE7QUFDZnZCLGNBQVEsR0FBR0ksTUFBTSxDQUFDb0IsT0FBUCxDQUFlRCxFQUFmLENBQVg7O0FBRUEsVUFBSSxDQUFDdkIsUUFBTCxFQUFlO0FBQ1g7QUFDSCxPQUxjLENBT2Y7OztBQUNBRSxXQUFLO0FBQ1IsS0FWRTtBQVlIdUIsY0FBVSxFQUFFLHNCQUFXO0FBQ25CLGFBQU96QixRQUFQO0FBQ0g7QUFkRSxHQUFQO0FBZ0JILENBL0QwQixFQUEzQixDLENBaUVBOzs7QUFDQSxJQUFJLElBQUosRUFBbUM7QUFDbEMwQixRQUFNLENBQUNDLE9BQVAsR0FBaUI1QixvQkFBakI7QUFDQSIsImZpbGUiOiIuL3Jlc291cmNlcy9tZXRyb25pYy9qcy9sYXlvdXQvZXh0ZW5kZWQvcXVpY2stYWN0aW9ucy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5cclxudmFyIEtUTGF5b3V0UXVpY2tBY3Rpb25zID0gZnVuY3Rpb24oKSB7XHJcbiAgICAvLyBQcml2YXRlIHByb3BlcnRpZXNcclxuICAgIHZhciBfZWxlbWVudDtcclxuICAgIHZhciBfb2ZmY2FudmFzT2JqZWN0O1xyXG5cclxuICAgIC8vIFByaXZhdGUgZnVuY3Rpb25zXHJcbiAgICB2YXIgX2luaXQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgaGVhZGVyID0gS1RVdGlsLmZpbmQoX2VsZW1lbnQsICcub2ZmY2FudmFzLWhlYWRlcicpO1xyXG4gICAgICAgIHZhciBjb250ZW50ID0gS1RVdGlsLmZpbmQoX2VsZW1lbnQsICcub2ZmY2FudmFzLWNvbnRlbnQnKTtcclxuXHJcbiAgICAgICAgX29mZmNhbnZhc09iamVjdCA9IG5ldyBLVE9mZmNhbnZhcyhfZWxlbWVudCwge1xyXG4gICAgICAgICAgICBvdmVybGF5OiB0cnVlLFxyXG4gICAgICAgICAgICBiYXNlQ2xhc3M6ICdvZmZjYW52YXMnLFxyXG4gICAgICAgICAgICBwbGFjZW1lbnQ6ICdyaWdodCcsXHJcbiAgICAgICAgICAgIGNsb3NlQnk6ICdrdF9xdWlja19hY3Rpb25zX2Nsb3NlJyxcclxuICAgICAgICAgICAgdG9nZ2xlQnk6ICdrdF9xdWlja19hY3Rpb25zX3RvZ2dsZSdcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgS1RVdGlsLnNjcm9sbEluaXQoY29udGVudCwge1xyXG4gICAgICAgICAgICBkaXNhYmxlRm9yTW9iaWxlOiB0cnVlLFxyXG4gICAgICAgICAgICByZXNldEhlaWdodE9uRGVzdHJveTogdHJ1ZSxcclxuICAgICAgICAgICAgaGFuZGxlV2luZG93UmVzaXplOiB0cnVlLFxyXG4gICAgICAgICAgICBoZWlnaHQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGhlaWdodCA9IHBhcnNlSW50KEtUVXRpbC5nZXRWaWV3UG9ydCgpLmhlaWdodCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGhlYWRlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KEtUVXRpbC5hY3R1YWxIZWlnaHQoaGVhZGVyKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhoZWFkZXIsICdtYXJnaW5Ub3AnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhoZWFkZXIsICdtYXJnaW5Cb3R0b20nKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGNvbnRlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKGNvbnRlbnQsICdtYXJnaW5Ub3AnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhjb250ZW50LCAnbWFyZ2luQm90dG9tJykpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KEtUVXRpbC5jc3MoX2VsZW1lbnQsICdwYWRkaW5nVG9wJykpO1xyXG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhfZWxlbWVudCwgJ3BhZGRpbmdCb3R0b20nKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gMjtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaGVpZ2h0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUHVibGljIG1ldGhvZHNcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgaW5pdDogZnVuY3Rpb24oaWQpIHtcclxuICAgICAgICAgICAgX2VsZW1lbnQgPSBLVFV0aWwuZ2V0QnlJZChpZCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIV9lbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIEluaXRpYWxpemVcclxuICAgICAgICAgICAgX2luaXQoKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBnZXRFbGVtZW50OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9lbGVtZW50O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn0oKTtcclxuXHJcbi8vIFdlYnBhY2sgc3VwcG9ydFxyXG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRtb2R1bGUuZXhwb3J0cyA9IEtUTGF5b3V0UXVpY2tBY3Rpb25zO1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/metronic/js/layout/extended/quick-actions.js\n");

/***/ }),

/***/ "./resources/metronic/js/layout/extended/quick-cart.js":
/*!*************************************************************!*\
  !*** ./resources/metronic/js/layout/extended/quick-cart.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar KTLayoutQuickCartPanel = function () {\n  // Private properties\n  var _element;\n\n  var _offcanvasObject; // Private functions\n\n\n  var _init = function _init() {\n    _offcanvasObject = new KTOffcanvas(_element, {\n      overlay: true,\n      baseClass: 'offcanvas',\n      placement: 'right',\n      closeBy: 'kt_quick_cart_close',\n      toggleBy: 'kt_quick_cart_toggle'\n    });\n    var header = KTUtil.find(_element, '.offcanvas-header');\n    var content = KTUtil.find(_element, '.offcanvas-content');\n    var wrapper = KTUtil.find(_element, '.offcanvas-wrapper');\n    var footer = KTUtil.find(_element, '.offcanvas-footer');\n    KTUtil.scrollInit(wrapper, {\n      disableForMobile: true,\n      resetHeightOnDestroy: true,\n      handleWindowResize: true,\n      height: function height() {\n        var height = parseInt(KTUtil.getViewPort().height);\n\n        if (header) {\n          height = height - parseInt(KTUtil.actualHeight(header));\n          height = height - parseInt(KTUtil.css(header, 'marginTop'));\n          height = height - parseInt(KTUtil.css(header, 'marginBottom'));\n        }\n\n        if (content) {\n          height = height - parseInt(KTUtil.css(content, 'marginTop'));\n          height = height - parseInt(KTUtil.css(content, 'marginBottom'));\n        }\n\n        if (wrapper) {\n          height = height - parseInt(KTUtil.css(wrapper, 'marginTop'));\n          height = height - parseInt(KTUtil.css(wrapper, 'marginBottom'));\n        }\n\n        if (footer) {\n          height = height - parseInt(KTUtil.actualHeight(footer));\n          height = height - parseInt(KTUtil.css(footer, 'marginTop'));\n          height = height - parseInt(KTUtil.css(footer, 'marginBottom'));\n        }\n\n        height = height - parseInt(KTUtil.css(_element, 'paddingTop'));\n        height = height - parseInt(KTUtil.css(_element, 'paddingBottom'));\n        height = height - 2;\n        return height;\n      }\n    });\n  }; // Public methods\n\n\n  return {\n    init: function init(id) {\n      _element = KTUtil.getById(id);\n\n      if (!_element) {\n        return;\n      } // Initialize\n\n\n      _init();\n    }\n  };\n}(); // Webpack support\n\n\nif (true) {\n  module.exports = KTLayoutQuickCartPanel;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvbGF5b3V0L2V4dGVuZGVkL3F1aWNrLWNhcnQuanM/ZGMwMCJdLCJuYW1lcyI6WyJLVExheW91dFF1aWNrQ2FydFBhbmVsIiwiX2VsZW1lbnQiLCJfb2ZmY2FudmFzT2JqZWN0IiwiX2luaXQiLCJLVE9mZmNhbnZhcyIsIm92ZXJsYXkiLCJiYXNlQ2xhc3MiLCJwbGFjZW1lbnQiLCJjbG9zZUJ5IiwidG9nZ2xlQnkiLCJoZWFkZXIiLCJLVFV0aWwiLCJmaW5kIiwiY29udGVudCIsIndyYXBwZXIiLCJmb290ZXIiLCJzY3JvbGxJbml0IiwiZGlzYWJsZUZvck1vYmlsZSIsInJlc2V0SGVpZ2h0T25EZXN0cm95IiwiaGFuZGxlV2luZG93UmVzaXplIiwiaGVpZ2h0IiwicGFyc2VJbnQiLCJnZXRWaWV3UG9ydCIsImFjdHVhbEhlaWdodCIsImNzcyIsImluaXQiLCJpZCIsImdldEJ5SWQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJQSxzQkFBc0IsR0FBRyxZQUFXO0FBQ3BDO0FBQ0EsTUFBSUMsUUFBSjs7QUFDQSxNQUFJQyxnQkFBSixDQUhvQyxDQUtwQzs7O0FBQ0EsTUFBSUMsS0FBSyxHQUFHLFNBQVJBLEtBQVEsR0FBVztBQUNuQkQsb0JBQWdCLEdBQUcsSUFBSUUsV0FBSixDQUFnQkgsUUFBaEIsRUFBMEI7QUFDekNJLGFBQU8sRUFBRSxJQURnQztBQUV6Q0MsZUFBUyxFQUFFLFdBRjhCO0FBR3pDQyxlQUFTLEVBQUUsT0FIOEI7QUFJekNDLGFBQU8sRUFBRSxxQkFKZ0M7QUFLekNDLGNBQVEsRUFBRTtBQUwrQixLQUExQixDQUFuQjtBQVFBLFFBQUlDLE1BQU0sR0FBR0MsTUFBTSxDQUFDQyxJQUFQLENBQVlYLFFBQVosRUFBc0IsbUJBQXRCLENBQWI7QUFDQSxRQUFJWSxPQUFPLEdBQUdGLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZWCxRQUFaLEVBQXNCLG9CQUF0QixDQUFkO0FBQ0EsUUFBSWEsT0FBTyxHQUFHSCxNQUFNLENBQUNDLElBQVAsQ0FBWVgsUUFBWixFQUFzQixvQkFBdEIsQ0FBZDtBQUNBLFFBQUljLE1BQU0sR0FBR0osTUFBTSxDQUFDQyxJQUFQLENBQVlYLFFBQVosRUFBc0IsbUJBQXRCLENBQWI7QUFFQVUsVUFBTSxDQUFDSyxVQUFQLENBQWtCRixPQUFsQixFQUEyQjtBQUN2Qkcsc0JBQWdCLEVBQUUsSUFESztBQUV2QkMsMEJBQW9CLEVBQUUsSUFGQztBQUd2QkMsd0JBQWtCLEVBQUUsSUFIRztBQUl2QkMsWUFBTSxFQUFFLGtCQUFXO0FBQ2YsWUFBSUEsTUFBTSxHQUFHQyxRQUFRLENBQUNWLE1BQU0sQ0FBQ1csV0FBUCxHQUFxQkYsTUFBdEIsQ0FBckI7O0FBRUEsWUFBSVYsTUFBSixFQUFZO0FBQ1JVLGdCQUFNLEdBQUdBLE1BQU0sR0FBR0MsUUFBUSxDQUFDVixNQUFNLENBQUNZLFlBQVAsQ0FBb0JiLE1BQXBCLENBQUQsQ0FBMUI7QUFDQVUsZ0JBQU0sR0FBR0EsTUFBTSxHQUFHQyxRQUFRLENBQUNWLE1BQU0sQ0FBQ2EsR0FBUCxDQUFXZCxNQUFYLEVBQW1CLFdBQW5CLENBQUQsQ0FBMUI7QUFDQVUsZ0JBQU0sR0FBR0EsTUFBTSxHQUFHQyxRQUFRLENBQUNWLE1BQU0sQ0FBQ2EsR0FBUCxDQUFXZCxNQUFYLEVBQW1CLGNBQW5CLENBQUQsQ0FBMUI7QUFDSDs7QUFFRCxZQUFJRyxPQUFKLEVBQWE7QUFDVE8sZ0JBQU0sR0FBR0EsTUFBTSxHQUFHQyxRQUFRLENBQUNWLE1BQU0sQ0FBQ2EsR0FBUCxDQUFXWCxPQUFYLEVBQW9CLFdBQXBCLENBQUQsQ0FBMUI7QUFDQU8sZ0JBQU0sR0FBR0EsTUFBTSxHQUFHQyxRQUFRLENBQUNWLE1BQU0sQ0FBQ2EsR0FBUCxDQUFXWCxPQUFYLEVBQW9CLGNBQXBCLENBQUQsQ0FBMUI7QUFDSDs7QUFFRCxZQUFJQyxPQUFKLEVBQWE7QUFDVE0sZ0JBQU0sR0FBR0EsTUFBTSxHQUFHQyxRQUFRLENBQUNWLE1BQU0sQ0FBQ2EsR0FBUCxDQUFXVixPQUFYLEVBQW9CLFdBQXBCLENBQUQsQ0FBMUI7QUFDQU0sZ0JBQU0sR0FBR0EsTUFBTSxHQUFHQyxRQUFRLENBQUNWLE1BQU0sQ0FBQ2EsR0FBUCxDQUFXVixPQUFYLEVBQW9CLGNBQXBCLENBQUQsQ0FBMUI7QUFDSDs7QUFFRCxZQUFJQyxNQUFKLEVBQVk7QUFDUkssZ0JBQU0sR0FBR0EsTUFBTSxHQUFHQyxRQUFRLENBQUNWLE1BQU0sQ0FBQ1ksWUFBUCxDQUFvQlIsTUFBcEIsQ0FBRCxDQUExQjtBQUNBSyxnQkFBTSxHQUFHQSxNQUFNLEdBQUdDLFFBQVEsQ0FBQ1YsTUFBTSxDQUFDYSxHQUFQLENBQVdULE1BQVgsRUFBbUIsV0FBbkIsQ0FBRCxDQUExQjtBQUNBSyxnQkFBTSxHQUFHQSxNQUFNLEdBQUdDLFFBQVEsQ0FBQ1YsTUFBTSxDQUFDYSxHQUFQLENBQVdULE1BQVgsRUFBbUIsY0FBbkIsQ0FBRCxDQUExQjtBQUNIOztBQUVESyxjQUFNLEdBQUdBLE1BQU0sR0FBR0MsUUFBUSxDQUFDVixNQUFNLENBQUNhLEdBQVAsQ0FBV3ZCLFFBQVgsRUFBcUIsWUFBckIsQ0FBRCxDQUExQjtBQUNBbUIsY0FBTSxHQUFHQSxNQUFNLEdBQUdDLFFBQVEsQ0FBQ1YsTUFBTSxDQUFDYSxHQUFQLENBQVd2QixRQUFYLEVBQXFCLGVBQXJCLENBQUQsQ0FBMUI7QUFFQW1CLGNBQU0sR0FBR0EsTUFBTSxHQUFHLENBQWxCO0FBRUEsZUFBT0EsTUFBUDtBQUNIO0FBbkNzQixLQUEzQjtBQXFDSCxHQW5ERCxDQU5vQyxDQTJEcEM7OztBQUNBLFNBQU87QUFDSEssUUFBSSxFQUFFLGNBQVNDLEVBQVQsRUFBYTtBQUNmekIsY0FBUSxHQUFHVSxNQUFNLENBQUNnQixPQUFQLENBQWVELEVBQWYsQ0FBWDs7QUFFQSxVQUFJLENBQUN6QixRQUFMLEVBQWU7QUFDWDtBQUNILE9BTGMsQ0FPZjs7O0FBQ0FFLFdBQUs7QUFDUjtBQVZFLEdBQVA7QUFZSCxDQXhFNEIsRUFBN0IsQyxDQTBFQTs7O0FBQ0EsSUFBSSxJQUFKLEVBQW1DO0FBQ2xDeUIsUUFBTSxDQUFDQyxPQUFQLEdBQWlCN0Isc0JBQWpCO0FBQ0EiLCJmaWxlIjoiLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvbGF5b3V0L2V4dGVuZGVkL3F1aWNrLWNhcnQuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuXHJcbnZhciBLVExheW91dFF1aWNrQ2FydFBhbmVsID0gZnVuY3Rpb24oKSB7XHJcbiAgICAvLyBQcml2YXRlIHByb3BlcnRpZXNcclxuICAgIHZhciBfZWxlbWVudDtcclxuICAgIHZhciBfb2ZmY2FudmFzT2JqZWN0O1xyXG5cclxuICAgIC8vIFByaXZhdGUgZnVuY3Rpb25zXHJcbiAgICB2YXIgX2luaXQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBfb2ZmY2FudmFzT2JqZWN0ID0gbmV3IEtUT2ZmY2FudmFzKF9lbGVtZW50LCB7XHJcbiAgICAgICAgICAgIG92ZXJsYXk6IHRydWUsXHJcbiAgICAgICAgICAgIGJhc2VDbGFzczogJ29mZmNhbnZhcycsXHJcbiAgICAgICAgICAgIHBsYWNlbWVudDogJ3JpZ2h0JyxcclxuICAgICAgICAgICAgY2xvc2VCeTogJ2t0X3F1aWNrX2NhcnRfY2xvc2UnLFxyXG4gICAgICAgICAgICB0b2dnbGVCeTogJ2t0X3F1aWNrX2NhcnRfdG9nZ2xlJ1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB2YXIgaGVhZGVyID0gS1RVdGlsLmZpbmQoX2VsZW1lbnQsICcub2ZmY2FudmFzLWhlYWRlcicpO1xyXG4gICAgICAgIHZhciBjb250ZW50ID0gS1RVdGlsLmZpbmQoX2VsZW1lbnQsICcub2ZmY2FudmFzLWNvbnRlbnQnKTtcclxuICAgICAgICB2YXIgd3JhcHBlciA9IEtUVXRpbC5maW5kKF9lbGVtZW50LCAnLm9mZmNhbnZhcy13cmFwcGVyJyk7XHJcbiAgICAgICAgdmFyIGZvb3RlciA9IEtUVXRpbC5maW5kKF9lbGVtZW50LCAnLm9mZmNhbnZhcy1mb290ZXInKTtcclxuXHJcbiAgICAgICAgS1RVdGlsLnNjcm9sbEluaXQod3JhcHBlciwge1xyXG4gICAgICAgICAgICBkaXNhYmxlRm9yTW9iaWxlOiB0cnVlLFxyXG4gICAgICAgICAgICByZXNldEhlaWdodE9uRGVzdHJveTogdHJ1ZSxcclxuICAgICAgICAgICAgaGFuZGxlV2luZG93UmVzaXplOiB0cnVlLFxyXG4gICAgICAgICAgICBoZWlnaHQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGhlaWdodCA9IHBhcnNlSW50KEtUVXRpbC5nZXRWaWV3UG9ydCgpLmhlaWdodCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGhlYWRlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KEtUVXRpbC5hY3R1YWxIZWlnaHQoaGVhZGVyKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhoZWFkZXIsICdtYXJnaW5Ub3AnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhoZWFkZXIsICdtYXJnaW5Cb3R0b20nKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGNvbnRlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKGNvbnRlbnQsICdtYXJnaW5Ub3AnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhjb250ZW50LCAnbWFyZ2luQm90dG9tJykpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICh3cmFwcGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyh3cmFwcGVyLCAnbWFyZ2luVG9wJykpO1xyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KEtUVXRpbC5jc3Mod3JhcHBlciwgJ21hcmdpbkJvdHRvbScpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoZm9vdGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmFjdHVhbEhlaWdodChmb290ZXIpKTtcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKGZvb3RlciwgJ21hcmdpblRvcCcpKTtcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKGZvb3RlciwgJ21hcmdpbkJvdHRvbScpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKF9lbGVtZW50LCAncGFkZGluZ1RvcCcpKTtcclxuICAgICAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KEtUVXRpbC5jc3MoX2VsZW1lbnQsICdwYWRkaW5nQm90dG9tJykpO1xyXG5cclxuICAgICAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCAtIDI7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGhlaWdodDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFB1YmxpYyBtZXRob2RzXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uKGlkKSB7XHJcbiAgICAgICAgICAgIF9lbGVtZW50ID0gS1RVdGlsLmdldEJ5SWQoaWQpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFfZWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplXHJcbiAgICAgICAgICAgIF9pbml0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufSgpO1xyXG5cclxuLy8gV2VicGFjayBzdXBwb3J0XHJcbmlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykge1xyXG5cdG1vZHVsZS5leHBvcnRzID0gS1RMYXlvdXRRdWlja0NhcnRQYW5lbDtcclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/metronic/js/layout/extended/quick-cart.js\n");

/***/ }),

/***/ "./resources/metronic/js/layout/extended/quick-notifications.js":
/*!**********************************************************************!*\
  !*** ./resources/metronic/js/layout/extended/quick-notifications.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar KTLayoutQuickNotifications = function () {\n  // Private properties\n  var _element;\n\n  var _offcanvasObject; // Private functions\n\n\n  var _init = function _init() {\n    var header = KTUtil.find(_element, '.offcanvas-header');\n    var content = KTUtil.find(_element, '.offcanvas-content');\n    _offcanvasObject = new KTOffcanvas(_element, {\n      overlay: true,\n      baseClass: 'offcanvas',\n      placement: 'right',\n      closeBy: 'kt_quick_notifications_close',\n      toggleBy: 'kt_quick_notifications_toggle'\n    });\n    KTUtil.scrollInit(content, {\n      disableForMobile: true,\n      resetHeightOnDestroy: true,\n      handleWindowResize: true,\n      height: function height() {\n        var height = parseInt(KTUtil.getViewPort().height);\n\n        if (header) {\n          height = height - parseInt(KTUtil.actualHeight(header));\n          height = height - parseInt(KTUtil.css(header, 'marginTop'));\n          height = height - parseInt(KTUtil.css(header, 'marginBottom'));\n        }\n\n        if (content) {\n          height = height - parseInt(KTUtil.css(content, 'marginTop'));\n          height = height - parseInt(KTUtil.css(content, 'marginBottom'));\n        }\n\n        height = height - parseInt(KTUtil.css(_element, 'paddingTop'));\n        height = height - parseInt(KTUtil.css(_element, 'paddingBottom'));\n        height = height - 2;\n        return height;\n      }\n    });\n  }; // Public methods\n\n\n  return {\n    init: function init(id) {\n      _element = KTUtil.getById(id);\n\n      if (!_element) {\n        return;\n      } // Initialize\n\n\n      _init();\n    },\n    getElement: function getElement() {\n      return _element;\n    }\n  };\n}(); // Webpack support\n\n\nif (true) {\n  module.exports = KTLayoutQuickNotifications;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvbGF5b3V0L2V4dGVuZGVkL3F1aWNrLW5vdGlmaWNhdGlvbnMuanM/M2FhMyJdLCJuYW1lcyI6WyJLVExheW91dFF1aWNrTm90aWZpY2F0aW9ucyIsIl9lbGVtZW50IiwiX29mZmNhbnZhc09iamVjdCIsIl9pbml0IiwiaGVhZGVyIiwiS1RVdGlsIiwiZmluZCIsImNvbnRlbnQiLCJLVE9mZmNhbnZhcyIsIm92ZXJsYXkiLCJiYXNlQ2xhc3MiLCJwbGFjZW1lbnQiLCJjbG9zZUJ5IiwidG9nZ2xlQnkiLCJzY3JvbGxJbml0IiwiZGlzYWJsZUZvck1vYmlsZSIsInJlc2V0SGVpZ2h0T25EZXN0cm95IiwiaGFuZGxlV2luZG93UmVzaXplIiwiaGVpZ2h0IiwicGFyc2VJbnQiLCJnZXRWaWV3UG9ydCIsImFjdHVhbEhlaWdodCIsImNzcyIsImluaXQiLCJpZCIsImdldEJ5SWQiLCJnZXRFbGVtZW50IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSUEsMEJBQTBCLEdBQUcsWUFBVztBQUN4QztBQUNBLE1BQUlDLFFBQUo7O0FBQ0EsTUFBSUMsZ0JBQUosQ0FId0MsQ0FLeEM7OztBQUNBLE1BQUlDLEtBQUssR0FBRyxTQUFSQSxLQUFRLEdBQVc7QUFDbkIsUUFBSUMsTUFBTSxHQUFHQyxNQUFNLENBQUNDLElBQVAsQ0FBWUwsUUFBWixFQUFzQixtQkFBdEIsQ0FBYjtBQUNBLFFBQUlNLE9BQU8sR0FBR0YsTUFBTSxDQUFDQyxJQUFQLENBQVlMLFFBQVosRUFBc0Isb0JBQXRCLENBQWQ7QUFFQUMsb0JBQWdCLEdBQUcsSUFBSU0sV0FBSixDQUFnQlAsUUFBaEIsRUFBMEI7QUFDekNRLGFBQU8sRUFBRSxJQURnQztBQUV6Q0MsZUFBUyxFQUFFLFdBRjhCO0FBR3pDQyxlQUFTLEVBQUUsT0FIOEI7QUFJekNDLGFBQU8sRUFBRSw4QkFKZ0M7QUFLekNDLGNBQVEsRUFBRTtBQUwrQixLQUExQixDQUFuQjtBQVFBUixVQUFNLENBQUNTLFVBQVAsQ0FBa0JQLE9BQWxCLEVBQTJCO0FBQ3ZCUSxzQkFBZ0IsRUFBRSxJQURLO0FBRXZCQywwQkFBb0IsRUFBRSxJQUZDO0FBR3ZCQyx3QkFBa0IsRUFBRSxJQUhHO0FBSXZCQyxZQUFNLEVBQUUsa0JBQVc7QUFDZixZQUFJQSxNQUFNLEdBQUdDLFFBQVEsQ0FBQ2QsTUFBTSxDQUFDZSxXQUFQLEdBQXFCRixNQUF0QixDQUFyQjs7QUFFQSxZQUFJZCxNQUFKLEVBQVk7QUFDUmMsZ0JBQU0sR0FBR0EsTUFBTSxHQUFHQyxRQUFRLENBQUNkLE1BQU0sQ0FBQ2dCLFlBQVAsQ0FBb0JqQixNQUFwQixDQUFELENBQTFCO0FBQ0FjLGdCQUFNLEdBQUdBLE1BQU0sR0FBR0MsUUFBUSxDQUFDZCxNQUFNLENBQUNpQixHQUFQLENBQVdsQixNQUFYLEVBQW1CLFdBQW5CLENBQUQsQ0FBMUI7QUFDQWMsZ0JBQU0sR0FBR0EsTUFBTSxHQUFHQyxRQUFRLENBQUNkLE1BQU0sQ0FBQ2lCLEdBQVAsQ0FBV2xCLE1BQVgsRUFBbUIsY0FBbkIsQ0FBRCxDQUExQjtBQUNIOztBQUVELFlBQUlHLE9BQUosRUFBYTtBQUNUVyxnQkFBTSxHQUFHQSxNQUFNLEdBQUdDLFFBQVEsQ0FBQ2QsTUFBTSxDQUFDaUIsR0FBUCxDQUFXZixPQUFYLEVBQW9CLFdBQXBCLENBQUQsQ0FBMUI7QUFDQVcsZ0JBQU0sR0FBR0EsTUFBTSxHQUFHQyxRQUFRLENBQUNkLE1BQU0sQ0FBQ2lCLEdBQVAsQ0FBV2YsT0FBWCxFQUFvQixjQUFwQixDQUFELENBQTFCO0FBQ0g7O0FBRURXLGNBQU0sR0FBR0EsTUFBTSxHQUFHQyxRQUFRLENBQUNkLE1BQU0sQ0FBQ2lCLEdBQVAsQ0FBV3JCLFFBQVgsRUFBcUIsWUFBckIsQ0FBRCxDQUExQjtBQUNBaUIsY0FBTSxHQUFHQSxNQUFNLEdBQUdDLFFBQVEsQ0FBQ2QsTUFBTSxDQUFDaUIsR0FBUCxDQUFXckIsUUFBWCxFQUFxQixlQUFyQixDQUFELENBQTFCO0FBRUFpQixjQUFNLEdBQUdBLE1BQU0sR0FBRyxDQUFsQjtBQUVBLGVBQU9BLE1BQVA7QUFDSDtBQXhCc0IsS0FBM0I7QUEwQkgsR0F0Q0QsQ0FOd0MsQ0E4Q3hDOzs7QUFDQSxTQUFPO0FBQ0hLLFFBQUksRUFBRSxjQUFTQyxFQUFULEVBQWE7QUFDZnZCLGNBQVEsR0FBR0ksTUFBTSxDQUFDb0IsT0FBUCxDQUFlRCxFQUFmLENBQVg7O0FBRUEsVUFBSSxDQUFDdkIsUUFBTCxFQUFlO0FBQ1g7QUFDSCxPQUxjLENBT2Y7OztBQUNBRSxXQUFLO0FBQ1IsS0FWRTtBQVlIdUIsY0FBVSxFQUFFLHNCQUFXO0FBQ25CLGFBQU96QixRQUFQO0FBQ0g7QUFkRSxHQUFQO0FBZ0JILENBL0RnQyxFQUFqQyxDLENBaUVBOzs7QUFDQSxJQUFJLElBQUosRUFBbUM7QUFDbEMwQixRQUFNLENBQUNDLE9BQVAsR0FBaUI1QiwwQkFBakI7QUFDQSIsImZpbGUiOiIuL3Jlc291cmNlcy9tZXRyb25pYy9qcy9sYXlvdXQvZXh0ZW5kZWQvcXVpY2stbm90aWZpY2F0aW9ucy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5cclxudmFyIEtUTGF5b3V0UXVpY2tOb3RpZmljYXRpb25zID0gZnVuY3Rpb24oKSB7XHJcbiAgICAvLyBQcml2YXRlIHByb3BlcnRpZXNcclxuICAgIHZhciBfZWxlbWVudDtcclxuICAgIHZhciBfb2ZmY2FudmFzT2JqZWN0O1xyXG5cclxuICAgIC8vIFByaXZhdGUgZnVuY3Rpb25zXHJcbiAgICB2YXIgX2luaXQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgaGVhZGVyID0gS1RVdGlsLmZpbmQoX2VsZW1lbnQsICcub2ZmY2FudmFzLWhlYWRlcicpO1xyXG4gICAgICAgIHZhciBjb250ZW50ID0gS1RVdGlsLmZpbmQoX2VsZW1lbnQsICcub2ZmY2FudmFzLWNvbnRlbnQnKTtcclxuXHJcbiAgICAgICAgX29mZmNhbnZhc09iamVjdCA9IG5ldyBLVE9mZmNhbnZhcyhfZWxlbWVudCwge1xyXG4gICAgICAgICAgICBvdmVybGF5OiB0cnVlLFxyXG4gICAgICAgICAgICBiYXNlQ2xhc3M6ICdvZmZjYW52YXMnLFxyXG4gICAgICAgICAgICBwbGFjZW1lbnQ6ICdyaWdodCcsXHJcbiAgICAgICAgICAgIGNsb3NlQnk6ICdrdF9xdWlja19ub3RpZmljYXRpb25zX2Nsb3NlJyxcclxuICAgICAgICAgICAgdG9nZ2xlQnk6ICdrdF9xdWlja19ub3RpZmljYXRpb25zX3RvZ2dsZSdcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgS1RVdGlsLnNjcm9sbEluaXQoY29udGVudCwge1xyXG4gICAgICAgICAgICBkaXNhYmxlRm9yTW9iaWxlOiB0cnVlLFxyXG4gICAgICAgICAgICByZXNldEhlaWdodE9uRGVzdHJveTogdHJ1ZSxcclxuICAgICAgICAgICAgaGFuZGxlV2luZG93UmVzaXplOiB0cnVlLFxyXG4gICAgICAgICAgICBoZWlnaHQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGhlaWdodCA9IHBhcnNlSW50KEtUVXRpbC5nZXRWaWV3UG9ydCgpLmhlaWdodCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGhlYWRlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KEtUVXRpbC5hY3R1YWxIZWlnaHQoaGVhZGVyKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhoZWFkZXIsICdtYXJnaW5Ub3AnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhoZWFkZXIsICdtYXJnaW5Cb3R0b20nKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGNvbnRlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKGNvbnRlbnQsICdtYXJnaW5Ub3AnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhjb250ZW50LCAnbWFyZ2luQm90dG9tJykpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KEtUVXRpbC5jc3MoX2VsZW1lbnQsICdwYWRkaW5nVG9wJykpO1xyXG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhfZWxlbWVudCwgJ3BhZGRpbmdCb3R0b20nKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gMjtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaGVpZ2h0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUHVibGljIG1ldGhvZHNcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgaW5pdDogZnVuY3Rpb24oaWQpIHtcclxuICAgICAgICAgICAgX2VsZW1lbnQgPSBLVFV0aWwuZ2V0QnlJZChpZCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIV9lbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIEluaXRpYWxpemVcclxuICAgICAgICAgICAgX2luaXQoKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBnZXRFbGVtZW50OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9lbGVtZW50O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn0oKTtcclxuXHJcbi8vIFdlYnBhY2sgc3VwcG9ydFxyXG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRtb2R1bGUuZXhwb3J0cyA9IEtUTGF5b3V0UXVpY2tOb3RpZmljYXRpb25zO1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/metronic/js/layout/extended/quick-notifications.js\n");

/***/ }),

/***/ "./resources/metronic/js/layout/extended/quick-panel.js":
/*!**************************************************************!*\
  !*** ./resources/metronic/js/layout/extended/quick-panel.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar KTLayoutQuickPanel = function () {\n  // Private properties\n  var _element;\n\n  var _offcanvasObject;\n\n  var _notificationsElement;\n\n  var _logsElement;\n\n  var _settingsElement; // Private functions\n\n\n  var _getContentHeight = function _getContentHeight() {\n    var height;\n    var header = KTUtil.find(_element, '.offcanvas-header');\n    var content = KTUtil.find(_element, '.offcanvas-content');\n    var height = parseInt(KTUtil.getViewPort().height);\n\n    if (header) {\n      height = height - parseInt(KTUtil.actualHeight(header));\n      height = height - parseInt(KTUtil.css(header, 'marginTop'));\n      height = height - parseInt(KTUtil.css(header, 'marginBottom'));\n    }\n\n    if (content) {\n      height = height - parseInt(KTUtil.css(content, 'marginTop'));\n      height = height - parseInt(KTUtil.css(content, 'marginBottom'));\n    }\n\n    height = height - parseInt(KTUtil.css(_element, 'paddingTop'));\n    height = height - parseInt(KTUtil.css(_element, 'paddingBottom'));\n    height = height - 2;\n    return height;\n  };\n\n  var _init = function _init() {\n    _offcanvasObject = new KTOffcanvas(_element, {\n      overlay: true,\n      baseClass: 'offcanvas',\n      placement: 'right',\n      closeBy: 'kt_quick_panel_close',\n      toggleBy: 'kt_quick_panel_toggle'\n    });\n  };\n\n  var _initNotifications = function _initNotifications() {\n    KTUtil.scrollInit(_notificationsElement, {\n      mobileNativeScroll: true,\n      resetHeightOnDestroy: true,\n      handleWindowResize: true,\n      height: function height() {\n        return _getContentHeight();\n      }\n    });\n  };\n\n  var _initLogs = function _initLogs() {\n    KTUtil.scrollInit(_logsElement, {\n      mobileNativeScroll: true,\n      resetHeightOnDestroy: true,\n      handleWindowResize: true,\n      height: function height() {\n        return _getContentHeight();\n      }\n    });\n  };\n\n  var _initSettings = function _initSettings() {\n    KTUtil.scrollInit(_settingsElement, {\n      mobileNativeScroll: true,\n      resetHeightOnDestroy: true,\n      handleWindowResize: true,\n      height: function height() {\n        return _getContentHeight();\n      }\n    });\n  };\n\n  var _updateScrollbars = function _updateScrollbars() {\n    $(_element).find('a[data-toggle=\"tab\"]').on('shown.bs.tab', function (e) {\n      KTUtil.scrollUpdate(_notificationsElement);\n      KTUtil.scrollUpdate(_logsElement);\n      KTUtil.scrollUpdate(_settingsElement);\n    });\n  }; // Public methods\n\n\n  return {\n    init: function init(id) {\n      _element = KTUtil.getById(id);\n      _notificationsElement = KTUtil.getById('kt_quick_panel_notifications');\n      _logsElement = KTUtil.getById('kt_quick_panel_logs');\n      _settingsElement = KTUtil.getById('kt_quick_panel_settings');\n\n      _init();\n\n      _initNotifications();\n\n      _initLogs();\n\n      _initSettings();\n\n      _updateScrollbars();\n    }\n  };\n}(); // Webpack support\n\n\nif (true) {\n  module.exports = KTLayoutQuickPanel;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/layout/extended/quick-panel.js\n");

/***/ }),

/***/ "./resources/metronic/js/layout/extended/quick-search.js":
/*!***************************************************************!*\
  !*** ./resources/metronic/js/layout/extended/quick-search.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar KTLayoutQuickSearch = function () {\n  // Private properties\n  var _element;\n\n  var _offcanvasObject; // Private functions\n\n\n  var _init = function _init() {\n    var header = KTUtil.find(_element, '.offcanvas-header');\n    var content = KTUtil.find(_element, '.offcanvas-content');\n    var form = KTUtil.find(_element, '.quick-search-form');\n    var results = KTUtil.find(_element, '.quick-search-wrapper');\n    _offcanvasObject = new KTOffcanvas(_element, {\n      overlay: true,\n      baseClass: 'offcanvas',\n      placement: 'right',\n      closeBy: 'kt_quick_search_close',\n      toggleBy: 'kt_quick_search_toggle'\n    });\n    KTUtil.scrollInit(results, {\n      disableForMobile: true,\n      resetHeightOnDestroy: true,\n      handleWindowResize: true,\n      height: function height() {\n        var height = parseInt(KTUtil.getViewPort().height);\n\n        if (header) {\n          height = height - parseInt(KTUtil.actualHeight(header));\n          height = height - parseInt(KTUtil.css(header, 'marginTop'));\n          height = height - parseInt(KTUtil.css(header, 'marginBottom'));\n        }\n\n        if (content) {\n          height = height - parseInt(KTUtil.css(content, 'marginTop'));\n          height = height - parseInt(KTUtil.css(content, 'marginBottom'));\n        }\n\n        if (results) {\n          height = height - parseInt(KTUtil.actualHeight(form));\n          height = height - parseInt(KTUtil.css(form, 'marginTop'));\n          height = height - parseInt(KTUtil.css(form, 'marginBottom'));\n          height = height - parseInt(KTUtil.css(results, 'marginTop'));\n          height = height - parseInt(KTUtil.css(results, 'marginBottom'));\n        }\n\n        height = height - parseInt(KTUtil.css(_element, 'paddingTop'));\n        height = height - parseInt(KTUtil.css(_element, 'paddingBottom'));\n        height = height - 2;\n        return height;\n      }\n    });\n  }; // Public methods\n\n\n  return {\n    init: function init(id) {\n      _element = KTUtil.getById(id);\n\n      if (!_element) {\n        return;\n      } // Initialize\n\n\n      _init();\n    },\n    getElement: function getElement() {\n      return _element;\n    }\n  };\n}(); // Webpack support\n\n\nif (true) {\n  module.exports = KTLayoutQuickSearch;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvbGF5b3V0L2V4dGVuZGVkL3F1aWNrLXNlYXJjaC5qcz8xYzdlIl0sIm5hbWVzIjpbIktUTGF5b3V0UXVpY2tTZWFyY2giLCJfZWxlbWVudCIsIl9vZmZjYW52YXNPYmplY3QiLCJfaW5pdCIsImhlYWRlciIsIktUVXRpbCIsImZpbmQiLCJjb250ZW50IiwiZm9ybSIsInJlc3VsdHMiLCJLVE9mZmNhbnZhcyIsIm92ZXJsYXkiLCJiYXNlQ2xhc3MiLCJwbGFjZW1lbnQiLCJjbG9zZUJ5IiwidG9nZ2xlQnkiLCJzY3JvbGxJbml0IiwiZGlzYWJsZUZvck1vYmlsZSIsInJlc2V0SGVpZ2h0T25EZXN0cm95IiwiaGFuZGxlV2luZG93UmVzaXplIiwiaGVpZ2h0IiwicGFyc2VJbnQiLCJnZXRWaWV3UG9ydCIsImFjdHVhbEhlaWdodCIsImNzcyIsImluaXQiLCJpZCIsImdldEJ5SWQiLCJnZXRFbGVtZW50IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSUEsbUJBQW1CLEdBQUcsWUFBVztBQUNqQztBQUNBLE1BQUlDLFFBQUo7O0FBQ0EsTUFBSUMsZ0JBQUosQ0FIaUMsQ0FLakM7OztBQUNBLE1BQUlDLEtBQUssR0FBRyxTQUFSQSxLQUFRLEdBQVc7QUFDbkIsUUFBSUMsTUFBTSxHQUFHQyxNQUFNLENBQUNDLElBQVAsQ0FBWUwsUUFBWixFQUFzQixtQkFBdEIsQ0FBYjtBQUNBLFFBQUlNLE9BQU8sR0FBR0YsTUFBTSxDQUFDQyxJQUFQLENBQVlMLFFBQVosRUFBc0Isb0JBQXRCLENBQWQ7QUFDQSxRQUFJTyxJQUFJLEdBQUdILE1BQU0sQ0FBQ0MsSUFBUCxDQUFZTCxRQUFaLEVBQXNCLG9CQUF0QixDQUFYO0FBQ0EsUUFBSVEsT0FBTyxHQUFHSixNQUFNLENBQUNDLElBQVAsQ0FBWUwsUUFBWixFQUFzQix1QkFBdEIsQ0FBZDtBQUVBQyxvQkFBZ0IsR0FBRyxJQUFJUSxXQUFKLENBQWdCVCxRQUFoQixFQUEwQjtBQUN6Q1UsYUFBTyxFQUFFLElBRGdDO0FBRXpDQyxlQUFTLEVBQUUsV0FGOEI7QUFHekNDLGVBQVMsRUFBRSxPQUg4QjtBQUl6Q0MsYUFBTyxFQUFFLHVCQUpnQztBQUt6Q0MsY0FBUSxFQUFFO0FBTCtCLEtBQTFCLENBQW5CO0FBUUFWLFVBQU0sQ0FBQ1csVUFBUCxDQUFrQlAsT0FBbEIsRUFBMkI7QUFDdkJRLHNCQUFnQixFQUFFLElBREs7QUFFdkJDLDBCQUFvQixFQUFFLElBRkM7QUFHdkJDLHdCQUFrQixFQUFFLElBSEc7QUFJdkJDLFlBQU0sRUFBRSxrQkFBVztBQUNmLFlBQUlBLE1BQU0sR0FBR0MsUUFBUSxDQUFDaEIsTUFBTSxDQUFDaUIsV0FBUCxHQUFxQkYsTUFBdEIsQ0FBckI7O0FBRUEsWUFBSWhCLE1BQUosRUFBWTtBQUNSZ0IsZ0JBQU0sR0FBR0EsTUFBTSxHQUFHQyxRQUFRLENBQUNoQixNQUFNLENBQUNrQixZQUFQLENBQW9CbkIsTUFBcEIsQ0FBRCxDQUExQjtBQUNBZ0IsZ0JBQU0sR0FBR0EsTUFBTSxHQUFHQyxRQUFRLENBQUNoQixNQUFNLENBQUNtQixHQUFQLENBQVdwQixNQUFYLEVBQW1CLFdBQW5CLENBQUQsQ0FBMUI7QUFDQWdCLGdCQUFNLEdBQUdBLE1BQU0sR0FBR0MsUUFBUSxDQUFDaEIsTUFBTSxDQUFDbUIsR0FBUCxDQUFXcEIsTUFBWCxFQUFtQixjQUFuQixDQUFELENBQTFCO0FBQ0g7O0FBRUQsWUFBSUcsT0FBSixFQUFhO0FBQ1RhLGdCQUFNLEdBQUdBLE1BQU0sR0FBR0MsUUFBUSxDQUFDaEIsTUFBTSxDQUFDbUIsR0FBUCxDQUFXakIsT0FBWCxFQUFvQixXQUFwQixDQUFELENBQTFCO0FBQ0FhLGdCQUFNLEdBQUdBLE1BQU0sR0FBR0MsUUFBUSxDQUFDaEIsTUFBTSxDQUFDbUIsR0FBUCxDQUFXakIsT0FBWCxFQUFvQixjQUFwQixDQUFELENBQTFCO0FBQ0g7O0FBRUQsWUFBSUUsT0FBSixFQUFhO0FBQ1RXLGdCQUFNLEdBQUdBLE1BQU0sR0FBR0MsUUFBUSxDQUFDaEIsTUFBTSxDQUFDa0IsWUFBUCxDQUFvQmYsSUFBcEIsQ0FBRCxDQUExQjtBQUNBWSxnQkFBTSxHQUFHQSxNQUFNLEdBQUdDLFFBQVEsQ0FBQ2hCLE1BQU0sQ0FBQ21CLEdBQVAsQ0FBV2hCLElBQVgsRUFBaUIsV0FBakIsQ0FBRCxDQUExQjtBQUNBWSxnQkFBTSxHQUFHQSxNQUFNLEdBQUdDLFFBQVEsQ0FBQ2hCLE1BQU0sQ0FBQ21CLEdBQVAsQ0FBV2hCLElBQVgsRUFBaUIsY0FBakIsQ0FBRCxDQUExQjtBQUVBWSxnQkFBTSxHQUFHQSxNQUFNLEdBQUdDLFFBQVEsQ0FBQ2hCLE1BQU0sQ0FBQ21CLEdBQVAsQ0FBV2YsT0FBWCxFQUFvQixXQUFwQixDQUFELENBQTFCO0FBQ0FXLGdCQUFNLEdBQUdBLE1BQU0sR0FBR0MsUUFBUSxDQUFDaEIsTUFBTSxDQUFDbUIsR0FBUCxDQUFXZixPQUFYLEVBQW9CLGNBQXBCLENBQUQsQ0FBMUI7QUFDSDs7QUFFRFcsY0FBTSxHQUFHQSxNQUFNLEdBQUdDLFFBQVEsQ0FBQ2hCLE1BQU0sQ0FBQ21CLEdBQVAsQ0FBV3ZCLFFBQVgsRUFBcUIsWUFBckIsQ0FBRCxDQUExQjtBQUNBbUIsY0FBTSxHQUFHQSxNQUFNLEdBQUdDLFFBQVEsQ0FBQ2hCLE1BQU0sQ0FBQ21CLEdBQVAsQ0FBV3ZCLFFBQVgsRUFBcUIsZUFBckIsQ0FBRCxDQUExQjtBQUVBbUIsY0FBTSxHQUFHQSxNQUFNLEdBQUcsQ0FBbEI7QUFFQSxlQUFPQSxNQUFQO0FBQ0g7QUFqQ3NCLEtBQTNCO0FBbUNILEdBakRELENBTmlDLENBeURqQzs7O0FBQ0EsU0FBTztBQUNISyxRQUFJLEVBQUUsY0FBU0MsRUFBVCxFQUFhO0FBQ2Z6QixjQUFRLEdBQUdJLE1BQU0sQ0FBQ3NCLE9BQVAsQ0FBZUQsRUFBZixDQUFYOztBQUVBLFVBQUksQ0FBQ3pCLFFBQUwsRUFBZTtBQUNYO0FBQ0gsT0FMYyxDQU9mOzs7QUFDQUUsV0FBSztBQUNSLEtBVkU7QUFZSHlCLGNBQVUsRUFBRSxzQkFBVztBQUNuQixhQUFPM0IsUUFBUDtBQUNIO0FBZEUsR0FBUDtBQWdCSCxDQTFFeUIsRUFBMUIsQyxDQTRFQTs7O0FBQ0EsSUFBSSxJQUFKLEVBQW1DO0FBQ2xDNEIsUUFBTSxDQUFDQyxPQUFQLEdBQWlCOUIsbUJBQWpCO0FBQ0EiLCJmaWxlIjoiLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvbGF5b3V0L2V4dGVuZGVkL3F1aWNrLXNlYXJjaC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5cclxudmFyIEtUTGF5b3V0UXVpY2tTZWFyY2ggPSBmdW5jdGlvbigpIHtcclxuICAgIC8vIFByaXZhdGUgcHJvcGVydGllc1xyXG4gICAgdmFyIF9lbGVtZW50O1xyXG4gICAgdmFyIF9vZmZjYW52YXNPYmplY3Q7XHJcblxyXG4gICAgLy8gUHJpdmF0ZSBmdW5jdGlvbnNcclxuICAgIHZhciBfaW5pdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBoZWFkZXIgPSBLVFV0aWwuZmluZChfZWxlbWVudCwgJy5vZmZjYW52YXMtaGVhZGVyJyk7XHJcbiAgICAgICAgdmFyIGNvbnRlbnQgPSBLVFV0aWwuZmluZChfZWxlbWVudCwgJy5vZmZjYW52YXMtY29udGVudCcpO1xyXG4gICAgICAgIHZhciBmb3JtID0gS1RVdGlsLmZpbmQoX2VsZW1lbnQsICcucXVpY2stc2VhcmNoLWZvcm0nKTtcclxuICAgICAgICB2YXIgcmVzdWx0cyA9IEtUVXRpbC5maW5kKF9lbGVtZW50LCAnLnF1aWNrLXNlYXJjaC13cmFwcGVyJyk7XHJcblxyXG4gICAgICAgIF9vZmZjYW52YXNPYmplY3QgPSBuZXcgS1RPZmZjYW52YXMoX2VsZW1lbnQsIHtcclxuICAgICAgICAgICAgb3ZlcmxheTogdHJ1ZSxcclxuICAgICAgICAgICAgYmFzZUNsYXNzOiAnb2ZmY2FudmFzJyxcclxuICAgICAgICAgICAgcGxhY2VtZW50OiAncmlnaHQnLFxyXG4gICAgICAgICAgICBjbG9zZUJ5OiAna3RfcXVpY2tfc2VhcmNoX2Nsb3NlJyxcclxuICAgICAgICAgICAgdG9nZ2xlQnk6ICdrdF9xdWlja19zZWFyY2hfdG9nZ2xlJ1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBLVFV0aWwuc2Nyb2xsSW5pdChyZXN1bHRzLCB7XHJcbiAgICAgICAgICAgIGRpc2FibGVGb3JNb2JpbGU6IHRydWUsXHJcbiAgICAgICAgICAgIHJlc2V0SGVpZ2h0T25EZXN0cm95OiB0cnVlLFxyXG4gICAgICAgICAgICBoYW5kbGVXaW5kb3dSZXNpemU6IHRydWUsXHJcbiAgICAgICAgICAgIGhlaWdodDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaGVpZ2h0ID0gcGFyc2VJbnQoS1RVdGlsLmdldFZpZXdQb3J0KCkuaGVpZ2h0KTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoaGVhZGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmFjdHVhbEhlaWdodChoZWFkZXIpKTtcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKGhlYWRlciwgJ21hcmdpblRvcCcpKTtcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKGhlYWRlciwgJ21hcmdpbkJvdHRvbScpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY29udGVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KEtUVXRpbC5jc3MoY29udGVudCwgJ21hcmdpblRvcCcpKTtcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKGNvbnRlbnQsICdtYXJnaW5Cb3R0b20nKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdHMpIHtcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuYWN0dWFsSGVpZ2h0KGZvcm0pKTtcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKGZvcm0sICdtYXJnaW5Ub3AnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhmb3JtLCAnbWFyZ2luQm90dG9tJykpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKHJlc3VsdHMsICdtYXJnaW5Ub3AnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhyZXN1bHRzLCAnbWFyZ2luQm90dG9tJykpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KEtUVXRpbC5jc3MoX2VsZW1lbnQsICdwYWRkaW5nVG9wJykpO1xyXG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhfZWxlbWVudCwgJ3BhZGRpbmdCb3R0b20nKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gMjtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaGVpZ2h0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUHVibGljIG1ldGhvZHNcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgaW5pdDogZnVuY3Rpb24oaWQpIHtcclxuICAgICAgICAgICAgX2VsZW1lbnQgPSBLVFV0aWwuZ2V0QnlJZChpZCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIV9lbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIEluaXRpYWxpemVcclxuICAgICAgICAgICAgX2luaXQoKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBnZXRFbGVtZW50OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9lbGVtZW50O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn0oKTtcclxuXHJcbi8vIFdlYnBhY2sgc3VwcG9ydFxyXG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRtb2R1bGUuZXhwb3J0cyA9IEtUTGF5b3V0UXVpY2tTZWFyY2g7XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/metronic/js/layout/extended/quick-search.js\n");

/***/ }),

/***/ "./resources/metronic/js/layout/extended/quick-user.js":
/*!*************************************************************!*\
  !*** ./resources/metronic/js/layout/extended/quick-user.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar KTLayoutQuickUser = function () {\n  // Private properties\n  var _element;\n\n  var _offcanvasObject; // Private functions\n\n\n  var _init = function _init() {\n    var header = KTUtil.find(_element, '.offcanvas-header');\n    var content = KTUtil.find(_element, '.offcanvas-content');\n    _offcanvasObject = new KTOffcanvas(_element, {\n      overlay: true,\n      baseClass: 'offcanvas',\n      placement: 'right',\n      closeBy: 'kt_quick_user_close',\n      toggleBy: 'kt_quick_user_toggle'\n    });\n    KTUtil.scrollInit(content, {\n      disableForMobile: true,\n      resetHeightOnDestroy: true,\n      handleWindowResize: true,\n      height: function height() {\n        var height = parseInt(KTUtil.getViewPort().height);\n\n        if (header) {\n          height = height - parseInt(KTUtil.actualHeight(header));\n          height = height - parseInt(KTUtil.css(header, 'marginTop'));\n          height = height - parseInt(KTUtil.css(header, 'marginBottom'));\n        }\n\n        if (content) {\n          height = height - parseInt(KTUtil.css(content, 'marginTop'));\n          height = height - parseInt(KTUtil.css(content, 'marginBottom'));\n        }\n\n        height = height - parseInt(KTUtil.css(_element, 'paddingTop'));\n        height = height - parseInt(KTUtil.css(_element, 'paddingBottom'));\n        height = height - 2;\n        return height;\n      }\n    });\n  }; // Public methods\n\n\n  return {\n    init: function init(id) {\n      _element = KTUtil.getById(id);\n\n      if (!_element) {\n        return;\n      } // Initialize\n\n\n      _init();\n    },\n    getElement: function getElement() {\n      return _element;\n    }\n  };\n}(); // Webpack support\n\n\nif (true) {\n  module.exports = KTLayoutQuickUser;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvbGF5b3V0L2V4dGVuZGVkL3F1aWNrLXVzZXIuanM/ODA5YSJdLCJuYW1lcyI6WyJLVExheW91dFF1aWNrVXNlciIsIl9lbGVtZW50IiwiX29mZmNhbnZhc09iamVjdCIsIl9pbml0IiwiaGVhZGVyIiwiS1RVdGlsIiwiZmluZCIsImNvbnRlbnQiLCJLVE9mZmNhbnZhcyIsIm92ZXJsYXkiLCJiYXNlQ2xhc3MiLCJwbGFjZW1lbnQiLCJjbG9zZUJ5IiwidG9nZ2xlQnkiLCJzY3JvbGxJbml0IiwiZGlzYWJsZUZvck1vYmlsZSIsInJlc2V0SGVpZ2h0T25EZXN0cm95IiwiaGFuZGxlV2luZG93UmVzaXplIiwiaGVpZ2h0IiwicGFyc2VJbnQiLCJnZXRWaWV3UG9ydCIsImFjdHVhbEhlaWdodCIsImNzcyIsImluaXQiLCJpZCIsImdldEJ5SWQiLCJnZXRFbGVtZW50IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSUEsaUJBQWlCLEdBQUcsWUFBVztBQUMvQjtBQUNBLE1BQUlDLFFBQUo7O0FBQ0EsTUFBSUMsZ0JBQUosQ0FIK0IsQ0FLL0I7OztBQUNBLE1BQUlDLEtBQUssR0FBRyxTQUFSQSxLQUFRLEdBQVc7QUFDbkIsUUFBSUMsTUFBTSxHQUFHQyxNQUFNLENBQUNDLElBQVAsQ0FBWUwsUUFBWixFQUFzQixtQkFBdEIsQ0FBYjtBQUNBLFFBQUlNLE9BQU8sR0FBR0YsTUFBTSxDQUFDQyxJQUFQLENBQVlMLFFBQVosRUFBc0Isb0JBQXRCLENBQWQ7QUFFQUMsb0JBQWdCLEdBQUcsSUFBSU0sV0FBSixDQUFnQlAsUUFBaEIsRUFBMEI7QUFDekNRLGFBQU8sRUFBRSxJQURnQztBQUV6Q0MsZUFBUyxFQUFFLFdBRjhCO0FBR3pDQyxlQUFTLEVBQUUsT0FIOEI7QUFJekNDLGFBQU8sRUFBRSxxQkFKZ0M7QUFLekNDLGNBQVEsRUFBRTtBQUwrQixLQUExQixDQUFuQjtBQVFBUixVQUFNLENBQUNTLFVBQVAsQ0FBa0JQLE9BQWxCLEVBQTJCO0FBQ3ZCUSxzQkFBZ0IsRUFBRSxJQURLO0FBRXZCQywwQkFBb0IsRUFBRSxJQUZDO0FBR3ZCQyx3QkFBa0IsRUFBRSxJQUhHO0FBSXZCQyxZQUFNLEVBQUUsa0JBQVc7QUFDZixZQUFJQSxNQUFNLEdBQUdDLFFBQVEsQ0FBQ2QsTUFBTSxDQUFDZSxXQUFQLEdBQXFCRixNQUF0QixDQUFyQjs7QUFFQSxZQUFJZCxNQUFKLEVBQVk7QUFDUmMsZ0JBQU0sR0FBR0EsTUFBTSxHQUFHQyxRQUFRLENBQUNkLE1BQU0sQ0FBQ2dCLFlBQVAsQ0FBb0JqQixNQUFwQixDQUFELENBQTFCO0FBQ0FjLGdCQUFNLEdBQUdBLE1BQU0sR0FBR0MsUUFBUSxDQUFDZCxNQUFNLENBQUNpQixHQUFQLENBQVdsQixNQUFYLEVBQW1CLFdBQW5CLENBQUQsQ0FBMUI7QUFDQWMsZ0JBQU0sR0FBR0EsTUFBTSxHQUFHQyxRQUFRLENBQUNkLE1BQU0sQ0FBQ2lCLEdBQVAsQ0FBV2xCLE1BQVgsRUFBbUIsY0FBbkIsQ0FBRCxDQUExQjtBQUNIOztBQUVELFlBQUlHLE9BQUosRUFBYTtBQUNUVyxnQkFBTSxHQUFHQSxNQUFNLEdBQUdDLFFBQVEsQ0FBQ2QsTUFBTSxDQUFDaUIsR0FBUCxDQUFXZixPQUFYLEVBQW9CLFdBQXBCLENBQUQsQ0FBMUI7QUFDQVcsZ0JBQU0sR0FBR0EsTUFBTSxHQUFHQyxRQUFRLENBQUNkLE1BQU0sQ0FBQ2lCLEdBQVAsQ0FBV2YsT0FBWCxFQUFvQixjQUFwQixDQUFELENBQTFCO0FBQ0g7O0FBRURXLGNBQU0sR0FBR0EsTUFBTSxHQUFHQyxRQUFRLENBQUNkLE1BQU0sQ0FBQ2lCLEdBQVAsQ0FBV3JCLFFBQVgsRUFBcUIsWUFBckIsQ0FBRCxDQUExQjtBQUNBaUIsY0FBTSxHQUFHQSxNQUFNLEdBQUdDLFFBQVEsQ0FBQ2QsTUFBTSxDQUFDaUIsR0FBUCxDQUFXckIsUUFBWCxFQUFxQixlQUFyQixDQUFELENBQTFCO0FBRUFpQixjQUFNLEdBQUdBLE1BQU0sR0FBRyxDQUFsQjtBQUVBLGVBQU9BLE1BQVA7QUFDSDtBQXhCc0IsS0FBM0I7QUEwQkgsR0F0Q0QsQ0FOK0IsQ0E4Qy9COzs7QUFDQSxTQUFPO0FBQ0hLLFFBQUksRUFBRSxjQUFTQyxFQUFULEVBQWE7QUFDZnZCLGNBQVEsR0FBR0ksTUFBTSxDQUFDb0IsT0FBUCxDQUFlRCxFQUFmLENBQVg7O0FBRUEsVUFBSSxDQUFDdkIsUUFBTCxFQUFlO0FBQ1g7QUFDSCxPQUxjLENBT2Y7OztBQUNBRSxXQUFLO0FBQ1IsS0FWRTtBQVlIdUIsY0FBVSxFQUFFLHNCQUFXO0FBQ25CLGFBQU96QixRQUFQO0FBQ0g7QUFkRSxHQUFQO0FBZ0JILENBL0R1QixFQUF4QixDLENBaUVBOzs7QUFDQSxJQUFJLElBQUosRUFBbUM7QUFDbEMwQixRQUFNLENBQUNDLE9BQVAsR0FBaUI1QixpQkFBakI7QUFDQSIsImZpbGUiOiIuL3Jlc291cmNlcy9tZXRyb25pYy9qcy9sYXlvdXQvZXh0ZW5kZWQvcXVpY2stdXNlci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5cclxudmFyIEtUTGF5b3V0UXVpY2tVc2VyID0gZnVuY3Rpb24oKSB7XHJcbiAgICAvLyBQcml2YXRlIHByb3BlcnRpZXNcclxuICAgIHZhciBfZWxlbWVudDtcclxuICAgIHZhciBfb2ZmY2FudmFzT2JqZWN0O1xyXG5cclxuICAgIC8vIFByaXZhdGUgZnVuY3Rpb25zXHJcbiAgICB2YXIgX2luaXQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgaGVhZGVyID0gS1RVdGlsLmZpbmQoX2VsZW1lbnQsICcub2ZmY2FudmFzLWhlYWRlcicpO1xyXG4gICAgICAgIHZhciBjb250ZW50ID0gS1RVdGlsLmZpbmQoX2VsZW1lbnQsICcub2ZmY2FudmFzLWNvbnRlbnQnKTtcclxuXHJcbiAgICAgICAgX29mZmNhbnZhc09iamVjdCA9IG5ldyBLVE9mZmNhbnZhcyhfZWxlbWVudCwge1xyXG4gICAgICAgICAgICBvdmVybGF5OiB0cnVlLFxyXG4gICAgICAgICAgICBiYXNlQ2xhc3M6ICdvZmZjYW52YXMnLFxyXG4gICAgICAgICAgICBwbGFjZW1lbnQ6ICdyaWdodCcsXHJcbiAgICAgICAgICAgIGNsb3NlQnk6ICdrdF9xdWlja191c2VyX2Nsb3NlJyxcclxuICAgICAgICAgICAgdG9nZ2xlQnk6ICdrdF9xdWlja191c2VyX3RvZ2dsZSdcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgS1RVdGlsLnNjcm9sbEluaXQoY29udGVudCwge1xyXG4gICAgICAgICAgICBkaXNhYmxlRm9yTW9iaWxlOiB0cnVlLFxyXG4gICAgICAgICAgICByZXNldEhlaWdodE9uRGVzdHJveTogdHJ1ZSxcclxuICAgICAgICAgICAgaGFuZGxlV2luZG93UmVzaXplOiB0cnVlLFxyXG4gICAgICAgICAgICBoZWlnaHQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGhlaWdodCA9IHBhcnNlSW50KEtUVXRpbC5nZXRWaWV3UG9ydCgpLmhlaWdodCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGhlYWRlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KEtUVXRpbC5hY3R1YWxIZWlnaHQoaGVhZGVyKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhoZWFkZXIsICdtYXJnaW5Ub3AnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhoZWFkZXIsICdtYXJnaW5Cb3R0b20nKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGNvbnRlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKGNvbnRlbnQsICdtYXJnaW5Ub3AnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhjb250ZW50LCAnbWFyZ2luQm90dG9tJykpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KEtUVXRpbC5jc3MoX2VsZW1lbnQsICdwYWRkaW5nVG9wJykpO1xyXG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhfZWxlbWVudCwgJ3BhZGRpbmdCb3R0b20nKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gMjtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaGVpZ2h0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUHVibGljIG1ldGhvZHNcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgaW5pdDogZnVuY3Rpb24oaWQpIHtcclxuICAgICAgICAgICAgX2VsZW1lbnQgPSBLVFV0aWwuZ2V0QnlJZChpZCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIV9lbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIEluaXRpYWxpemVcclxuICAgICAgICAgICAgX2luaXQoKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBnZXRFbGVtZW50OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9lbGVtZW50O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn0oKTtcclxuXHJcbi8vIFdlYnBhY2sgc3VwcG9ydFxyXG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRtb2R1bGUuZXhwb3J0cyA9IEtUTGF5b3V0UXVpY2tVc2VyO1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/metronic/js/layout/extended/quick-user.js\n");

/***/ }),

/***/ "./resources/metronic/js/layout/extended/scrolltop.js":
/*!************************************************************!*\
  !*** ./resources/metronic/js/layout/extended/scrolltop.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar KTLayoutScrolltop = function () {\n  // Private properties\n  var _element;\n\n  var _object; // Private functions\n\n\n  var _init = function _init() {\n    _object = new KTScrolltop(_element, {\n      offset: 300,\n      speed: 600\n    });\n  }; // Public methods\n\n\n  return {\n    init: function init(id) {\n      _element = KTUtil.getById(id);\n\n      if (!_element) {\n        return;\n      } // Initialize\n\n\n      _init();\n    },\n    getElement: function getElement() {\n      return _element;\n    }\n  };\n}(); // Webpack support\n\n\nif (true) {\n  module.exports = KTLayoutScrolltop;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvbGF5b3V0L2V4dGVuZGVkL3Njcm9sbHRvcC5qcz8yOTUyIl0sIm5hbWVzIjpbIktUTGF5b3V0U2Nyb2xsdG9wIiwiX2VsZW1lbnQiLCJfb2JqZWN0IiwiX2luaXQiLCJLVFNjcm9sbHRvcCIsIm9mZnNldCIsInNwZWVkIiwiaW5pdCIsImlkIiwiS1RVdGlsIiwiZ2V0QnlJZCIsImdldEVsZW1lbnQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJQSxpQkFBaUIsR0FBRyxZQUFXO0FBQy9CO0FBQ0EsTUFBSUMsUUFBSjs7QUFDQSxNQUFJQyxPQUFKLENBSCtCLENBSy9COzs7QUFDQSxNQUFJQyxLQUFLLEdBQUcsU0FBUkEsS0FBUSxHQUFXO0FBQ25CRCxXQUFPLEdBQUcsSUFBSUUsV0FBSixDQUFnQkgsUUFBaEIsRUFBMEI7QUFDbENJLFlBQU0sRUFBRSxHQUQwQjtBQUVsQ0MsV0FBSyxFQUFFO0FBRjJCLEtBQTFCLENBQVY7QUFJSCxHQUxELENBTitCLENBYS9COzs7QUFDSCxTQUFPO0FBQ05DLFFBQUksRUFBRSxjQUFTQyxFQUFULEVBQWE7QUFDVFAsY0FBUSxHQUFHUSxNQUFNLENBQUNDLE9BQVAsQ0FBZUYsRUFBZixDQUFYOztBQUVBLFVBQUksQ0FBQ1AsUUFBTCxFQUFlO0FBQ1g7QUFDSCxPQUxRLENBT1Q7OztBQUNBRSxXQUFLO0FBQ2QsS0FWSztBQVlBUSxjQUFVLEVBQUUsc0JBQVc7QUFDbkIsYUFBT1YsUUFBUDtBQUNIO0FBZEQsR0FBUDtBQWdCQSxDQTlCdUIsRUFBeEIsQyxDQWdDQTs7O0FBQ0EsSUFBSSxJQUFKLEVBQW1DO0FBQ2xDVyxRQUFNLENBQUNDLE9BQVAsR0FBaUJiLGlCQUFqQjtBQUNBIiwiZmlsZSI6Ii4vcmVzb3VyY2VzL21ldHJvbmljL2pzL2xheW91dC9leHRlbmRlZC9zY3JvbGx0b3AuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuXHJcbnZhciBLVExheW91dFNjcm9sbHRvcCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgLy8gUHJpdmF0ZSBwcm9wZXJ0aWVzXHJcbiAgICB2YXIgX2VsZW1lbnQ7XHJcbiAgICB2YXIgX29iamVjdDtcclxuXHJcbiAgICAvLyBQcml2YXRlIGZ1bmN0aW9uc1xyXG4gICAgdmFyIF9pbml0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgX29iamVjdCA9IG5ldyBLVFNjcm9sbHRvcChfZWxlbWVudCwge1xyXG4gICAgICAgICAgb2Zmc2V0OiAzMDAsXHJcbiAgICAgICAgICBzcGVlZDogNjAwLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFB1YmxpYyBtZXRob2RzXHJcblx0cmV0dXJuIHtcclxuXHRcdGluaXQ6IGZ1bmN0aW9uKGlkKSB7XHJcbiAgICAgICAgICAgIF9lbGVtZW50ID0gS1RVdGlsLmdldEJ5SWQoaWQpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFfZWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplXHJcbiAgICAgICAgICAgIF9pbml0KCk7XHJcblx0XHR9LFxyXG5cclxuICAgICAgICBnZXRFbGVtZW50OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9lbGVtZW50O1xyXG4gICAgICAgIH1cclxuXHR9O1xyXG59KCk7XHJcblxyXG4vLyBXZWJwYWNrIHN1cHBvcnRcclxuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XHJcblx0bW9kdWxlLmV4cG9ydHMgPSBLVExheW91dFNjcm9sbHRvcDtcclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/metronic/js/layout/extended/scrolltop.js\n");

/***/ }),

/***/ "./resources/metronic/js/layout/extended/search.js":
/*!*********************************************************!*\
  !*** ./resources/metronic/js/layout/extended/search.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" //\n// Handle User Quick Search For Dropdown, Inline and Offcanvas Search Panels\n//\n\nvar KTLayoutSearch = function KTLayoutSearch() {\n  // Private properties\n  var _target;\n\n  var _form;\n\n  var _input;\n\n  var _closeIcon;\n\n  var _resultWrapper;\n\n  var _resultDropdown;\n\n  var _resultDropdownToggle;\n\n  var _closeIconContainer;\n\n  var _inputGroup;\n\n  var _query = '';\n  var _hasResult = false;\n  var _timeout = false;\n  var _isProcessing = false;\n  var _requestTimeout = 200; // ajax request fire timeout in milliseconds\n\n  var _spinnerClass = 'spinner spinner-sm spinner-primary';\n  var _resultClass = 'quick-search-has-result';\n  var _minLength = 2; // Private functions\n\n  var _showProgress = function _showProgress() {\n    _isProcessing = true;\n    KTUtil.addClass(_closeIconContainer, _spinnerClass);\n\n    if (_closeIcon) {\n      KTUtil.hide(_closeIcon);\n    }\n  };\n\n  var _hideProgress = function _hideProgress() {\n    _isProcessing = false;\n    KTUtil.removeClass(_closeIconContainer, _spinnerClass);\n\n    if (_closeIcon) {\n      if (_input.value.length < _minLength) {\n        KTUtil.hide(_closeIcon);\n      } else {\n        KTUtil.show(_closeIcon, 'flex');\n      }\n    }\n  };\n\n  var _showDropdown = function _showDropdown() {\n    if (_resultDropdownToggle && !KTUtil.hasClass(_resultDropdown, 'show')) {\n      $(_resultDropdownToggle).dropdown('toggle');\n      $(_resultDropdownToggle).dropdown('update');\n    }\n  };\n\n  var _hideDropdown = function _hideDropdown() {\n    if (_resultDropdownToggle && KTUtil.hasClass(_resultDropdown, 'show')) {\n      $(_resultDropdownToggle).dropdown('toggle');\n    }\n  };\n\n  var _processSearch = function _processSearch() {\n    if (_hasResult && _query === _input.value) {\n      _hideProgress();\n\n      KTUtil.addClass(_target, _resultClass);\n\n      _showDropdown();\n\n      KTUtil.scrollUpdate(_resultWrapper);\n      return;\n    }\n\n    _query = _input.value;\n    KTUtil.removeClass(_target, _resultClass);\n\n    _showProgress();\n\n    _hideDropdown();\n\n    setTimeout(function () {\n      $.ajax({\n        url: HOST_URL + '',\n        data: {\n          query: _query\n        },\n        dataType: 'html',\n        success: function success(res) {\n          _hasResult = true;\n\n          _hideProgress();\n\n          KTUtil.addClass(_target, _resultClass);\n          KTUtil.setHTML(_resultWrapper, res);\n\n          _showDropdown();\n\n          KTUtil.scrollUpdate(_resultWrapper);\n        },\n        error: function error(res) {\n          _hasResult = false;\n\n          _hideProgress();\n\n          KTUtil.addClass(_target, _resultClass);\n          KTUtil.setHTML(_resultWrapper, '<span class=\"font-weight-bold text-muted\">Connection error. Please try again later..</div>');\n\n          _showDropdown();\n\n          KTUtil.scrollUpdate(_resultWrapper);\n        }\n      });\n    }, 1000);\n  };\n\n  var _handleCancel = function _handleCancel(e) {\n    _input.value = '';\n    _query = '';\n    _hasResult = false;\n    KTUtil.hide(_closeIcon);\n    KTUtil.removeClass(_target, _resultClass);\n\n    _hideDropdown();\n  };\n\n  var _handleSearch = function _handleSearch() {\n    if (_input.value.length < _minLength) {\n      _hideProgress();\n\n      _hideDropdown();\n\n      return;\n    }\n\n    if (_isProcessing == true) {\n      return;\n    }\n\n    if (_timeout) {\n      clearTimeout(_timeout);\n    }\n\n    _timeout = setTimeout(function () {\n      _processSearch();\n    }, _requestTimeout);\n  }; // Public methods\n\n\n  return {\n    init: function init(id) {\n      _target = KTUtil.getById(id);\n\n      if (!_target) {\n        return;\n      }\n\n      _form = KTUtil.find(_target, '.quick-search-form');\n      _input = KTUtil.find(_target, '.form-control');\n      _closeIcon = KTUtil.find(_target, '.quick-search-close');\n      _resultWrapper = KTUtil.find(_target, '.quick-search-wrapper');\n      _resultDropdown = KTUtil.find(_target, '.dropdown-menu');\n      _resultDropdownToggle = KTUtil.find(_target, '[data-toggle=\"dropdown\"]');\n      _inputGroup = KTUtil.find(_target, '.input-group');\n      _closeIconContainer = KTUtil.find(_target, '.input-group .input-group-append'); // Attach input keyup handler\n\n      KTUtil.addEvent(_input, 'keyup', _handleSearch);\n      KTUtil.addEvent(_input, 'focus', _handleSearch); // Prevent enter click\n\n      _form.onkeypress = function (e) {\n        var key = e.charCode || e.keyCode || 0;\n\n        if (key == 13) {\n          e.preventDefault();\n        }\n      };\n\n      KTUtil.addEvent(_closeIcon, 'click', _handleCancel);\n    }\n  };\n}; // Webpack support\n\n\nif (true) {\n  module.exports = KTLayoutSearch;\n}\n\nvar KTLayoutSearchInline = KTLayoutSearch;\nvar KTLayoutSearchOffcanvas = KTLayoutSearch;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/layout/extended/search.js\n");

/***/ }),

/***/ "./resources/metronic/js/layout/initialize.js":
/*!****************************************************!*\
  !*** ./resources/metronic/js/layout/initialize.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" // Initialization\n\nKTUtil.ready(function () {\n  ////////////////////////////////////////////////////\n  // Layout Base Partials(mandatory for core layout)//\n  ////////////////////////////////////////////////////\n  // Init Desktop & Mobile Headers\n  if (typeof KTLayoutHeader !== 'undefined') {\n    KTLayoutHeader.init('kt_header', 'kt_header_mobile');\n  } // Init Header Menu\n\n\n  if (typeof KTLayoutHeaderMenu !== 'undefined') {\n    KTLayoutHeaderMenu.init('kt_header_menu', 'kt_header_menu_wrapper');\n  } // Init Header Topbar For Mobile Mode\n\n\n  if (typeof KTLayoutHeaderTopbar !== 'undefined') {\n    KTLayoutHeaderTopbar.init('kt_header_mobile_topbar_toggle');\n  } // Init Brand Panel For Logo\n\n\n  if (typeof KTLayoutBrand !== 'undefined') {\n    KTLayoutBrand.init('kt_brand');\n  } // Init Aside\n\n\n  if (typeof KTLayoutAside !== 'undefined') {\n    KTLayoutAside.init('kt_aside');\n  } // Init Aside Menu Toggle\n\n\n  if (typeof KTLayoutAsideToggle !== 'undefined') {\n    KTLayoutAsideToggle.init('kt_aside_toggle');\n  } // Init Aside Menu\n\n\n  if (typeof KTLayoutAsideMenu !== 'undefined') {\n    KTLayoutAsideMenu.init('kt_aside_menu');\n  } // Init Subheader\n\n\n  if (typeof KTLayoutSubheader !== 'undefined') {\n    KTLayoutSubheader.init('kt_subheader');\n  } // Init Content\n\n\n  if (typeof KTLayoutContent !== 'undefined') {\n    KTLayoutContent.init('kt_content');\n  } // Init Footer\n\n\n  if (typeof KTLayoutFooter !== 'undefined') {\n    KTLayoutFooter.init('kt_footer');\n  } //////////////////////////////////////////////\n  // Layout Extended Partials(optional to use)//\n  //////////////////////////////////////////////\n  // Init Scrolltop\n\n\n  if (typeof KTLayoutScrolltop !== 'undefined') {\n    KTLayoutScrolltop.init('kt_scrolltop');\n  } // Init Sticky Card\n\n\n  if (typeof KTLayoutStickyCard !== 'undefined') {\n    KTLayoutStickyCard.init('kt_page_sticky_card');\n  } // Init Stretched Card\n\n\n  if (typeof KTLayoutStretchedCard !== 'undefined') {\n    KTLayoutStretchedCard.init('kt_page_stretched_card');\n  } // Init Code Highlighter & Preview Blocks(used to demonstrate the theme features)\n\n\n  if (typeof KTLayoutExamples !== 'undefined') {\n    KTLayoutExamples.init();\n  } // Init Demo Selection Panel\n\n\n  if (typeof KTLayoutDemoPanel !== 'undefined') {\n    KTLayoutDemoPanel.init('kt_demo_panel');\n  } // Init Chat App(quick modal chat)\n\n\n  if (typeof KTLayoutChat !== 'undefined') {\n    KTLayoutChat.init('kt_chat_modal');\n  } // Init Quick Actions Offcanvas Panel\n\n\n  if (typeof KTLayoutQuickActions !== 'undefined') {\n    KTLayoutQuickActions.init('kt_quick_actions');\n  } // Init Quick Notifications Offcanvas Panel\n\n\n  if (typeof KTLayoutQuickNotifications !== 'undefined') {\n    KTLayoutQuickNotifications.init('kt_quick_notifications');\n  } // Init Quick Offcanvas Panel\n\n\n  if (typeof KTLayoutQuickPanel !== 'undefined') {\n    KTLayoutQuickPanel.init('kt_quick_panel');\n  } // Init Quick User Panel\n\n\n  if (typeof KTLayoutQuickUser !== 'undefined') {\n    KTLayoutQuickUser.init('kt_quick_user');\n  } // Init Quick Search Panel\n\n\n  if (typeof KTLayoutQuickSearch !== 'undefined') {\n    KTLayoutQuickSearch.init('kt_quick_search');\n  } // Init Quick Cart Panel\n\n\n  if (typeof KTLayoutQuickCartPanel !== 'undefined') {\n    KTLayoutQuickCartPanel.init('kt_quick_cart');\n  } // Init Search For Quick Search Dropdown\n\n\n  if (typeof KTLayoutSearch !== 'undefined') {\n    KTLayoutSearch().init('kt_quick_search_dropdown');\n  } // Init Search For Quick Search Offcanvas Panel\n\n\n  if (typeof KTLayoutSearchOffcanvas !== 'undefined') {\n    KTLayoutSearchOffcanvas().init('kt_quick_search_offcanvas');\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/layout/initialize.js\n");

/***/ }),

/***/ 2:
/*!***************************************!*\
  !*** multi ./resources/js/scripts.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! C:\dev\PHP\Laravel\8.0\competitividade_app\resources\js\scripts.js */"./resources/js/scripts.js");


/***/ })

/******/ });