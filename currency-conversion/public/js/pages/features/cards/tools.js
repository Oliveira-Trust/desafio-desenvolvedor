/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 134);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./resources/metronic/js/pages/features/cards/tools.js":
/*!*************************************************************!*\
  !*** ./resources/metronic/js/pages/features/cards/tools.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar KTCardTools = function () {\n  // Toastr\n  var initToastr = function initToastr() {\n    toastr.options.showDuration = 1000;\n  }; // Demo 1\n\n\n  var demo1 = function demo1() {\n    // This card is lazy initialized using data-card=\"true\" attribute. You can access to the card object as shown below and override its behavior\n    var card = new KTCard('kt_card_1'); // Toggle event handlers\n\n    card.on('beforeCollapse', function (card) {\n      setTimeout(function () {\n        toastr.info('Before collapse event fired!');\n      }, 100);\n    });\n    card.on('afterCollapse', function (card) {\n      setTimeout(function () {\n        toastr.warning('Before collapse event fired!');\n      }, 2000);\n    });\n    card.on('beforeExpand', function (card) {\n      setTimeout(function () {\n        toastr.info('Before expand event fired!');\n      }, 100);\n    });\n    card.on('afterExpand', function (card) {\n      setTimeout(function () {\n        toastr.warning('After expand event fired!');\n      }, 2000);\n    }); // Remove event handlers\n\n    card.on('beforeRemove', function (card) {\n      toastr.info('Before remove event fired!');\n      return confirm('Are you sure to remove this card ?'); // remove card after user confirmation\n    });\n    card.on('afterRemove', function (card) {\n      setTimeout(function () {\n        toastr.warning('After remove event fired!');\n      }, 2000);\n    }); // Reload event handlers\n\n    card.on('reload', function (card) {\n      toastr.info('Leload event fired!');\n      KTApp.block(card.getSelf(), {\n        overlayColor: '#ffffff',\n        type: 'loader',\n        state: 'primary',\n        opacity: 0.3,\n        size: 'lg'\n      }); // update the content here\n\n      setTimeout(function () {\n        KTApp.unblock(card.getSelf());\n      }, 2000);\n    });\n  }; // Demo 2\n\n\n  var demo2 = function demo2() {\n    // This card is lazy initialized using data-card=\"true\" attribute. You can access to the card object as shown below and override its behavior\n    var card = new KTCard('kt_card_2'); // Toggle event handlers\n\n    card.on('beforeCollapse', function (card) {\n      setTimeout(function () {\n        toastr.info('Before collapse event fired!');\n      }, 100);\n    });\n    card.on('afterCollapse', function (card) {\n      setTimeout(function () {\n        toastr.warning('Before collapse event fired!');\n      }, 2000);\n    });\n    card.on('beforeExpand', function (card) {\n      setTimeout(function () {\n        toastr.info('Before expand event fired!');\n      }, 100);\n    });\n    card.on('afterExpand', function (card) {\n      setTimeout(function () {\n        toastr.warning('After expand event fired!');\n      }, 2000);\n    }); // Remove event handlers\n\n    card.on('beforeRemove', function (card) {\n      toastr.info('Before remove event fired!');\n      return confirm('Are you sure to remove this card ?'); // remove card after user confirmation\n    });\n    card.on('afterRemove', function (card) {\n      setTimeout(function () {\n        toastr.warning('After remove event fired!');\n      }, 2000);\n    }); // Reload event handlers\n\n    card.on('reload', function (card) {\n      toastr.info('Leload event fired!');\n      KTApp.block(card.getSelf(), {\n        overlayColor: '#000000',\n        type: 'spinner',\n        state: 'primary',\n        opacity: 0.05,\n        size: 'lg'\n      }); // update the content here\n\n      setTimeout(function () {\n        KTApp.unblock(card.getSelf());\n      }, 2000);\n    });\n  }; // Demo 3\n\n\n  var demo3 = function demo3() {\n    // This card is lazy initialized using data-card=\"true\" attribute. You can access to the card object as shown below and override its behavior\n    var card = new KTCard('kt_card_3'); // Toggle event handlers\n\n    card.on('beforeCollapse', function (card) {\n      setTimeout(function () {\n        toastr.info('Before collapse event fired!');\n      }, 100);\n    });\n    card.on('afterCollapse', function (card) {\n      setTimeout(function () {\n        toastr.warning('Before collapse event fired!');\n      }, 2000);\n    });\n    card.on('beforeExpand', function (card) {\n      setTimeout(function () {\n        toastr.info('Before expand event fired!');\n      }, 100);\n    });\n    card.on('afterExpand', function (card) {\n      setTimeout(function () {\n        toastr.warning('After expand event fired!');\n      }, 2000);\n    }); // Remove event handlers\n\n    card.on('beforeRemove', function (card) {\n      toastr.info('Before remove event fired!');\n      return confirm('Are you sure to remove this card ?'); // remove card after user confirmation\n    });\n    card.on('afterRemove', function (card) {\n      setTimeout(function () {\n        toastr.warning('After remove event fired!');\n      }, 2000);\n    }); // Reload event handlers\n\n    card.on('reload', function (card) {\n      toastr.info('Leload event fired!');\n      KTApp.block(card.getSelf(), {\n        type: 'loader',\n        state: 'success',\n        message: 'Please wait...'\n      }); // update the content here\n\n      setTimeout(function () {\n        KTApp.unblock(card.getSelf());\n      }, 2000);\n    });\n  }; // Demo 4\n\n\n  var demo4 = function demo4() {\n    // This card is lazy initialized using data-card=\"true\" attribute. You can access to the card object as shown below and override its behavior\n    var card = new KTCard('kt_card_4'); // Toggle event handlers\n\n    card.on('beforeCollapse', function (card) {\n      setTimeout(function () {\n        toastr.info('Before collapse event fired!');\n      }, 100);\n    });\n    card.on('afterCollapse', function (card) {\n      setTimeout(function () {\n        toastr.warning('Before collapse event fired!');\n      }, 2000);\n    });\n    card.on('beforeExpand', function (card) {\n      setTimeout(function () {\n        toastr.info('Before expand event fired!');\n      }, 100);\n    });\n    card.on('afterExpand', function (card) {\n      setTimeout(function () {\n        toastr.warning('After expand event fired!');\n      }, 2000);\n    }); // Remove event handlers\n\n    card.on('beforeRemove', function (card) {\n      toastr.info('Before remove event fired!');\n      return confirm('Are you sure to remove this card ?'); // remove card after user confirmation\n    });\n    card.on('afterRemove', function (card) {\n      setTimeout(function () {\n        toastr.warning('After remove event fired!');\n      }, 2000);\n    }); // Reload event handlers\n\n    card.on('reload', function (card) {\n      toastr.info('Leload event fired!');\n      KTApp.block(card.getSelf(), {\n        type: 'loader',\n        state: 'primary',\n        message: 'Please wait...'\n      }); // update the content here\n\n      setTimeout(function () {\n        KTApp.unblock(card.getSelf());\n      }, 2000);\n    });\n  };\n\n  return {\n    //main function to initiate the module\n    init: function init() {\n      initToastr(); // init demos\n\n      demo1();\n      demo2();\n      demo3();\n      demo4();\n    }\n  };\n}();\n\njQuery(document).ready(function () {\n  KTCardTools.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/pages/features/cards/tools.js\n");

/***/ }),

/***/ 134:
/*!*******************************************************************!*\
  !*** multi ./resources/metronic/js/pages/features/cards/tools.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! C:\dev\PHP\Laravel\8.0\competitividade_app\resources\metronic\js\pages\features\cards\tools.js */"./resources/metronic/js/pages/features/cards/tools.js");


/***/ })

/******/ });